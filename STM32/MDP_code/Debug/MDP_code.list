
MDP_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d648  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c04  0800d7d8  0800d7d8  0001d7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3dc  0800e3dc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3dc  0800e3dc  0001e3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3e4  0800e3e4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3e4  0800e3e4  0001e3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3e8  0800e3e8  0001e3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800e3ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00007174  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200071fc  200071fc  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e6c2  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ac8  00000000  00000000  0003e77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a70  00000000  00000000  00042248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001930  00000000  00000000  00043cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000045a9  00000000  00000000  000455e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d764  00000000  00000000  00049b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e46b3  00000000  00000000  000672f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b9a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077e8  00000000  00000000  0014b9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7c0 	.word	0x0800d7c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800d7c0 	.word	0x0800d7c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e026      	b.n	8000fd6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	3b50      	subs	r3, #80	; 0x50
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f82b 	bl	8000fec <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8000f96:	2100      	movs	r1, #0
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 f827 	bl	8000fec <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2010      	movs	r0, #16
 8000fa2:	f000 f823 	bl	8000fec <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71bb      	strb	r3, [r7, #6]
 8000faa:	e00d      	b.n	8000fc8 <OLED_Refresh_Gram+0x4c>
 8000fac:	79ba      	ldrb	r2, [r7, #6]
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <OLED_Refresh_Gram+0x6c>)
 8000fb2:	00d2      	lsls	r2, r2, #3
 8000fb4:	440a      	add	r2, r1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f815 	bl	8000fec <OLED_WR_Byte>
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	71bb      	strb	r3, [r7, #6]
 8000fc8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	daed      	bge.n	8000fac <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b07      	cmp	r3, #7
 8000fda:	d9d5      	bls.n	8000f88 <OLED_Refresh_Gram+0xc>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000360 	.word	0x20000360

08000fec <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if(cmd)
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001008:	481c      	ldr	r0, [pc, #112]	; (800107c <OLED_WR_Byte+0x90>)
 800100a:	f004 fd79 	bl	8005b00 <HAL_GPIO_WritePin>
 800100e:	e005      	b.n	800101c <OLED_WR_Byte+0x30>
	else
	  OLED_RS_Clr();
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4819      	ldr	r0, [pc, #100]	; (800107c <OLED_WR_Byte+0x90>)
 8001018:	f004 fd72 	bl	8005b00 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e01e      	b.n	8001060 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 8001022:	2200      	movs	r2, #0
 8001024:	2120      	movs	r1, #32
 8001026:	4815      	ldr	r0, [pc, #84]	; (800107c <OLED_WR_Byte+0x90>)
 8001028:	f004 fd6a 	bl	8005b00 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	da05      	bge.n	8001040 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8001034:	2201      	movs	r2, #1
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	4810      	ldr	r0, [pc, #64]	; (800107c <OLED_WR_Byte+0x90>)
 800103a:	f004 fd61 	bl	8005b00 <HAL_GPIO_WritePin>
 800103e:	e004      	b.n	800104a <OLED_WR_Byte+0x5e>
		else
		   OLED_SDIN_Clr();
 8001040:	2200      	movs	r2, #0
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <OLED_WR_Byte+0x90>)
 8001046:	f004 fd5b 	bl	8005b00 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800104a:	2201      	movs	r2, #1
 800104c:	2120      	movs	r1, #32
 800104e:	480b      	ldr	r0, [pc, #44]	; (800107c <OLED_WR_Byte+0x90>)
 8001050:	f004 fd56 	bl	8005b00 <HAL_GPIO_WritePin>
		dat<<=1;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	3301      	adds	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b07      	cmp	r3, #7
 8001064:	d9dd      	bls.n	8001022 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <OLED_WR_Byte+0x90>)
 800106e:	f004 fd47 	bl	8005b00 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;
 8001086:	2300      	movs	r3, #0
 8001088:	71fb      	strb	r3, [r7, #7]
 800108a:	e014      	b.n	80010b6 <OLED_Clear+0x36>
 800108c:	2300      	movs	r3, #0
 800108e:	71bb      	strb	r3, [r7, #6]
 8001090:	e00a      	b.n	80010a8 <OLED_Clear+0x28>
 8001092:	79ba      	ldrb	r2, [r7, #6]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	490c      	ldr	r1, [pc, #48]	; (80010c8 <OLED_Clear+0x48>)
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	440a      	add	r2, r1
 800109c:	4413      	add	r3, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	3301      	adds	r3, #1
 80010a6:	71bb      	strb	r3, [r7, #6]
 80010a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	daf0      	bge.n	8001092 <OLED_Clear+0x12>
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3301      	adds	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d9e7      	bls.n	800108c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80010bc:	f7ff ff5e 	bl	8000f7c <OLED_Refresh_Gram>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000360 	.word	0x20000360

080010cc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	460b      	mov	r3, r1
 80010d8:	71bb      	strb	r3, [r7, #6]
 80010da:	4613      	mov	r3, r2
 80010dc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db41      	blt.n	800116e <OLED_DrawPoint+0xa2>
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b3f      	cmp	r3, #63	; 0x3f
 80010ee:	d83e      	bhi.n	800116e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2201      	movs	r2, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8001112:	797b      	ldrb	r3, [r7, #5]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d012      	beq.n	800113e <OLED_DrawPoint+0x72>
 8001118:	79fa      	ldrb	r2, [r7, #7]
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	4917      	ldr	r1, [pc, #92]	; (800117c <OLED_DrawPoint+0xb0>)
 800111e:	00d2      	lsls	r2, r2, #3
 8001120:	440a      	add	r2, r1
 8001122:	4413      	add	r3, r2
 8001124:	7818      	ldrb	r0, [r3, #0]
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	7bf9      	ldrb	r1, [r7, #15]
 800112c:	4301      	orrs	r1, r0
 800112e:	b2c8      	uxtb	r0, r1
 8001130:	4912      	ldr	r1, [pc, #72]	; (800117c <OLED_DrawPoint+0xb0>)
 8001132:	00d2      	lsls	r2, r2, #3
 8001134:	440a      	add	r2, r1
 8001136:	4413      	add	r3, r2
 8001138:	4602      	mov	r2, r0
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e018      	b.n	8001170 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <OLED_DrawPoint+0xb0>)
 8001144:	00d2      	lsls	r2, r2, #3
 8001146:	440a      	add	r2, r1
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b25a      	sxtb	r2, r3
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	43db      	mvns	r3, r3
 8001154:	b25b      	sxtb	r3, r3
 8001156:	4013      	ands	r3, r2
 8001158:	b259      	sxtb	r1, r3
 800115a:	79fa      	ldrb	r2, [r7, #7]
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	b2c8      	uxtb	r0, r1
 8001160:	4906      	ldr	r1, [pc, #24]	; (800117c <OLED_DrawPoint+0xb0>)
 8001162:	00d2      	lsls	r2, r2, #3
 8001164:	440a      	add	r2, r1
 8001166:	4413      	add	r3, r2
 8001168:	4602      	mov	r2, r0
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e000      	b.n	8001170 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800116e:	bf00      	nop
}
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000360 	.word	0x20000360

08001180 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	4604      	mov	r4, r0
 8001188:	4608      	mov	r0, r1
 800118a:	4611      	mov	r1, r2
 800118c:	461a      	mov	r2, r3
 800118e:	4623      	mov	r3, r4
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	4603      	mov	r3, r0
 8001194:	71bb      	strb	r3, [r7, #6]
 8001196:	460b      	mov	r3, r1
 8001198:	717b      	strb	r3, [r7, #5]
 800119a:	4613      	mov	r3, r2
 800119c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';
 80011a2:	797b      	ldrb	r3, [r7, #5]
 80011a4:	3b20      	subs	r3, #32
 80011a6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	73bb      	strb	r3, [r7, #14]
 80011ac:	e04d      	b.n	800124a <OLED_ShowChar+0xca>
    {
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80011ae:	793b      	ldrb	r3, [r7, #4]
 80011b0:	2b0c      	cmp	r3, #12
 80011b2:	d10b      	bne.n	80011cc <OLED_ShowChar+0x4c>
 80011b4:	797a      	ldrb	r2, [r7, #5]
 80011b6:	7bb9      	ldrb	r1, [r7, #14]
 80011b8:	4828      	ldr	r0, [pc, #160]	; (800125c <OLED_ShowChar+0xdc>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4403      	add	r3, r0
 80011c4:	440b      	add	r3, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e007      	b.n	80011dc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size
 80011cc:	797a      	ldrb	r2, [r7, #5]
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	4923      	ldr	r1, [pc, #140]	; (8001260 <OLED_ShowChar+0xe0>)
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	440a      	add	r2, r1
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80011dc:	2300      	movs	r3, #0
 80011de:	737b      	strb	r3, [r7, #13]
 80011e0:	e02d      	b.n	800123e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da07      	bge.n	80011fa <OLED_ShowChar+0x7a>
 80011ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ee:	79b9      	ldrb	r1, [r7, #6]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff6a 	bl	80010cc <OLED_DrawPoint>
 80011f8:	e00c      	b.n	8001214 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80011fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bf0c      	ite	eq
 8001202:	2301      	moveq	r3, #1
 8001204:	2300      	movne	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	79b9      	ldrb	r1, [r7, #6]
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff5c 	bl	80010cc <OLED_DrawPoint>
			temp<<=1;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
			y++;
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	3301      	adds	r3, #1
 800121e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001220:	79ba      	ldrb	r2, [r7, #6]
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	1ad2      	subs	r2, r2, r3
 8001226:	793b      	ldrb	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	d105      	bne.n	8001238 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800122c:	7b3b      	ldrb	r3, [r7, #12]
 800122e:	71bb      	strb	r3, [r7, #6]
				x++;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	3301      	adds	r3, #1
 8001234:	71fb      	strb	r3, [r7, #7]
				break;
 8001236:	e005      	b.n	8001244 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001238:	7b7b      	ldrb	r3, [r7, #13]
 800123a:	3301      	adds	r3, #1
 800123c:	737b      	strb	r3, [r7, #13]
 800123e:	7b7b      	ldrb	r3, [r7, #13]
 8001240:	2b07      	cmp	r3, #7
 8001242:	d9ce      	bls.n	80011e2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	3301      	adds	r3, #1
 8001248:	73bb      	strb	r3, [r7, #14]
 800124a:	7bba      	ldrb	r2, [r7, #14]
 800124c:	793b      	ldrb	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d3ad      	bcc.n	80011ae <OLED_ShowChar+0x2e>
			}
		}
    }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	0800d924 	.word	0x0800d924
 8001260:	0800dd98 	.word	0x0800dd98

08001264 <OLED_ShowString>:
}
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af02      	add	r7, sp, #8
 800126a:	4603      	mov	r3, r0
 800126c:	603a      	str	r2, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	460b      	mov	r3, r1
 8001272:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while(*p!='\0')
 8001274:	e01f      	b.n	80012b6 <OLED_ShowString+0x52>
    {
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b7a      	cmp	r3, #122	; 0x7a
 800127a:	d904      	bls.n	8001286 <OLED_ShowString+0x22>
 800127c:	2300      	movs	r3, #0
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	3310      	adds	r3, #16
 8001284:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	2b3a      	cmp	r3, #58	; 0x3a
 800128a:	d905      	bls.n	8001298 <OLED_ShowString+0x34>
 800128c:	2300      	movs	r3, #0
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	71bb      	strb	r3, [r7, #6]
 8001294:	f7ff fef4 	bl	8001080 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	79b9      	ldrb	r1, [r7, #6]
 800129e:	79f8      	ldrb	r0, [r7, #7]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	230c      	movs	r3, #12
 80012a6:	f7ff ff6b 	bl	8001180 <OLED_ShowChar>
        x+=8;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	3308      	adds	r3, #8
 80012ae:	71fb      	strb	r3, [r7, #7]
        p++;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1db      	bne.n	8001276 <OLED_ShowString+0x12>
    }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <OLED_Init>:

void OLED_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80012cc:	f005 fbc8 	bl	8006a60 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <OLED_Init+0x110>)
 80012d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d4:	4a40      	ldr	r2, [pc, #256]	; (80013d8 <OLED_Init+0x110>)
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	6713      	str	r3, [r2, #112]	; 0x70
 80012dc:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <OLED_Init+0x110>)
 80012de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e0:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <OLED_Init+0x110>)
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO


	HAL_PWR_DisableBkUpAccess();
 80012e8:	f005 fbce 	bl	8006a88 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 80012ec:	2200      	movs	r2, #0
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	483a      	ldr	r0, [pc, #232]	; (80013dc <OLED_Init+0x114>)
 80012f2:	f004 fc05 	bl	8005b00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80012f6:	2064      	movs	r0, #100	; 0x64
 80012f8:	f002 ffb8 	bl	800426c <HAL_Delay>
	OLED_RST_Set();
 80012fc:	2201      	movs	r2, #1
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4836      	ldr	r0, [pc, #216]	; (80013dc <OLED_Init+0x114>)
 8001302:	f004 fbfd 	bl	8005b00 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8001306:	2100      	movs	r1, #0
 8001308:	20ae      	movs	r0, #174	; 0xae
 800130a:	f7ff fe6f 	bl	8000fec <OLED_WR_Byte>

	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800130e:	2100      	movs	r1, #0
 8001310:	20d5      	movs	r0, #213	; 0xd5
 8001312:	f7ff fe6b 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8001316:	2100      	movs	r1, #0
 8001318:	2050      	movs	r0, #80	; 0x50
 800131a:	f7ff fe67 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800131e:	2100      	movs	r1, #0
 8001320:	20a8      	movs	r0, #168	; 0xa8
 8001322:	f7ff fe63 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64)
 8001326:	2100      	movs	r1, #0
 8001328:	203f      	movs	r0, #63	; 0x3f
 800132a:	f7ff fe5f 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800132e:	2100      	movs	r1, #0
 8001330:	20d3      	movs	r0, #211	; 0xd3
 8001332:	f7ff fe5b 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fe57 	bl	8000fec <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800133e:	2100      	movs	r1, #0
 8001340:	2040      	movs	r0, #64	; 0x40
 8001342:	f7ff fe53 	bl	8000fec <OLED_WR_Byte>

	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8001346:	2100      	movs	r1, #0
 8001348:	208d      	movs	r0, #141	; 0x8d
 800134a:	f7ff fe4f 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800134e:	2100      	movs	r1, #0
 8001350:	2014      	movs	r0, #20
 8001352:	f7ff fe4b 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8001356:	2100      	movs	r1, #0
 8001358:	2020      	movs	r0, #32
 800135a:	f7ff fe47 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800135e:	2100      	movs	r1, #0
 8001360:	2002      	movs	r0, #2
 8001362:	f7ff fe43 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8001366:	2100      	movs	r1, #0
 8001368:	20a1      	movs	r0, #161	; 0xa1
 800136a:	f7ff fe3f 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800136e:	2100      	movs	r1, #0
 8001370:	20c0      	movs	r0, #192	; 0xc0
 8001372:	f7ff fe3b 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8001376:	2100      	movs	r1, #0
 8001378:	20da      	movs	r0, #218	; 0xda
 800137a:	f7ff fe37 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800137e:	2100      	movs	r1, #0
 8001380:	2012      	movs	r0, #18
 8001382:	f7ff fe33 	bl	8000fec <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8001386:	2100      	movs	r1, #0
 8001388:	2081      	movs	r0, #129	; 0x81
 800138a:	f7ff fe2f 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800138e:	2100      	movs	r1, #0
 8001390:	20ef      	movs	r0, #239	; 0xef
 8001392:	f7ff fe2b 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8001396:	2100      	movs	r1, #0
 8001398:	20d9      	movs	r0, #217	; 0xd9
 800139a:	f7ff fe27 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800139e:	2100      	movs	r1, #0
 80013a0:	20f1      	movs	r0, #241	; 0xf1
 80013a2:	f7ff fe23 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80013a6:	2100      	movs	r1, #0
 80013a8:	20db      	movs	r0, #219	; 0xdb
 80013aa:	f7ff fe1f 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80013ae:	2100      	movs	r1, #0
 80013b0:	2030      	movs	r0, #48	; 0x30
 80013b2:	f7ff fe1b 	bl	8000fec <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80013b6:	2100      	movs	r1, #0
 80013b8:	20a4      	movs	r0, #164	; 0xa4
 80013ba:	f7ff fe17 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display
 80013be:	2100      	movs	r1, #0
 80013c0:	20a6      	movs	r0, #166	; 0xa6
 80013c2:	f7ff fe13 	bl	8000fec <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON
 80013c6:	2100      	movs	r1, #0
 80013c8:	20af      	movs	r0, #175	; 0xaf
 80013ca:	f7ff fe0f 	bl	8000fec <OLED_WR_Byte>
	OLED_Clear();
 80013ce:	f7ff fe57 	bl	8001080 <OLED_Clear>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40021000 	.word	0x40021000

080013e0 <motorStop>:
uint8_t us_dist_obst = 0;
int travel = 0;

char inOrOut='7';

void motorStop(){
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

	motorOnA = 0;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <motorStop+0x1c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
	motorOnB = 0;
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <motorStop+0x20>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2000079c 	.word	0x2000079c
 8001400:	200007a0 	.word	0x200007a0
 8001404:	00000000 	.word	0x00000000

08001408 <motorForward>:


void motorForward(int target_distance, int dirA){
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]


	dir = dirA;
 8001412:	4a91      	ldr	r2, [pc, #580]	; (8001658 <motorForward+0x250>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	6013      	str	r3, [r2, #0]
	gyroInit();
 8001418:	f000 f9c6 	bl	80017a8 <gyroInit>

	htim1.Instance -> CCR4 = 146.5;
 800141c:	4b8f      	ldr	r3, [pc, #572]	; (800165c <motorForward+0x254>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2292      	movs	r2, #146	; 0x92
 8001422:	641a      	str	r2, [r3, #64]	; 0x40

	double encoder_count = 0;
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if(dir == 1){
 8001430:	4b89      	ldr	r3, [pc, #548]	; (8001658 <motorForward+0x250>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <motorForward+0x3c>
		encoder_count = 1560.0;
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b88      	ldr	r3, [pc, #544]	; (8001660 <motorForward+0x258>)
 800143e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001442:	e009      	b.n	8001458 <motorForward+0x50>
	} else if(dir == -1) {
 8001444:	4b84      	ldr	r3, [pc, #528]	; (8001658 <motorForward+0x250>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d104      	bne.n	8001458 <motorForward+0x50>
		encoder_count = 1560.0;
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b83      	ldr	r3, [pc, #524]	; (8001660 <motorForward+0x258>)
 8001454:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}



    int pidVal =0;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

    total_angle = 0;
 800145c:	4981      	ldr	r1, [pc, #516]	; (8001664 <motorForward+0x25c>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9c1 2300 	strd	r2, r3, [r1]
    double Aint = 0;
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if(target_distance>10){
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0a      	cmp	r3, #10
 800147a:	dd08      	ble.n	800148e <motorForward+0x86>
    	motorOnA = SPEED*dir;
 800147c:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <motorForward+0x260>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a75      	ldr	r2, [pc, #468]	; (8001658 <motorForward+0x250>)
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	fb02 f303 	mul.w	r3, r2, r3
 8001488:	4a78      	ldr	r2, [pc, #480]	; (800166c <motorForward+0x264>)
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e007      	b.n	800149e <motorForward+0x96>
    }
    else{
    	motorOnA = 1100*dir;
 800148e:	4b72      	ldr	r3, [pc, #456]	; (8001658 <motorForward+0x250>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f240 424c 	movw	r2, #1100	; 0x44c
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	4a74      	ldr	r2, [pc, #464]	; (800166c <motorForward+0x264>)
 800149c:	6013      	str	r3, [r2, #0]
    }


	motorOnB = motorOnA;
 800149e:	4b73      	ldr	r3, [pc, #460]	; (800166c <motorForward+0x264>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a73      	ldr	r2, [pc, #460]	; (8001670 <motorForward+0x268>)
 80014a4:	6013      	str	r3, [r2, #0]


				while(1){
				osDelayUntil(10);
 80014a6:	200a      	movs	r0, #10
 80014a8:	f008 fdbb 	bl	800a022 <osDelayUntil>
				if(dirA == 1){
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d12b      	bne.n	800150a <motorForward+0x102>
				pidVal = (int)(146.5 + (total_angle*10 + 0.00*Aint));
 80014b2:	4b6c      	ldr	r3, [pc, #432]	; (8001664 <motorForward+0x25c>)
 80014b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <motorForward+0x26c>)
 80014be:	f7ff f893 	bl	80005e8 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4614      	mov	r4, r2
 80014c8:	461d      	mov	r5, r3
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014d6:	f7ff f887 	bl	80005e8 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4620      	mov	r0, r4
 80014e0:	4629      	mov	r1, r5
 80014e2:	f7fe fecb 	bl	800027c <__adddf3>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	a358      	add	r3, pc, #352	; (adr r3, 8001650 <motorForward+0x248>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7fe fec2 	bl	800027c <__adddf3>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb22 	bl	8000b48 <__aeabi_d2iz>
 8001504:	4603      	mov	r3, r0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e02c      	b.n	8001564 <motorForward+0x15c>


				} else if(dirA == -1) {
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d128      	bne.n	8001564 <motorForward+0x15c>
					pidVal = (int)(146.5 - (total_angle*10 + 0.00*Aint));
 8001512:	4b54      	ldr	r3, [pc, #336]	; (8001664 <motorForward+0x25c>)
 8001514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b55      	ldr	r3, [pc, #340]	; (8001674 <motorForward+0x26c>)
 800151e:	f7ff f863 	bl	80005e8 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4614      	mov	r4, r2
 8001528:	461d      	mov	r5, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001536:	f7ff f857 	bl	80005e8 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4620      	mov	r0, r4
 8001540:	4629      	mov	r1, r5
 8001542:	f7fe fe9b 	bl	800027c <__adddf3>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	a141      	add	r1, pc, #260	; (adr r1, 8001650 <motorForward+0x248>)
 800154c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001550:	f7fe fe92 	bl	8000278 <__aeabi_dsub>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff faf4 	bl	8000b48 <__aeabi_d2iz>
 8001560:	4603      	mov	r3, r0
 8001562:	617b      	str	r3, [r7, #20]

				}
				if(inOrOut=='7'){
 8001564:	4b44      	ldr	r3, [pc, #272]	; (8001678 <motorForward+0x270>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b37      	cmp	r3, #55	; 0x37
 800156a:	d11b      	bne.n	80015a4 <motorForward+0x19c>
					if(dirA == 1){
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d10a      	bne.n	8001588 <motorForward+0x180>
						if(pidVal <= 141){
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2b8d      	cmp	r3, #141	; 0x8d
 8001576:	dc01      	bgt.n	800157c <motorForward+0x174>
							pidVal = 141;
 8001578:	238d      	movs	r3, #141	; 0x8d
 800157a:	617b      	str	r3, [r7, #20]
						}
						if(pidVal >= 151){
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b96      	cmp	r3, #150	; 0x96
 8001580:	dd10      	ble.n	80015a4 <motorForward+0x19c>
							pidVal = 149;
 8001582:	2395      	movs	r3, #149	; 0x95
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e00d      	b.n	80015a4 <motorForward+0x19c>
						}
					}
					else if(dirA == -1){
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158e:	d109      	bne.n	80015a4 <motorForward+0x19c>
						if(pidVal <= 143){
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b8f      	cmp	r3, #143	; 0x8f
 8001594:	dc01      	bgt.n	800159a <motorForward+0x192>
							pidVal = 142;
 8001596:	238e      	movs	r3, #142	; 0x8e
 8001598:	617b      	str	r3, [r7, #20]
						}
						if(pidVal >= 151){
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b96      	cmp	r3, #150	; 0x96
 800159e:	dd01      	ble.n	80015a4 <motorForward+0x19c>
							pidVal = 149;
 80015a0:	2395      	movs	r3, #149	; 0x95
 80015a2:	617b      	str	r3, [r7, #20]
						}
					}
				}
				//OLED_ShowString(10,10, atoi(pidVal));
				htim1.Instance -> CCR4 = 146.5;
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <motorForward+0x254>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2292      	movs	r2, #146	; 0x92
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
				osDelayUntil(5);
 80015ac:	2005      	movs	r0, #5
 80015ae:	f008 fd38 	bl	800a022 <osDelayUntil>
				htim1.Instance -> CCR4 = pidVal;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <motorForward+0x254>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
				osDelayUntil(5);
 80015ba:	2005      	movs	r0, #5
 80015bc:	f008 fd31 	bl	800a022 <osDelayUntil>
				Aint += total_angle;
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <motorForward+0x25c>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ca:	f7fe fe57 	bl	800027c <__adddf3>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	e9c7 2302 	strd	r2, r3, [r7, #8]


				if(((total_distancea+total_distanceb)) >= 2*((target_distance)/21.04f)*encoder_count){
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <motorForward+0x274>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <motorForward+0x278>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff97 	bl	8000514 <__aeabi_i2d>
 80015e6:	4604      	mov	r4, r0
 80015e8:	460d      	mov	r5, r1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001684 <motorForward+0x27c>
 80015f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001600:	ee17 0a90 	vmov	r0, s15
 8001604:	f7fe ff98 	bl	8000538 <__aeabi_f2d>
 8001608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800160c:	f7fe ffec 	bl	80005e8 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7ff fa6c 	bl	8000af4 <__aeabi_dcmpge>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <motorForward+0x220>

					motorStop();
 8001622:	f7ff fedd 	bl	80013e0 <motorStop>

					break;
 8001626:	e000      	b.n	800162a <motorForward+0x222>
				osDelayUntil(10);
 8001628:	e73d      	b.n	80014a6 <motorForward+0x9e>
//									motorOnA = -1000*dir;
//									motorOnB = -1000*dir;
//									osDelayUntil(10);
//				}

				motorStop();
 800162a:	f7ff fed9 	bl	80013e0 <motorStop>
				//osDelay(100);
				total_distancea = 0;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <motorForward+0x274>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
				total_distanceb = 0;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <motorForward+0x278>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
				htim1.Instance -> CCR4 = 146.5;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <motorForward+0x254>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2292      	movs	r2, #146	; 0x92
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001642:	bf00      	nop
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	00000000 	.word	0x00000000
 8001654:	40625000 	.word	0x40625000
 8001658:	20000000 	.word	0x20000000
 800165c:	200001a0 	.word	0x200001a0
 8001660:	40986000 	.word	0x40986000
 8001664:	20002818 	.word	0x20002818
 8001668:	20000008 	.word	0x20000008
 800166c:	2000079c 	.word	0x2000079c
 8001670:	200007a0 	.word	0x200007a0
 8001674:	40240000 	.word	0x40240000
 8001678:	20000010 	.word	0x20000010
 800167c:	2000280c 	.word	0x2000280c
 8001680:	20002810 	.word	0x20002810
 8001684:	41a851ec 	.word	0x41a851ec

08001688 <motorAForward>:
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
}



void motorAForward(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2104      	movs	r1, #4
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <motorAForward+0x1c>)
 8001692:	f004 fa35 	bl	8005b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2108      	movs	r1, #8
 800169a:	4802      	ldr	r0, [pc, #8]	; (80016a4 <motorAForward+0x1c>)
 800169c:	f004 fa30 	bl	8005b00 <HAL_GPIO_WritePin>


}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020000 	.word	0x40020000

080016a8 <motorAReverse>:
void motorAReverse(){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2104      	movs	r1, #4
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <motorAReverse+0x1c>)
 80016b2:	f004 fa25 	bl	8005b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2108      	movs	r1, #8
 80016ba:	4802      	ldr	r0, [pc, #8]	; (80016c4 <motorAReverse+0x1c>)
 80016bc:	f004 fa20 	bl	8005b00 <HAL_GPIO_WritePin>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020000 	.word	0x40020000

080016c8 <motorBForward>:
void motorBForward(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2120      	movs	r1, #32
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <motorBForward+0x1c>)
 80016d2:	f004 fa15 	bl	8005b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2110      	movs	r1, #16
 80016da:	4802      	ldr	r0, [pc, #8]	; (80016e4 <motorBForward+0x1c>)
 80016dc:	f004 fa10 	bl	8005b00 <HAL_GPIO_WritePin>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40020000 	.word	0x40020000

080016e8 <motorBReverse>:
void motorBReverse(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2120      	movs	r1, #32
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <motorBReverse+0x1c>)
 80016f2:	f004 fa05 	bl	8005b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2110      	movs	r1, #16
 80016fa:	4802      	ldr	r0, [pc, #8]	; (8001704 <motorBReverse+0x1c>)
 80016fc:	f004 fa00 	bl	8005b00 <HAL_GPIO_WritePin>
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40020000 	.word	0x40020000

08001708 <readByte>:
//
//
//}


void readByte(uint8_t addr, uint8_t* data){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af02      	add	r7, sp, #8
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <readByte+0x4c>)
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr<<1, buff, 1, 10);
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <readByte+0x50>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	b299      	uxth	r1, r3
 8001724:	230a      	movs	r3, #10
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2301      	movs	r3, #1
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <readByte+0x4c>)
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <readByte+0x54>)
 800172e:	f004 fb45 	bl	8005dbc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr<<1, data, 2, 20);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <readByte+0x50>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b299      	uxth	r1, r3
 800173c:	2314      	movs	r3, #20
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2302      	movs	r3, #2
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <readByte+0x54>)
 8001746:	f004 fc37 	bl	8005fb8 <HAL_I2C_Master_Receive>

}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000788 	.word	0x20000788
 8001758:	20000004 	.word	0x20000004
 800175c:	2000014c 	.word	0x2000014c

08001760 <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af02      	add	r7, sp, #8
 8001766:	4603      	mov	r3, r0
 8001768:	460a      	mov	r2, r1
 800176a:	71fb      	strb	r3, [r7, #7]
 800176c:	4613      	mov	r3, r2
 800176e:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <writeByte+0x3c>)
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <writeByte+0x3c>)
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <writeByte+0x40>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	b299      	uxth	r1, r3
 8001786:	2314      	movs	r3, #20
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2302      	movs	r3, #2
 800178c:	4a03      	ldr	r2, [pc, #12]	; (800179c <writeByte+0x3c>)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <writeByte+0x44>)
 8001790:	f004 fb14 	bl	8005dbc <HAL_I2C_Master_Transmit>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000788 	.word	0x20000788
 80017a0:	20000004 	.word	0x20000004
 80017a4:	2000014c 	.word	0x2000014c

080017a8 <gyroInit>:


}


void gyroInit(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 80017ac:	2100      	movs	r1, #0
 80017ae:	2006      	movs	r0, #6
 80017b0:	f7ff ffd6 	bl	8001760 <writeByte>
		osDelayUntil(10);
 80017b4:	200a      	movs	r0, #10
 80017b6:	f008 fc34 	bl	800a022 <osDelayUntil>
		writeByte(0x03, 0x80);
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	2003      	movs	r0, #3
 80017be:	f7ff ffcf 	bl	8001760 <writeByte>
		osDelayUntil(10);
 80017c2:	200a      	movs	r0, #10
 80017c4:	f008 fc2d 	bl	800a022 <osDelayUntil>
		writeByte(0x07, 0x07);
 80017c8:	2107      	movs	r1, #7
 80017ca:	2007      	movs	r0, #7
 80017cc:	f7ff ffc8 	bl	8001760 <writeByte>
		osDelayUntil(10);
 80017d0:	200a      	movs	r0, #10
 80017d2:	f008 fc26 	bl	800a022 <osDelayUntil>
		writeByte(0x06, 0x01);
 80017d6:	2101      	movs	r1, #1
 80017d8:	2006      	movs	r0, #6
 80017da:	f7ff ffc1 	bl	8001760 <writeByte>
		osDelayUntil(10);
 80017de:	200a      	movs	r0, #10
 80017e0:	f008 fc1f 	bl	800a022 <osDelayUntil>
		writeByte(0x7F, 0x20);
 80017e4:	2120      	movs	r1, #32
 80017e6:	207f      	movs	r0, #127	; 0x7f
 80017e8:	f7ff ffba 	bl	8001760 <writeByte>
		osDelayUntil(10);
 80017ec:	200a      	movs	r0, #10
 80017ee:	f008 fc18 	bl	800a022 <osDelayUntil>
		writeByte(0x01, 0x2F);
 80017f2:	212f      	movs	r1, #47	; 0x2f
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff ffb3 	bl	8001760 <writeByte>
		osDelayUntil(10);
 80017fa:	200a      	movs	r0, #10
 80017fc:	f008 fc11 	bl	800a022 <osDelayUntil>
		writeByte(0x0, 0x00);
 8001800:	2100      	movs	r1, #0
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff ffac 	bl	8001760 <writeByte>
		osDelayUntil(10);
 8001808:	200a      	movs	r0, #10
 800180a:	f008 fc0a 	bl	800a022 <osDelayUntil>
		writeByte(0x7F, 0x00);
 800180e:	2100      	movs	r1, #0
 8001810:	207f      	movs	r0, #127	; 0x7f
 8001812:	f7ff ffa5 	bl	8001760 <writeByte>
		osDelayUntil(10);
 8001816:	200a      	movs	r0, #10
 8001818:	f008 fc03 	bl	800a022 <osDelayUntil>
		writeByte(0x07, 0x00);
 800181c:	2100      	movs	r1, #0
 800181e:	2007      	movs	r0, #7
 8001820:	f7ff ff9e 	bl	8001760 <writeByte>
		osDelayUntil(10);
 8001824:	200a      	movs	r0, #10
 8001826:	f008 fbfc 	bl	800a022 <osDelayUntil>

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <motorRight>:
				total_distanceb = 0;
				htim1.Instance -> CCR4 = 150;
}


void motorRight(int target_angle){
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]


		htim1.Instance -> CCR4 = 260;
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <motorRight+0x94>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
		//gyroStart();


		osDelay(500);
 8001842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001846:	f008 fbd1 	bl	8009fec <osDelay>
		//gyroStart();

		turnDir = -1;
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <motorRight+0x98>)
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	601a      	str	r2, [r3, #0]
		total_angle =  0;
 8001852:	491e      	ldr	r1, [pc, #120]	; (80018cc <motorRight+0x9c>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9c1 2300 	strd	r2, r3, [r1]
		motorOnA = turnSPEED;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <motorRight+0xa0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <motorRight+0xa4>)
 8001866:	6013      	str	r3, [r2, #0]
		motorOnB = motorOnA;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <motorRight+0xa4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <motorRight+0xa8>)
 800186e:	6013      	str	r3, [r2, #0]
		while(total_angle > -1*target_angle){
 8001870:	e002      	b.n	8001878 <motorRight+0x48>
			osDelayUntil(10);
 8001872:	200a      	movs	r0, #10
 8001874:	f008 fbd5 	bl	800a022 <osDelayUntil>
		while(total_angle > -1*target_angle){
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	425b      	negs	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe49 	bl	8000514 <__aeabi_i2d>
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <motorRight+0x9c>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7ff f920 	bl	8000acc <__aeabi_dcmplt>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1ef      	bne.n	8001872 <motorRight+0x42>
		}

		motorStop();
 8001892:	f7ff fda5 	bl	80013e0 <motorStop>

		double Aint = 0;
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9c7 2302 	strd	r2, r3, [r7, #8]

			osDelayUntil(10);
		}
		motorStop();
		*/
		total_distancea = 0;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <motorRight+0xac>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
		total_distanceb = 0;
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <motorRight+0xb0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

		htim1.Instance -> CCR4 = 146.5;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <motorRight+0x94>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2292      	movs	r2, #146	; 0x92
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(100);
 80018b6:	2064      	movs	r0, #100	; 0x64
 80018b8:	f008 fb98 	bl	8009fec <osDelay>

}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200001a0 	.word	0x200001a0
 80018c8:	20002828 	.word	0x20002828
 80018cc:	20002818 	.word	0x20002818
 80018d0:	2000000c 	.word	0x2000000c
 80018d4:	2000079c 	.word	0x2000079c
 80018d8:	200007a0 	.word	0x200007a0
 80018dc:	2000280c 	.word	0x2000280c
 80018e0:	20002810 	.word	0x20002810

080018e4 <motorLeft>:

void motorLeft(int target_angle){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

		htim1.Instance -> CCR4 =  100;
 80018ec:	4b20      	ldr	r3, [pc, #128]	; (8001970 <motorLeft+0x8c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2264      	movs	r2, #100	; 0x64
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
		//gyroStart();

		osDelay(500);
 80018f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f8:	f008 fb78 	bl	8009fec <osDelay>
		//gyroStart();

        turnDir = 1;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <motorLeft+0x90>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
		total_angle = 0;
 8001902:	491d      	ldr	r1, [pc, #116]	; (8001978 <motorLeft+0x94>)
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9c1 2300 	strd	r2, r3, [r1]

		motorOnB = turnSPEED;
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <motorLeft+0x98>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <motorLeft+0x9c>)
 8001916:	6013      	str	r3, [r2, #0]
		motorOnA = motorOnB;
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <motorLeft+0x9c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a19      	ldr	r2, [pc, #100]	; (8001984 <motorLeft+0xa0>)
 800191e:	6013      	str	r3, [r2, #0]
		double Aint = 0;
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9c7 2302 	strd	r2, r3, [r7, #8]

		while(total_angle < target_angle){
 800192c:	e002      	b.n	8001934 <motorLeft+0x50>
			osDelayUntil(10);
 800192e:	200a      	movs	r0, #10
 8001930:	f008 fb77 	bl	800a022 <osDelayUntil>
		while(total_angle < target_angle){
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7fe fded 	bl	8000514 <__aeabi_i2d>
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <motorLeft+0x94>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7ff f8e2 	bl	8000b08 <__aeabi_dcmpgt>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f1      	bne.n	800192e <motorLeft+0x4a>
		}

		motorStop();
 800194a:	f7ff fd49 	bl	80013e0 <motorStop>
				}

				motorStop();
				*/

		total_distancea = 0;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <motorLeft+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
		total_distanceb = 0;
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <motorLeft+0xa8>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

		htim1.Instance -> CCR4 =  146.5;
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <motorLeft+0x8c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2292      	movs	r2, #146	; 0x92
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(100);
 8001962:	2064      	movs	r0, #100	; 0x64
 8001964:	f008 fb42 	bl	8009fec <osDelay>

}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200001a0 	.word	0x200001a0
 8001974:	20002828 	.word	0x20002828
 8001978:	20002818 	.word	0x20002818
 800197c:	2000000c 	.word	0x2000000c
 8001980:	200007a0 	.word	0x200007a0
 8001984:	2000079c 	.word	0x2000079c
 8001988:	2000280c 	.word	0x2000280c
 800198c:	20002810 	.word	0x20002810

08001990 <motorBack>:

}



void motorBack(int target_distance){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

		htim1.Instance -> CCR4 = 147;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <motorBack+0x28>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2293      	movs	r2, #147	; 0x93
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
		osDelayUntil(200);
 80019a0:	20c8      	movs	r0, #200	; 0xc8
 80019a2:	f008 fb3e 	bl	800a022 <osDelayUntil>
		motorForward(target_distance, -1);
 80019a6:	f04f 31ff 	mov.w	r1, #4294967295
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fd2c 	bl	8001408 <motorForward>

}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200001a0 	.word	0x200001a0

080019bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c0:	f002 fc12 	bl	80041e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f88c 	bl	8001ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f000 fc14 	bl	80021f4 <MX_GPIO_Init>
  MX_TIM8_Init();
 80019cc:	f000 fb1c 	bl	8002008 <MX_TIM8_Init>
  MX_TIM2_Init();
 80019d0:	f000 fa02 	bl	8001dd8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80019d4:	f000 f962 	bl	8001c9c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80019d8:	f000 fbc2 	bl	8002160 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80019dc:	f000 fa50 	bl	8001e80 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019e0:	f000 faa2 	bl	8001f28 <MX_TIM4_Init>
  MX_I2C1_Init();
 80019e4:	f000 f92c 	bl	8001c40 <MX_I2C1_Init>
  MX_DMA_Init();
 80019e8:	f000 fbe4 	bl	80021b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80019ec:	f000 f8d6 	bl	8001b9c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 80019f0:	2100      	movs	r1, #0
 80019f2:	4825      	ldr	r0, [pc, #148]	; (8001a88 <main+0xcc>)
 80019f4:	f005 ff62 	bl	80078bc <HAL_TIM_IC_Start>


  OLED_Init();
 80019f8:	f7ff fc66 	bl	80012c8 <OLED_Init>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80019fc:	213c      	movs	r1, #60	; 0x3c
 80019fe:	4823      	ldr	r0, [pc, #140]	; (8001a8c <main+0xd0>)
 8001a00:	f006 f8de 	bl	8007bc0 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a04:	213c      	movs	r1, #60	; 0x3c
 8001a06:	4822      	ldr	r0, [pc, #136]	; (8001a90 <main+0xd4>)
 8001a08:	f006 f8da 	bl	8007bc0 <HAL_TIM_Encoder_Start>

  			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4821      	ldr	r0, [pc, #132]	; (8001a94 <main+0xd8>)
 8001a10:	f005 fe32 	bl	8007678 <HAL_TIM_PWM_Start>

  			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001a14:	2104      	movs	r1, #4
 8001a16:	481f      	ldr	r0, [pc, #124]	; (8001a94 <main+0xd8>)
 8001a18:	f005 fe2e 	bl	8007678 <HAL_TIM_PWM_Start>

  			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a1c:	210c      	movs	r1, #12
 8001a1e:	481e      	ldr	r0, [pc, #120]	; (8001a98 <main+0xdc>)
 8001a20:	f005 fe2a 	bl	8007678 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 4);
 8001a24:	2204      	movs	r2, #4
 8001a26:	491d      	ldr	r1, [pc, #116]	; (8001a9c <main+0xe0>)
 8001a28:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <main+0xe4>)
 8001a2a:	f007 fa95 	bl	8008f58 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a2e:	f008 fa01 	bl	8009e34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <main+0xe8>)
 8001a34:	2100      	movs	r1, #0
 8001a36:	481c      	ldr	r0, [pc, #112]	; (8001aa8 <main+0xec>)
 8001a38:	f008 fa46 	bl	8009ec8 <osThreadNew>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <main+0xf0>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <main+0xf4>)
 8001a44:	2100      	movs	r1, #0
 8001a46:	481b      	ldr	r0, [pc, #108]	; (8001ab4 <main+0xf8>)
 8001a48:	f008 fa3e 	bl	8009ec8 <osThreadNew>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <main+0xfc>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motorTask, NULL, &MotorTask_attributes);
 8001a52:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <main+0x100>)
 8001a54:	2100      	movs	r1, #0
 8001a56:	481a      	ldr	r0, [pc, #104]	; (8001ac0 <main+0x104>)
 8001a58:	f008 fa36 	bl	8009ec8 <osThreadNew>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <main+0x108>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(gyroTask, NULL, &GyroTask_attributes);
 8001a62:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <main+0x10c>)
 8001a64:	2100      	movs	r1, #0
 8001a66:	4819      	ldr	r0, [pc, #100]	; (8001acc <main+0x110>)
 8001a68:	f008 fa2e 	bl	8009ec8 <osThreadNew>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <main+0x114>)
 8001a70:	6013      	str	r3, [r2, #0]

  /* creation of UltrasoundTask */
  UltrasoundTaskHandle = osThreadNew(ultrasoundTask, NULL, &UltrasoundTask_attributes);
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <main+0x118>)
 8001a74:	2100      	movs	r1, #0
 8001a76:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <main+0x11c>)
 8001a78:	f008 fa26 	bl	8009ec8 <osThreadNew>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <main+0x120>)
 8001a80:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a82:	f008 f9fb 	bl	8009e7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <main+0xca>
 8001a88:	20000278 	.word	0x20000278
 8001a8c:	200001e8 	.word	0x200001e8
 8001a90:	20000230 	.word	0x20000230
 8001a94:	200002c0 	.word	0x200002c0
 8001a98:	200001a0 	.word	0x200001a0
 8001a9c:	20000760 	.word	0x20000760
 8001aa0:	20000308 	.word	0x20000308
 8001aa4:	0800d870 	.word	0x0800d870
 8001aa8:	08002581 	.word	0x08002581
 8001aac:	2000034c 	.word	0x2000034c
 8001ab0:	0800d894 	.word	0x0800d894
 8001ab4:	080026e1 	.word	0x080026e1
 8001ab8:	20000350 	.word	0x20000350
 8001abc:	0800d8b8 	.word	0x0800d8b8
 8001ac0:	080026ed 	.word	0x080026ed
 8001ac4:	20000354 	.word	0x20000354
 8001ac8:	0800d8dc 	.word	0x0800d8dc
 8001acc:	08002891 	.word	0x08002891
 8001ad0:	20000358 	.word	0x20000358
 8001ad4:	0800d900 	.word	0x0800d900
 8001ad8:	08002a41 	.word	0x08002a41
 8001adc:	2000035c 	.word	0x2000035c

08001ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b094      	sub	sp, #80	; 0x50
 8001ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	2230      	movs	r2, #48	; 0x30
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00a ffd4 	bl	800ca9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <SystemClock_Config+0xb4>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <SystemClock_Config+0xb4>)
 8001b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <SystemClock_Config+0xb4>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <SystemClock_Config+0xb8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <SystemClock_Config+0xb8>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <SystemClock_Config+0xb8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b44:	2310      	movs	r3, #16
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4c:	f107 0320 	add.w	r3, r7, #32
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 ffad 	bl	8006ab0 <HAL_RCC_OscConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001b5c:	f001 ff30 	bl	80039c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
 8001b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 fa0f 	bl	8006fa0 <HAL_RCC_ClockConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001b88:	f001 ff1a 	bl	80039c0 <Error_Handler>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3750      	adds	r7, #80	; 0x50
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000

08001b9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bb0:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <MX_ADC1_Init+0x9c>)
 8001bb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bdc:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <MX_ADC1_Init+0xa0>)
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bfa:	480e      	ldr	r0, [pc, #56]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001bfc:	f002 fb5a 	bl	80042b4 <HAL_ADC_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001c06:	f001 fedb 	bl	80039c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c16:	463b      	mov	r3, r7
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <MX_ADC1_Init+0x98>)
 8001c1c:	f002 fe50 	bl	80048c0 <HAL_ADC_ConfigChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c26:	f001 fecb 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200000a4 	.word	0x200000a4
 8001c38:	40012000 	.word	0x40012000
 8001c3c:	0f000001 	.word	0x0f000001

08001c40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <MX_I2C1_Init+0x54>)
 8001c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c4c:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <MX_I2C1_Init+0x58>)
 8001c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_I2C1_Init+0x50>)
 8001c7e:	f003 ff59 	bl	8005b34 <HAL_I2C_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c88:	f001 fe9a 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000014c 	.word	0x2000014c
 8001c94:	40005400 	.word	0x40005400
 8001c98:	000186a0 	.word	0x000186a0

08001c9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b096      	sub	sp, #88	; 0x58
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
 8001cca:	615a      	str	r2, [r3, #20]
 8001ccc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00a fee1 	bl	800ca9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001cdc:	4a3d      	ldr	r2, [pc, #244]	; (8001dd4 <MX_TIM1_Init+0x138>)
 8001cde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001ce2:	22a0      	movs	r2, #160	; 0xa0
 8001ce4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cfa:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d06:	4832      	ldr	r0, [pc, #200]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001d08:	f005 fb9c 	bl	8007444 <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d12:	f001 fe55 	bl	80039c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d20:	4619      	mov	r1, r3
 8001d22:	482b      	ldr	r0, [pc, #172]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001d24:	f006 fa40 	bl	80081a8 <HAL_TIM_ConfigClockSource>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d2e:	f001 fe47 	bl	80039c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d32:	4827      	ldr	r0, [pc, #156]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001d34:	f005 fc46 	bl	80075c4 <HAL_TIM_PWM_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d3e:	f001 fe3f 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4e:	4619      	mov	r1, r3
 8001d50:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001d52:	f006 ff8d 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d5c:	f001 fe30 	bl	80039c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d60:	2360      	movs	r3, #96	; 0x60
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4813      	ldr	r0, [pc, #76]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001d82:	f006 f94f 	bl	8008024 <HAL_TIM_PWM_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001d8c:	f001 fe18 	bl	80039c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001db4:	f006 ffd8 	bl	8008d68 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001dbe:	f001 fdff 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM1_Init+0x134>)
 8001dc4:	f002 f828 	bl	8003e18 <HAL_TIM_MspPostInit>

}
 8001dc8:	bf00      	nop
 8001dca:	3758      	adds	r7, #88	; 0x58
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200001a0 	.word	0x200001a0
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	2224      	movs	r2, #36	; 0x24
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00a fe58 	bl	800ca9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <MX_TIM2_Init+0xa4>)
 8001df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <MX_TIM2_Init+0xa4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <MX_TIM2_Init+0xa4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <MX_TIM2_Init+0xa4>)
 8001e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MX_TIM2_Init+0xa4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <MX_TIM2_Init+0xa4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e24:	2301      	movs	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	4619      	mov	r1, r3
 8001e46:	480d      	ldr	r0, [pc, #52]	; (8001e7c <MX_TIM2_Init+0xa4>)
 8001e48:	f005 fe14 	bl	8007a74 <HAL_TIM_Encoder_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e52:	f001 fdb5 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4806      	ldr	r0, [pc, #24]	; (8001e7c <MX_TIM2_Init+0xa4>)
 8001e64:	f006 ff04 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e6e:	f001 fda7 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	3730      	adds	r7, #48	; 0x30
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200001e8 	.word	0x200001e8

08001e80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	2224      	movs	r2, #36	; 0x24
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00a fe04 	bl	800ca9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <MX_TIM3_Init+0xa0>)
 8001e9e:	4a21      	ldr	r2, [pc, #132]	; (8001f24 <MX_TIM3_Init+0xa4>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <MX_TIM3_Init+0xa0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <MX_TIM3_Init+0xa0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <MX_TIM3_Init+0xa0>)
 8001eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <MX_TIM3_Init+0xa0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <MX_TIM3_Init+0xa0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eda:	2301      	movs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_TIM3_Init+0xa0>)
 8001eee:	f005 fdc1 	bl	8007a74 <HAL_TIM_Encoder_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ef8:	f001 fd62 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	4619      	mov	r1, r3
 8001f08:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_TIM3_Init+0xa0>)
 8001f0a:	f006 feb1 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f14:	f001 fd54 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f18:	bf00      	nop
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000230 	.word	0x20000230
 8001f24:	40000400 	.word	0x40000400

08001f28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f46:	463b      	mov	r3, r7
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001f54:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <MX_TIM4_Init+0xdc>)
 8001f56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001f66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f78:	4821      	ldr	r0, [pc, #132]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001f7a:	f005 fa63 	bl	8007444 <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001f84:	f001 fd1c 	bl	80039c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f8e:	f107 0318 	add.w	r3, r7, #24
 8001f92:	4619      	mov	r1, r3
 8001f94:	481a      	ldr	r0, [pc, #104]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001f96:	f006 f907 	bl	80081a8 <HAL_TIM_ConfigClockSource>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001fa0:	f001 fd0e 	bl	80039c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001fa4:	4816      	ldr	r0, [pc, #88]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001fa6:	f005 fc2f 	bl	8007808 <HAL_TIM_IC_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001fb0:	f001 fd06 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480f      	ldr	r0, [pc, #60]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001fc4:	f006 fe54 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001fce:	f001 fcf7 	bl	80039c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_TIM4_Init+0xd8>)
 8001fea:	f005 ff7f 	bl	8007eec <HAL_TIM_IC_ConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001ff4:	f001 fce4 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000278 	.word	0x20000278
 8002004:	40000800 	.word	0x40000800

08002008 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b096      	sub	sp, #88	; 0x58
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	611a      	str	r2, [r3, #16]
 8002036:	615a      	str	r2, [r3, #20]
 8002038:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2220      	movs	r2, #32
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f00a fd2b 	bl	800ca9c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002046:	4b44      	ldr	r3, [pc, #272]	; (8002158 <MX_TIM8_Init+0x150>)
 8002048:	4a44      	ldr	r2, [pc, #272]	; (800215c <MX_TIM8_Init+0x154>)
 800204a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <MX_TIM8_Init+0x150>)
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <MX_TIM8_Init+0x150>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002058:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <MX_TIM8_Init+0x150>)
 800205a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800205e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002060:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <MX_TIM8_Init+0x150>)
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002066:	4b3c      	ldr	r3, [pc, #240]	; (8002158 <MX_TIM8_Init+0x150>)
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206c:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <MX_TIM8_Init+0x150>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002072:	4839      	ldr	r0, [pc, #228]	; (8002158 <MX_TIM8_Init+0x150>)
 8002074:	f005 f9e6 	bl	8007444 <HAL_TIM_Base_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800207e:	f001 fc9f 	bl	80039c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002086:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002088:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800208c:	4619      	mov	r1, r3
 800208e:	4832      	ldr	r0, [pc, #200]	; (8002158 <MX_TIM8_Init+0x150>)
 8002090:	f006 f88a 	bl	80081a8 <HAL_TIM_ConfigClockSource>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800209a:	f001 fc91 	bl	80039c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800209e:	482e      	ldr	r0, [pc, #184]	; (8002158 <MX_TIM8_Init+0x150>)
 80020a0:	f005 fa90 	bl	80075c4 <HAL_TIM_PWM_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80020aa:	f001 fc89 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ba:	4619      	mov	r1, r3
 80020bc:	4826      	ldr	r0, [pc, #152]	; (8002158 <MX_TIM8_Init+0x150>)
 80020be:	f006 fdd7 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80020c8:	f001 fc7a 	bl	80039c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020cc:	2360      	movs	r3, #96	; 0x60
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020d8:	2300      	movs	r3, #0
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	2200      	movs	r2, #0
 80020ee:	4619      	mov	r1, r3
 80020f0:	4819      	ldr	r0, [pc, #100]	; (8002158 <MX_TIM8_Init+0x150>)
 80020f2:	f005 ff97 	bl	8008024 <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80020fc:	f001 fc60 	bl	80039c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	2204      	movs	r2, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4813      	ldr	r0, [pc, #76]	; (8002158 <MX_TIM8_Init+0x150>)
 800210a:	f005 ff8b 	bl	8008024 <HAL_TIM_PWM_ConfigChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002114:	f001 fc54 	bl	80039c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800212c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002130:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4807      	ldr	r0, [pc, #28]	; (8002158 <MX_TIM8_Init+0x150>)
 800213c:	f006 fe14 	bl	8008d68 <HAL_TIMEx_ConfigBreakDeadTime>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002146:	f001 fc3b 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800214a:	4803      	ldr	r0, [pc, #12]	; (8002158 <MX_TIM8_Init+0x150>)
 800214c:	f001 fe64 	bl	8003e18 <HAL_TIM_MspPostInit>

}
 8002150:	bf00      	nop
 8002152:	3758      	adds	r7, #88	; 0x58
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200002c0 	.word	0x200002c0
 800215c:	40010400 	.word	0x40010400

08002160 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_USART3_UART_Init+0x4c>)
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <MX_USART3_UART_Init+0x50>)
 8002168:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <MX_USART3_UART_Init+0x4c>)
 800216c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002170:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_USART3_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_USART3_UART_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <MX_USART3_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_USART3_UART_Init+0x4c>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <MX_USART3_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_USART3_UART_Init+0x4c>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_USART3_UART_Init+0x4c>)
 8002198:	f006 fe4c 	bl	8008e34 <HAL_UART_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021a2:	f001 fc0d 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000308 	.word	0x20000308
 80021b0:	40004800 	.word	0x40004800

080021b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_DMA_Init+0x3c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <MX_DMA_Init+0x3c>)
 80021c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_DMA_Init+0x3c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2105      	movs	r1, #5
 80021da:	2038      	movs	r0, #56	; 0x38
 80021dc:	f002 fec8 	bl	8004f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021e0:	2038      	movs	r0, #56	; 0x38
 80021e2:	f002 fee1 	bl	8004fa8 <HAL_NVIC_EnableIRQ>

}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	4b54      	ldr	r3, [pc, #336]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a53      	ldr	r2, [pc, #332]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b51      	ldr	r3, [pc, #324]	; (8002360 <MX_GPIO_Init+0x16c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <MX_GPIO_Init+0x16c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	4b46      	ldr	r3, [pc, #280]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a45      	ldr	r2, [pc, #276]	; (8002360 <MX_GPIO_Init+0x16c>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b43      	ldr	r3, [pc, #268]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	4b38      	ldr	r3, [pc, #224]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a37      	ldr	r2, [pc, #220]	; (8002360 <MX_GPIO_Init+0x16c>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b35      	ldr	r3, [pc, #212]	; (8002360 <MX_GPIO_Init+0x16c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	4b31      	ldr	r3, [pc, #196]	; (8002360 <MX_GPIO_Init+0x16c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a30      	ldr	r2, [pc, #192]	; (8002360 <MX_GPIO_Init+0x16c>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <MX_GPIO_Init+0x16c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80022b2:	2200      	movs	r2, #0
 80022b4:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 80022b8:	482a      	ldr	r0, [pc, #168]	; (8002364 <MX_GPIO_Init+0x170>)
 80022ba:	f003 fc21 	bl	8005b00 <HAL_GPIO_WritePin>
                          |LED3_Pin|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80022c4:	4828      	ldr	r0, [pc, #160]	; (8002368 <MX_GPIO_Init+0x174>)
 80022c6:	f003 fc1b 	bl	8005b00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80022ca:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80022ce:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	4820      	ldr	r0, [pc, #128]	; (8002364 <MX_GPIO_Init+0x170>)
 80022e4:	f003 fa70 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin
                           PA8 */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin
 80022e8:	f44f 739e 	mov.w	r3, #316	; 0x13c
 80022ec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f6:	2302      	movs	r3, #2
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	4619      	mov	r1, r3
 8002300:	4819      	ldr	r0, [pc, #100]	; (8002368 <MX_GPIO_Init+0x174>)
 8002302:	f003 fa61 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800230a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230c:	2301      	movs	r3, #1
 800230e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	4619      	mov	r1, r3
 800231e:	4811      	ldr	r0, [pc, #68]	; (8002364 <MX_GPIO_Init+0x170>)
 8002320:	f003 fa52 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRsensor_Pin */
  GPIO_InitStruct.Pin = IRsensor_Pin;
 8002324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRsensor_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	4619      	mov	r1, r3
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <MX_GPIO_Init+0x178>)
 800233a:	f003 fa45 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 800233e:	2320      	movs	r3, #32
 8002340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 031c 	add.w	r3, r7, #28
 800234e:	4619      	mov	r1, r3
 8002350:	4807      	ldr	r0, [pc, #28]	; (8002370 <MX_GPIO_Init+0x17c>)
 8002352:	f003 fa39 	bl	80057c8 <HAL_GPIO_Init>

}
 8002356:	bf00      	nop
 8002358:	3730      	adds	r7, #48	; 0x30
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40021000 	.word	0x40021000
 8002368:	40020000 	.word	0x40020000
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40020400 	.word	0x40020400
 8002374:	00000000 	.word	0x00000000

08002378 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOE

// Callback Function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7f1b      	ldrb	r3, [r3, #28]
 8002384:	2b01      	cmp	r3, #1
 8002386:	f040 8083 	bne.w	8002490 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800238a:	4b45      	ldr	r3, [pc, #276]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11a      	bne.n	80023c8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8002392:	2100      	movs	r1, #0
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f005 ffcf 	bl	8008338 <HAL_TIM_ReadCapturedValue>
 800239a:	4603      	mov	r3, r0
 800239c:	4a41      	ldr	r2, [pc, #260]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800239e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80023a0:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a1a      	ldr	r2, [r3, #32]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 020a 	bic.w	r2, r2, #10
 80023b4:	621a      	str	r2, [r3, #32]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0202 	orr.w	r2, r2, #2
 80023c4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 80023c6:	e063      	b.n	8002490 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 80023c8:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d15f      	bne.n	8002490 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80023d0:	2100      	movs	r1, #0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f005 ffb0 	bl	8008338 <HAL_TIM_ReadCapturedValue>
 80023d8:	4603      	mov	r3, r0
 80023da:	4a33      	ldr	r2, [pc, #204]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023dc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80023e6:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d907      	bls.n	8002402 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	4a2b      	ldr	r2, [pc, #172]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x134>)
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e00f      	b.n	8002422 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d909      	bls.n	8002422 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800241c:	33ff      	adds	r3, #255	; 0xff
 800241e:	4a23      	ldr	r2, [pc, #140]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x134>)
 8002420:	6013      	str	r3, [r2, #0]
			us_dist = Difference * .034/2;
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x134>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe f864 	bl	80004f4 <__aeabi_ui2d>
 800242c:	a31a      	add	r3, pc, #104	; (adr r3, 8002498 <HAL_TIM_IC_CaptureCallback+0x120>)
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	f7fe f8d9 	bl	80005e8 <__aeabi_dmul>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002446:	f7fe f9f9 	bl	800083c <__aeabi_ddiv>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fba1 	bl	8000b98 <__aeabi_d2uiz>
 8002456:	4603      	mov	r3, r0
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800245c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6a1a      	ldr	r2, [r3, #32]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 020a 	bic.w	r2, r2, #10
 8002472:	621a      	str	r2, [r3, #32]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6a12      	ldr	r2, [r2, #32]
 800247e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0202 	bic.w	r2, r2, #2
 800248e:	60da      	str	r2, [r3, #12]
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	b020c49c 	.word	0xb020c49c
 800249c:	3fa16872 	.word	0x3fa16872
 80024a0:	20002848 	.word	0x20002848
 80024a4:	2000283c 	.word	0x2000283c
 80024a8:	20002840 	.word	0x20002840
 80024ac:	20002844 	.word	0x20002844
 80024b0:	20002834 	.word	0x20002834
 80024b4:	20000278 	.word	0x20000278

080024b8 <HCSR04_Read>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
}

void HCSR04_Read(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80024bc:	2201      	movs	r2, #1
 80024be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024c2:	480b      	ldr	r0, [pc, #44]	; (80024f0 <HCSR04_Read+0x38>)
 80024c4:	f003 fb1c 	bl	8005b00 <HAL_GPIO_WritePin>
	osDelay(1);  // wait for 10 us
 80024c8:	2001      	movs	r0, #1
 80024ca:	f007 fd8f 	bl	8009fec <osDelay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80024ce:	2200      	movs	r2, #0
 80024d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024d4:	4806      	ldr	r0, [pc, #24]	; (80024f0 <HCSR04_Read+0x38>)
 80024d6:	f003 fb13 	bl	8005b00 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1); // Enable Interrupt
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HCSR04_Read+0x3c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <HCSR04_Read+0x3c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0202 	orr.w	r2, r2, #2
 80024e8:	60da      	str	r2, [r3, #12]
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	20000278 	.word	0x20000278

080024f8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	UNUSED(huart);


	//HAL_UART_Transmit(&huart3, (uint8_t *) &aRxBuffer[0], 4, 0xFFFF);

	if(flag == 0){
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <HAL_UART_RxCpltCallback+0x5c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d11b      	bne.n	8002540 <HAL_UART_RxCpltCallback+0x48>
		direction = (char) aRxBuffer[0];
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_UART_RxCpltCallback+0x60>)
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_UART_RxCpltCallback+0x64>)
 800250e:	701a      	strb	r2, [r3, #0]
		magnitude = (int)(aRxBuffer[1] - '0')*100 + (int)((char)aRxBuffer[2] - '0')*10 + (int)(aRxBuffer[3] - '0');
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_UART_RxCpltCallback+0x60>)
 8002512:	785b      	ldrb	r3, [r3, #1]
 8002514:	3b30      	subs	r3, #48	; 0x30
 8002516:	2264      	movs	r2, #100	; 0x64
 8002518:	fb02 f103 	mul.w	r1, r2, r3
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_UART_RxCpltCallback+0x60>)
 800251e:	789b      	ldrb	r3, [r3, #2]
 8002520:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	18ca      	adds	r2, r1, r3
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_UART_RxCpltCallback+0x60>)
 8002530:	78db      	ldrb	r3, [r3, #3]
 8002532:	3b30      	subs	r3, #48	; 0x30
 8002534:	4413      	add	r3, r2
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_UART_RxCpltCallback+0x68>)
 8002538:	6013      	str	r3, [r2, #0]
		flag = 1;
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_UART_RxCpltCallback+0x5c>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 4);
 8002540:	2204      	movs	r2, #4
 8002542:	4905      	ldr	r1, [pc, #20]	; (8002558 <HAL_UART_RxCpltCallback+0x60>)
 8002544:	4807      	ldr	r0, [pc, #28]	; (8002564 <HAL_UART_RxCpltCallback+0x6c>)
 8002546:	f006 fd07 	bl	8008f58 <HAL_UART_Receive_IT>

}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200007a4 	.word	0x200007a4
 8002558:	20000760 	.word	0x20000760
 800255c:	20002835 	.word	0x20002835
 8002560:	20002838 	.word	0x20002838
 8002564:	20000308 	.word	0x20000308

08002568 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
//		lengthSide = lengthSide/4096.0;
//	}



}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	0000      	movs	r0, r0
	...

08002580 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

	htim1.Instance -> CCR4 = 146.5;
 8002588:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <StartDefaultTask+0x120>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2292      	movs	r2, #146	; 0x92
 800258e:	641a      	str	r2, [r3, #64]	; 0x40

  for(;;)
  {


	  HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, 4);
 8002590:	2204      	movs	r2, #4
 8002592:	4944      	ldr	r1, [pc, #272]	; (80026a4 <StartDefaultTask+0x124>)
 8002594:	4844      	ldr	r0, [pc, #272]	; (80026a8 <StartDefaultTask+0x128>)
 8002596:	f006 fcdf 	bl	8008f58 <HAL_UART_Receive_IT>
	  sprintf(receiveBuffer, "%s\0", aRxBuffer);
 800259a:	4a42      	ldr	r2, [pc, #264]	; (80026a4 <StartDefaultTask+0x124>)
 800259c:	4943      	ldr	r1, [pc, #268]	; (80026ac <StartDefaultTask+0x12c>)
 800259e:	4844      	ldr	r0, [pc, #272]	; (80026b0 <StartDefaultTask+0x130>)
 80025a0:	f00a fa84 	bl	800caac <siprintf>
	  OLED_ShowString(10,10,receiveBuffer);
 80025a4:	4a42      	ldr	r2, [pc, #264]	; (80026b0 <StartDefaultTask+0x130>)
 80025a6:	210a      	movs	r1, #10
 80025a8:	200a      	movs	r0, #10
 80025aa:	f7fe fe5b 	bl	8001264 <OLED_ShowString>
	  HCSR04_Read();
 80025ae:	f7ff ff83 	bl	80024b8 <HCSR04_Read>

	  HAL_ADC_Start(&hadc1);
 80025b2:	4840      	ldr	r0, [pc, #256]	; (80026b4 <StartDefaultTask+0x134>)
 80025b4:	f001 fec2 	bl	800433c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80025b8:	210a      	movs	r1, #10
 80025ba:	483e      	ldr	r0, [pc, #248]	; (80026b4 <StartDefaultTask+0x134>)
 80025bc:	f001 ffc3 	bl	8004546 <HAL_ADC_PollForConversion>
	  ir1 = HAL_ADC_GetValue(&hadc1);
 80025c0:	483c      	ldr	r0, [pc, #240]	; (80026b4 <StartDefaultTask+0x134>)
 80025c2:	f002 f95b 	bl	800487c <HAL_ADC_GetValue>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4a3b      	ldr	r2, [pc, #236]	; (80026b8 <StartDefaultTask+0x138>)
 80025ca:	6013      	str	r3, [r2, #0]
	  ir1_dist = roundf(-14.16*log(ir1)+122.67);
 80025cc:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <StartDefaultTask+0x138>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ff8f 	bl	80004f4 <__aeabi_ui2d>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	ec43 2b10 	vmov	d0, r2, r3
 80025de:	f00a feeb 	bl	800d3b8 <log>
 80025e2:	ec51 0b10 	vmov	r0, r1, d0
 80025e6:	a32a      	add	r3, pc, #168	; (adr r3, 8002690 <StartDefaultTask+0x110>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fd fffc 	bl	80005e8 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	a327      	add	r3, pc, #156	; (adr r3, 8002698 <StartDefaultTask+0x118>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fd fe3d 	bl	800027c <__adddf3>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe fae5 	bl	8000bd8 <__aeabi_d2f>
 800260e:	4603      	mov	r3, r0
 8002610:	ee00 3a10 	vmov	s0, r3
 8002614:	f00a feaa 	bl	800d36c <roundf>
 8002618:	eef0 7a40 	vmov.f32	s15, s0
 800261c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002620:	ee17 2a90 	vmov	r2, s15
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <StartDefaultTask+0x13c>)
 8002626:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8002628:	4822      	ldr	r0, [pc, #136]	; (80026b4 <StartDefaultTask+0x134>)
 800262a:	f001 ff59 	bl	80044e0 <HAL_ADC_Stop>

	  sprintf(hello,"IR Dist:%dcm",ir1_dist);
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <StartDefaultTask+0x13c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	4922      	ldr	r1, [pc, #136]	; (80026c0 <StartDefaultTask+0x140>)
 8002636:	4823      	ldr	r0, [pc, #140]	; (80026c4 <StartDefaultTask+0x144>)
 8002638:	f00a fa38 	bl	800caac <siprintf>
	  OLED_ShowString(10,20,hello);
 800263c:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <StartDefaultTask+0x144>)
 800263e:	2114      	movs	r1, #20
 8002640:	200a      	movs	r0, #10
 8002642:	f7fe fe0f 	bl	8001264 <OLED_ShowString>

	  sprintf(yay, "US Dist:%dcm",us_dist);
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <StartDefaultTask+0x148>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	491f      	ldr	r1, [pc, #124]	; (80026cc <StartDefaultTask+0x14c>)
 800264e:	4820      	ldr	r0, [pc, #128]	; (80026d0 <StartDefaultTask+0x150>)
 8002650:	f00a fa2c 	bl	800caac <siprintf>
	  OLED_ShowString(10,30,yay);
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <StartDefaultTask+0x150>)
 8002656:	211e      	movs	r1, #30
 8002658:	200a      	movs	r0, #10
 800265a:	f7fe fe03 	bl	8001264 <OLED_ShowString>

	  sprintf(bye, "angle %5d \0", (int)(total_angle));
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <StartDefaultTask+0x154>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fa6e 	bl	8000b48 <__aeabi_d2iz>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	4919      	ldr	r1, [pc, #100]	; (80026d8 <StartDefaultTask+0x158>)
 8002672:	481a      	ldr	r0, [pc, #104]	; (80026dc <StartDefaultTask+0x15c>)
 8002674:	f00a fa1a 	bl	800caac <siprintf>
	  OLED_ShowString(10,40, bye);
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <StartDefaultTask+0x15c>)
 800267a:	2128      	movs	r1, #40	; 0x28
 800267c:	200a      	movs	r0, #10
 800267e:	f7fe fdf1 	bl	8001264 <OLED_ShowString>

	  OLED_Refresh_Gram();
 8002682:	f7fe fc7b 	bl	8000f7c <OLED_Refresh_Gram>
	  osDelay(5);
 8002686:	2005      	movs	r0, #5
 8002688:	f007 fcb0 	bl	8009fec <osDelay>
  {
 800268c:	e780      	b.n	8002590 <StartDefaultTask+0x10>
 800268e:	bf00      	nop
 8002690:	851eb852 	.word	0x851eb852
 8002694:	c02c51eb 	.word	0xc02c51eb
 8002698:	47ae147b 	.word	0x47ae147b
 800269c:	405eaae1 	.word	0x405eaae1
 80026a0:	200001a0 	.word	0x200001a0
 80026a4:	20000760 	.word	0x20000760
 80026a8:	20000308 	.word	0x20000308
 80026ac:	0800d818 	.word	0x0800d818
 80026b0:	20000774 	.word	0x20000774
 80026b4:	200000a4 	.word	0x200000a4
 80026b8:	2000282c 	.word	0x2000282c
 80026bc:	20002830 	.word	0x20002830
 80026c0:	0800d81c 	.word	0x0800d81c
 80026c4:	200027a8 	.word	0x200027a8
 80026c8:	20002834 	.word	0x20002834
 80026cc:	0800d82c 	.word	0x0800d82c
 80026d0:	200027e4 	.word	0x200027e4
 80026d4:	20002818 	.word	0x20002818
 80026d8:	0800d83c 	.word	0x0800d83c
 80026dc:	200027d0 	.word	0x200027d0

080026e0 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	//motorLeft(90);

	while(1){
 80026e8:	e7fe      	b.n	80026e8 <encoder_task+0x8>
	...

080026ec <motorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motorTask */
void motorTask(void *argument)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b09a      	sub	sp, #104	; 0x68
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motorTask */



	int dirL;
	double prevErrorL = 0;
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double LInt = 0;
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	int dirR;
	double prevErrorR = 0;
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double RInt = 0;
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	int pwmA = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	65fb      	str	r3, [r7, #92]	; 0x5c
	int pwmB = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	65bb      	str	r3, [r7, #88]	; 0x58



			int cnt2, diff;
			int cnt2b, diffb;
			cnt2 = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
			cnt2b = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]


			uint32_t tick = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GetTick() - tick >= 10){
 8002738:	f001 fd8c 	bl	8004254 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b09      	cmp	r3, #9
 8002744:	f240 808e 	bls.w	8002864 <motorTask+0x178>
		  cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002748:	4b48      	ldr	r3, [pc, #288]	; (800286c <motorTask+0x180>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
		  cnt2b =  __HAL_TIM_GET_COUNTER(&htim3);
 8002750:	4b47      	ldr	r3, [pc, #284]	; (8002870 <motorTask+0x184>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	623b      	str	r3, [r7, #32]
	  		  	  		 if(cnt2 > 32000){
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800275e:	dd06      	ble.n	800276e <motorTask+0x82>
	  		  	  			 dirL = 1;
 8002760:	2301      	movs	r3, #1
 8002762:	667b      	str	r3, [r7, #100]	; 0x64

	  		  	  			  diff = (65536 - cnt2);
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800276a:	657b      	str	r3, [r7, #84]	; 0x54
 800276c:	e004      	b.n	8002778 <motorTask+0x8c>


	  		  	  			  } else {
	  		  	  				  dirL = -1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	667b      	str	r3, [r7, #100]	; 0x64




	  		  	  			  	 diff = cnt2;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	657b      	str	r3, [r7, #84]	; 0x54

	  		  	  		  }


	  		  			  if(cnt2b > 32000){
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800277e:	dd07      	ble.n	8002790 <motorTask+0xa4>
	  		  				  dirR = -1;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	663b      	str	r3, [r7, #96]	; 0x60


	  		  			  	  	diffb = (65536 - cnt2b);
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800278c:	653b      	str	r3, [r7, #80]	; 0x50
 800278e:	e003      	b.n	8002798 <motorTask+0xac>
	  		  			  } else {
	  		  				  dirR = 1;
 8002790:	2301      	movs	r3, #1
 8002792:	663b      	str	r3, [r7, #96]	; 0x60



	  		  			  	  	diffb = cnt2b;
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	653b      	str	r3, [r7, #80]	; 0x50
	  		  			  }

                          if(dirR == dir){
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <motorTask+0x188>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800279e:	429a      	cmp	r2, r3
 80027a0:	d106      	bne.n	80027b0 <motorTask+0xc4>
	  		  			  total_distanceb += diffb;
 80027a2:	4b35      	ldr	r3, [pc, #212]	; (8002878 <motorTask+0x18c>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a8:	4413      	add	r3, r2
 80027aa:	4a33      	ldr	r2, [pc, #204]	; (8002878 <motorTask+0x18c>)
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e005      	b.n	80027bc <motorTask+0xd0>
                          } else {
                        	  total_distanceb -= diffb;
 80027b0:	4b31      	ldr	r3, [pc, #196]	; (8002878 <motorTask+0x18c>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <motorTask+0x18c>)
 80027ba:	6013      	str	r3, [r2, #0]
                          }

                          if(dirL == dir){
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <motorTask+0x188>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d106      	bne.n	80027d4 <motorTask+0xe8>
	  		  			  total_distancea += diff;
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <motorTask+0x190>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027cc:	4413      	add	r3, r2
 80027ce:	4a2b      	ldr	r2, [pc, #172]	; (800287c <motorTask+0x190>)
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e005      	b.n	80027e0 <motorTask+0xf4>
                          } else {
                        	  total_distancea -= diff;
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <motorTask+0x190>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	4a27      	ldr	r2, [pc, #156]	; (800287c <motorTask+0x190>)
 80027de:	6013      	str	r3, [r2, #0]
                          }

	  		  			  //speedA = 60000*dirL*(diff/1320.0)/(double)(HAL_GetTick() - tick);
	  		  			  //speedB = 60000*dirR*(diffb/1320.0)/(double)(HAL_GetTick() - tick);
	  		  			  pwmA = motorOnA;
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <motorTask+0x194>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  			  pwmB = motorOnB;
 80027e6:	4b27      	ldr	r3, [pc, #156]	; (8002884 <motorTask+0x198>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	65bb      	str	r3, [r7, #88]	; 0x58

	  		  			  if(pwmA < 0) {
 80027ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	da05      	bge.n	80027fe <motorTask+0x112>
	  		  				  motorAReverse();
 80027f2:	f7fe ff59 	bl	80016a8 <motorAReverse>
	  		  				  pwmA = -1*pwmA;
 80027f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f8:	425b      	negs	r3, r3
 80027fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027fc:	e001      	b.n	8002802 <motorTask+0x116>
	  		  			  } else {
	  		  				  motorAForward();
 80027fe:	f7fe ff43 	bl	8001688 <motorAForward>
	  		  			  }

	  		  			  if(pwmB < 0){
 8002802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002804:	2b00      	cmp	r3, #0
 8002806:	da05      	bge.n	8002814 <motorTask+0x128>
	  		  				  motorBReverse();
 8002808:	f7fe ff6e 	bl	80016e8 <motorBReverse>
	  		  				  pwmB = -1*pwmB;
 800280c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800280e:	425b      	negs	r3, r3
 8002810:	65bb      	str	r3, [r7, #88]	; 0x58
 8002812:	e001      	b.n	8002818 <motorTask+0x12c>
	  		  			  } else {
	  		  				  motorBForward();
 8002814:	f7fe ff58 	bl	80016c8 <motorBForward>
	  		  			  }



	  		  			  if(pwmA >= 7000){
 8002818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281a:	f641 3257 	movw	r2, #6999	; 0x1b57
 800281e:	4293      	cmp	r3, r2
 8002820:	dd02      	ble.n	8002828 <motorTask+0x13c>
	  		  				  pwmA = 7000;
 8002822:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002826:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  			  }

	  		  			  if(pwmB >= 7000){
 8002828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282a:	f641 3257 	movw	r2, #6999	; 0x1b57
 800282e:	4293      	cmp	r3, r2
 8002830:	dd02      	ble.n	8002838 <motorTask+0x14c>
	  		  				  pwmB = 7000;
 8002832:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002836:	65bb      	str	r3, [r7, #88]	; 0x58
	  		  			  }



	  		  			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmA);
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <motorTask+0x19c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800283e:	635a      	str	r2, [r3, #52]	; 0x34
	  		  			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmB);
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <motorTask+0x19c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002846:	639a      	str	r2, [r3, #56]	; 0x38

	  		  			if(motorOnA == 0 && motorOnB == 0){
 8002848:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <motorTask+0x194>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
	  		  				//total_distancea = 0;
	  		  				//total_distanceb = 0;
	  		  				//total_angle = 0;

	  		  			}
	  			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <motorTask+0x180>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	625a      	str	r2, [r3, #36]	; 0x24
	  			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <motorTask+0x184>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
	  			tick = HAL_GetTick();
 800285e:	f001 fcf9 	bl	8004254 <HAL_GetTick>
 8002862:	64f8      	str	r0, [r7, #76]	; 0x4c

	  }


	  osDelayUntil(10);
 8002864:	200a      	movs	r0, #10
 8002866:	f007 fbdc 	bl	800a022 <osDelayUntil>
	  if(HAL_GetTick() - tick >= 10){
 800286a:	e765      	b.n	8002738 <motorTask+0x4c>
 800286c:	200001e8 	.word	0x200001e8
 8002870:	20000230 	.word	0x20000230
 8002874:	20000000 	.word	0x20000000
 8002878:	20002810 	.word	0x20002810
 800287c:	2000280c 	.word	0x2000280c
 8002880:	2000079c 	.word	0x2000079c
 8002884:	200007a0 	.word	0x200007a0
 8002888:	200002c0 	.word	0x200002c0
 800288c:	00000000 	.word	0x00000000

08002890 <gyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gyroTask */
void gyroTask(void *argument)
{
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gyroTask */
  /* Infinite loop */
	uint8_t val[2] = {0,0};
 8002898:	2300      	movs	r3, #0
 800289a:	83bb      	strh	r3, [r7, #28]

	char hello[20];
	int16_t angular_speed = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	847b      	strh	r3, [r7, #34]	; 0x22



	uint32_t tick = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
	gyroInit();
 80028a4:	f7fe ff80 	bl	80017a8 <gyroInit>
	int dir;
	int16_t offset = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	843b      	strh	r3, [r7, #32]





	tick = HAL_GetTick();
 80028ac:	f001 fcd2 	bl	8004254 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	; 0x24
	osDelayUntil(10);
 80028b2:	200a      	movs	r0, #10
 80028b4:	f007 fbb5 	bl	800a022 <osDelayUntil>

  for(;;)
  {


      osDelayUntil(10);
 80028b8:	200a      	movs	r0, #10
 80028ba:	f007 fbb2 	bl	800a022 <osDelayUntil>

      if(HAL_GetTick() - tick >= 100){
 80028be:	f001 fcc9 	bl	8004254 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b63      	cmp	r3, #99	; 0x63
 80028ca:	d9f5      	bls.n	80028b8 <gyroTask+0x28>
	  readByte(0x37, val);
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	4619      	mov	r1, r3
 80028d2:	2037      	movs	r0, #55	; 0x37
 80028d4:	f7fe ff18 	bl	8001708 <readByte>
	  //osDelayUntil(1);
	  //angular_speed = ((int16_t)((int8_t)val[0]))*256 +  (uint16_t)val[1];
	  angular_speed = (val[0] << 8) | val[1];
 80028d8:	7f3b      	ldrb	r3, [r7, #28]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	b21a      	sxth	r2, r3
 80028de:	7f7b      	ldrb	r3, [r7, #29]
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	847b      	strh	r3, [r7, #34]	; 0x22




	  // Default Value = 0.5
	  total_angle +=(double)(angular_speed + 1.5)*((HAL_GetTick() - tick)/16400.0)*1.16;
 80028e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fe12 	bl	8000514 <__aeabi_i2d>
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <gyroTask+0x198>)
 80028f6:	f7fd fcc1 	bl	800027c <__adddf3>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4614      	mov	r4, r2
 8002900:	461d      	mov	r5, r3
 8002902:	f001 fca7 	bl	8004254 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fdf1 	bl	80004f4 <__aeabi_ui2d>
 8002912:	a341      	add	r3, pc, #260	; (adr r3, 8002a18 <gyroTask+0x188>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd ff90 	bl	800083c <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fd fe60 	bl	80005e8 <__aeabi_dmul>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	a33b      	add	r3, pc, #236	; (adr r3, 8002a20 <gyroTask+0x190>)
 8002932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002936:	f7fd fe57 	bl	80005e8 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	4b3a      	ldr	r3, [pc, #232]	; (8002a2c <gyroTask+0x19c>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd fc98 	bl	800027c <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4936      	ldr	r1, [pc, #216]	; (8002a2c <gyroTask+0x19c>)
 8002952:	e9c1 2300 	strd	r2, r3, [r1]

	  global_angle += (double)(angular_speed + 1.5)*((HAL_GetTick() - tick)/16400.0)*1.16;
 8002956:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fdda 	bl	8000514 <__aeabi_i2d>
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <gyroTask+0x198>)
 8002966:	f7fd fc89 	bl	800027c <__adddf3>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4614      	mov	r4, r2
 8002970:	461d      	mov	r5, r3
 8002972:	f001 fc6f 	bl	8004254 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fdb9 	bl	80004f4 <__aeabi_ui2d>
 8002982:	a325      	add	r3, pc, #148	; (adr r3, 8002a18 <gyroTask+0x188>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd ff58 	bl	800083c <__aeabi_ddiv>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4620      	mov	r0, r4
 8002992:	4629      	mov	r1, r5
 8002994:	f7fd fe28 	bl	80005e8 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	a31f      	add	r3, pc, #124	; (adr r3, 8002a20 <gyroTask+0x190>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f7fd fe1f 	bl	80005e8 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <gyroTask+0x1a0>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fc60 	bl	800027c <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	491b      	ldr	r1, [pc, #108]	; (8002a30 <gyroTask+0x1a0>)
 80029c2:	e9c1 2300 	strd	r2, r3, [r1]


	  //prevSpeed = angular_speed;
	  if(total_angle >= 720){
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <gyroTask+0x19c>)
 80029c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <gyroTask+0x1a4>)
 80029d2:	f7fe f88f 	bl	8000af4 <__aeabi_dcmpge>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <gyroTask+0x15a>
		  total_angle = 0;
 80029dc:	4913      	ldr	r1, [pc, #76]	; (8002a2c <gyroTask+0x19c>)
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  if(total_angle <= -720){
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <gyroTask+0x19c>)
 80029ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <gyroTask+0x1a8>)
 80029f6:	f7fe f873 	bl	8000ae0 <__aeabi_dcmple>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <gyroTask+0x17e>
		  total_angle = 0;
 8002a00:	490a      	ldr	r1, [pc, #40]	; (8002a2c <gyroTask+0x19c>)
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9c1 2300 	strd	r2, r3, [r1]
	  }


	  tick = HAL_GetTick();
 8002a0e:	f001 fc21 	bl	8004254 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	; 0x24
      osDelayUntil(10);
 8002a14:	e750      	b.n	80028b8 <gyroTask+0x28>
 8002a16:	bf00      	nop
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	40d00400 	.word	0x40d00400
 8002a20:	28f5c28f 	.word	0x28f5c28f
 8002a24:	3ff28f5c 	.word	0x3ff28f5c
 8002a28:	3ff80000 	.word	0x3ff80000
 8002a2c:	20002818 	.word	0x20002818
 8002a30:	20002820 	.word	0x20002820
 8002a34:	40868000 	.word	0x40868000
 8002a38:	c0868000 	.word	0xc0868000
 8002a3c:	00000000 	.word	0x00000000

08002a40 <ultrasoundTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasoundTask */
void ultrasoundTask(void *argument)
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b08c      	sub	sp, #48	; 0x30
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasoundTask */
  /* Infinite loop */

double distanceC;
	HAL_ADC_Start_DMA(&hadc1, lengthFront, 4096);
 8002a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a4c:	497e      	ldr	r1, [pc, #504]	; (8002c48 <ultrasoundTask+0x208>)
 8002a4e:	487f      	ldr	r0, [pc, #508]	; (8002c4c <ultrasoundTask+0x20c>)
 8002a50:	f001 fe04 	bl	800465c <HAL_ADC_Start_DMA>
	//`HAL_ADC_Start_DMA(&hadc2, lengthSide, 4096);
	uint16_t lastFront = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	83fb      	strh	r3, [r7, #30]
	uint16_t lastSide = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	83bb      	strh	r3, [r7, #28]
	int nextDirection = -270;
 8002a5c:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <ultrasoundTask+0x210>)
 8002a5e:	61bb      	str	r3, [r7, #24]
	int gyroVal=0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
	int pwmVal=0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
	int pidVal =0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	double Aint = 0;
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int temp_dist = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]

	char v = '0';
 8002a7c:	2330      	movs	r3, #48	; 0x30
 8002a7e:	72fb      	strb	r3, [r7, #11]
//		distanceSide = tempB*0.5 + lastSide*0.5;
//		lastFront = tempA;
//		lastSide = tempB;


		switch(receiveBuffer[0]){
 8002a80:	4b74      	ldr	r3, [pc, #464]	; (8002c54 <ultrasoundTask+0x214>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	3b30      	subs	r3, #48	; 0x30
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	f200 876c 	bhi.w	8003964 <ultrasoundTask+0xf24>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <ultrasoundTask+0x54>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002abd 	.word	0x08002abd
 8002a98:	08002bf1 	.word	0x08002bf1
 8002a9c:	08002db9 	.word	0x08002db9
 8002aa0:	08002f5d 	.word	0x08002f5d
 8002aa4:	080030ed 	.word	0x080030ed
 8002aa8:	080032ad 	.word	0x080032ad
 8002aac:	08003439 	.word	0x08003439
 8002ab0:	08003613 	.word	0x08003613
 8002ab4:	080037d5 	.word	0x080037d5
 8002ab8:	08003961 	.word	0x08003961
	    //switch(v){
	    case '0':

	    	gyroInit();
 8002abc:	f7fe fe74 	bl	80017a8 <gyroInit>
		    total_angle = 0;
 8002ac0:	4965      	ldr	r1, [pc, #404]	; (8002c58 <ultrasoundTask+0x218>)
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9c1 2300 	strd	r2, r3, [r1]
	    	while(us_dist>55 || us_dist<30){
 8002ace:	e059      	b.n	8002b84 <ultrasoundTask+0x144>
	    		motorOnA=1150;
 8002ad0:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <ultrasoundTask+0x21c>)
 8002ad2:	f240 427e 	movw	r2, #1150	; 0x47e
 8002ad6:	601a      	str	r2, [r3, #0]
	    		motorOnB=1150;
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <ultrasoundTask+0x220>)
 8002ada:	f240 427e 	movw	r2, #1150	; 0x47e
 8002ade:	601a      	str	r2, [r3, #0]


	    		pidVal = (int)(147 + (total_angle*10 + 0.00*Aint));
 8002ae0:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <ultrasoundTask+0x218>)
 8002ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	4b5e      	ldr	r3, [pc, #376]	; (8002c64 <ultrasoundTask+0x224>)
 8002aec:	f7fd fd7c 	bl	80005e8 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b04:	f7fd fd70 	bl	80005e8 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fbb4 	bl	800027c <__adddf3>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	a348      	add	r3, pc, #288	; (adr r3, 8002c40 <ultrasoundTask+0x200>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fbab 	bl	800027c <__adddf3>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe f80b 	bl	8000b48 <__aeabi_d2iz>
 8002b32:	4603      	mov	r3, r0
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c


	    		if(inOrOut=='7'){
 8002b36:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <ultrasoundTask+0x228>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b37      	cmp	r3, #55	; 0x37
 8002b3c:	d109      	bne.n	8002b52 <ultrasoundTask+0x112>

	    				if(pidVal <= 140){
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	2b8c      	cmp	r3, #140	; 0x8c
 8002b42:	dc01      	bgt.n	8002b48 <ultrasoundTask+0x108>
	    					pidVal = 144;
 8002b44:	2390      	movs	r3, #144	; 0x90
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	    				}
	    				if(pidVal >= 153){
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	2b98      	cmp	r3, #152	; 0x98
 8002b4c:	dd01      	ble.n	8002b52 <ultrasoundTask+0x112>
	    					pidVal = 149;
 8002b4e:	2395      	movs	r3, #149	; 0x95
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
	    				}

	    		}


	    		htim1.Instance -> CCR4 = 147;
 8002b52:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <ultrasoundTask+0x22c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2293      	movs	r2, #147	; 0x93
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
	    		osDelayUntil(5);
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	f007 fa61 	bl	800a022 <osDelayUntil>
	    		htim1.Instance -> CCR4 = pidVal;
 8002b60:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <ultrasoundTask+0x22c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
	    		osDelayUntil(5);
 8002b68:	2005      	movs	r0, #5
 8002b6a:	f007 fa5a 	bl	800a022 <osDelayUntil>
	    		Aint += total_angle;
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <ultrasoundTask+0x218>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b78:	f7fd fb80 	bl	800027c <__adddf3>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    	while(us_dist>55 || us_dist<30){
 8002b84:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <ultrasoundTask+0x230>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b37      	cmp	r3, #55	; 0x37
 8002b8a:	d8a1      	bhi.n	8002ad0 <ultrasoundTask+0x90>
 8002b8c:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <ultrasoundTask+0x230>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b1d      	cmp	r3, #29
 8002b92:	d99d      	bls.n	8002ad0 <ultrasoundTask+0x90>


	    	}
			motorStop();
 8002b94:	f7fe fc24 	bl	80013e0 <motorStop>
			total_distancea=0;
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <ultrasoundTask+0x234>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
			total_distanceb=0;
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <ultrasoundTask+0x238>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]


			osDelay(200);
 8002ba4:	20c8      	movs	r0, #200	; 0xc8
 8002ba6:	f007 fa21 	bl	8009fec <osDelay>
			HAL_UART_Transmit_IT(&huart3,(uint8_t *)"0000\n",4);		//Sending ack to UART
 8002baa:	2204      	movs	r2, #4
 8002bac:	4933      	ldr	r1, [pc, #204]	; (8002c7c <ultrasoundTask+0x23c>)
 8002bae:	4834      	ldr	r0, [pc, #208]	; (8002c80 <ultrasoundTask+0x240>)
 8002bb0:	f006 f98d 	bl	8008ece <HAL_UART_Transmit_IT>


	    	if(us_dist>37){
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <ultrasoundTask+0x230>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b25      	cmp	r3, #37	; 0x25
 8002bba:	d90c      	bls.n	8002bd6 <ultrasoundTask+0x196>
	    		temp_dist=us_dist-37;
 8002bbc:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <ultrasoundTask+0x230>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	3b25      	subs	r3, #37	; 0x25
 8002bc2:	60fb      	str	r3, [r7, #12]
	    		motorForward(temp_dist,1);
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7fe fc1e 	bl	8001408 <motorForward>
	    		osDelay(100);
 8002bcc:	2064      	movs	r0, #100	; 0x64
 8002bce:	f007 fa0d 	bl	8009fec <osDelay>




	    	//v='1';
	    	break;
 8002bd2:	f000 bec7 	b.w	8003964 <ultrasoundTask+0xf24>
	    		temp_dist=37-us_dist;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <ultrasoundTask+0x230>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	f1c3 0325 	rsb	r3, r3, #37	; 0x25
 8002bde:	60fb      	str	r3, [r7, #12]
	    		motorBack(temp_dist);
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f7fe fed5 	bl	8001990 <motorBack>
	    		osDelay(100);
 8002be6:	2064      	movs	r0, #100	; 0x64
 8002be8:	f007 fa00 	bl	8009fec <osDelay>
	    	break;
 8002bec:	f000 beba 	b.w	8003964 <ultrasoundTask+0xf24>



	    case '1'://left

	    	motorLeft(45);
 8002bf0:	202d      	movs	r0, #45	; 0x2d
 8002bf2:	f7fe fe77 	bl	80018e4 <motorLeft>
	    	osDelay(200);
 8002bf6:	20c8      	movs	r0, #200	; 0xc8
 8002bf8:	f007 f9f8 	bl	8009fec <osDelay>
	    	motorForward(18.5,1);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2012      	movs	r0, #18
 8002c00:	f7fe fc02 	bl	8001408 <motorForward>
	    	osDelay(200);
 8002c04:	20c8      	movs	r0, #200	; 0xc8
 8002c06:	f007 f9f1 	bl	8009fec <osDelay>
	    	motorRight(109.5);
 8002c0a:	206d      	movs	r0, #109	; 0x6d
 8002c0c:	f7fe fe10 	bl	8001830 <motorRight>
	    	osDelay(200);
 8002c10:	20c8      	movs	r0, #200	; 0xc8
 8002c12:	f007 f9eb 	bl	8009fec <osDelay>
	    	//motorForward(10,1);
	    	//osDelay(100);
	    	motorLeft(65.25);
 8002c16:	2041      	movs	r0, #65	; 0x41
 8002c18:	f7fe fe64 	bl	80018e4 <motorLeft>


	    	//spacer
	    	osDelay(100);
 8002c1c:	2064      	movs	r0, #100	; 0x64
 8002c1e:	f007 f9e5 	bl	8009fec <osDelay>
	    	motorBack(24);
 8002c22:	2018      	movs	r0, #24
 8002c24:	f7fe feb4 	bl	8001990 <motorBack>

	    	gyroInit();
 8002c28:	f7fe fdbe 	bl	80017a8 <gyroInit>
		    total_angle = 0;
 8002c2c:	490a      	ldr	r1, [pc, #40]	; (8002c58 <ultrasoundTask+0x218>)
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9c1 2300 	strd	r2, r3, [r1]
	    	while(us_dist>40 || us_dist<10){
 8002c3a:	e07d      	b.n	8002d38 <ultrasoundTask+0x2f8>
 8002c3c:	f3af 8000 	nop.w
 8002c40:	00000000 	.word	0x00000000
 8002c44:	40626000 	.word	0x40626000
 8002c48:	200007a8 	.word	0x200007a8
 8002c4c:	200000a4 	.word	0x200000a4
 8002c50:	fffffef2 	.word	0xfffffef2
 8002c54:	20000774 	.word	0x20000774
 8002c58:	20002818 	.word	0x20002818
 8002c5c:	2000079c 	.word	0x2000079c
 8002c60:	200007a0 	.word	0x200007a0
 8002c64:	40240000 	.word	0x40240000
 8002c68:	20000010 	.word	0x20000010
 8002c6c:	200001a0 	.word	0x200001a0
 8002c70:	20002834 	.word	0x20002834
 8002c74:	2000280c 	.word	0x2000280c
 8002c78:	20002810 	.word	0x20002810
 8002c7c:	0800d848 	.word	0x0800d848
 8002c80:	20000308 	.word	0x20000308
	    		motorOnA=1000;
 8002c84:	4baa      	ldr	r3, [pc, #680]	; (8002f30 <ultrasoundTask+0x4f0>)
 8002c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c8a:	601a      	str	r2, [r3, #0]
	    		motorOnB=1000;
 8002c8c:	4ba9      	ldr	r3, [pc, #676]	; (8002f34 <ultrasoundTask+0x4f4>)
 8002c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c92:	601a      	str	r2, [r3, #0]

	    		pidVal = (int)(147 + (total_angle*10 + 0.00*Aint));
 8002c94:	4ba8      	ldr	r3, [pc, #672]	; (8002f38 <ultrasoundTask+0x4f8>)
 8002c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	4ba7      	ldr	r3, [pc, #668]	; (8002f3c <ultrasoundTask+0x4fc>)
 8002ca0:	f7fd fca2 	bl	80005e8 <__aeabi_dmul>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4614      	mov	r4, r2
 8002caa:	461d      	mov	r5, r3
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cb8:	f7fd fc96 	bl	80005e8 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	f7fd fada 	bl	800027c <__adddf3>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	a395      	add	r3, pc, #596	; (adr r3, 8002f28 <ultrasoundTask+0x4e8>)
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	f7fd fad1 	bl	800027c <__adddf3>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fd ff31 	bl	8000b48 <__aeabi_d2iz>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c



	    		if(inOrOut=='7'){
 8002cea:	4b95      	ldr	r3, [pc, #596]	; (8002f40 <ultrasoundTask+0x500>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b37      	cmp	r3, #55	; 0x37
 8002cf0:	d109      	bne.n	8002d06 <ultrasoundTask+0x2c6>

	    				if(pidVal <= 143.5){
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	2b8f      	cmp	r3, #143	; 0x8f
 8002cf6:	dc01      	bgt.n	8002cfc <ultrasoundTask+0x2bc>
	    					pidVal = 140;
 8002cf8:	238c      	movs	r3, #140	; 0x8c
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	    				}
	    				if(pidVal >= 154){
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	2b99      	cmp	r3, #153	; 0x99
 8002d00:	dd01      	ble.n	8002d06 <ultrasoundTask+0x2c6>
	    					pidVal = 148.5;
 8002d02:	2394      	movs	r3, #148	; 0x94
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	    				}

	    		}

	    		htim1.Instance -> CCR4 = 147;
 8002d06:	4b8f      	ldr	r3, [pc, #572]	; (8002f44 <ultrasoundTask+0x504>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2293      	movs	r2, #147	; 0x93
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
	    		osDelayUntil(5);
 8002d0e:	2005      	movs	r0, #5
 8002d10:	f007 f987 	bl	800a022 <osDelayUntil>
	    		htim1.Instance -> CCR4 = pidVal;
 8002d14:	4b8b      	ldr	r3, [pc, #556]	; (8002f44 <ultrasoundTask+0x504>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
	    		osDelayUntil(5);
 8002d1c:	2005      	movs	r0, #5
 8002d1e:	f007 f980 	bl	800a022 <osDelayUntil>
	    		Aint += total_angle;
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <ultrasoundTask+0x4f8>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d2c:	f7fd faa6 	bl	800027c <__adddf3>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    	while(us_dist>40 || us_dist<10){
 8002d38:	4b83      	ldr	r3, [pc, #524]	; (8002f48 <ultrasoundTask+0x508>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b28      	cmp	r3, #40	; 0x28
 8002d3e:	d8a1      	bhi.n	8002c84 <ultrasoundTask+0x244>
 8002d40:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <ultrasoundTask+0x508>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d99d      	bls.n	8002c84 <ultrasoundTask+0x244>


	    	}
			motorStop();
 8002d48:	f7fe fb4a 	bl	80013e0 <motorStop>
			total_distancea=0;
 8002d4c:	4b7f      	ldr	r3, [pc, #508]	; (8002f4c <ultrasoundTask+0x50c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
			total_distanceb=0;
 8002d52:	4b7f      	ldr	r3, [pc, #508]	; (8002f50 <ultrasoundTask+0x510>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

			osDelay(1000);
 8002d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d5c:	f007 f946 	bl	8009fec <osDelay>


			total_angle=0;
 8002d60:	4975      	ldr	r1, [pc, #468]	; (8002f38 <ultrasoundTask+0x4f8>)
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9c1 2300 	strd	r2, r3, [r1]
	    	if(us_dist>=22){
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <ultrasoundTask+0x508>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b15      	cmp	r3, #21
 8002d74:	d90b      	bls.n	8002d8e <ultrasoundTask+0x34e>
	    		temp_dist=us_dist-22;
 8002d76:	4b74      	ldr	r3, [pc, #464]	; (8002f48 <ultrasoundTask+0x508>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	3b16      	subs	r3, #22
 8002d7c:	60fb      	str	r3, [r7, #12]
	    		motorForward(temp_dist,1);
 8002d7e:	2101      	movs	r1, #1
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7fe fb41 	bl	8001408 <motorForward>
	    		osDelay(100);
 8002d86:	2064      	movs	r0, #100	; 0x64
 8002d88:	f007 f930 	bl	8009fec <osDelay>
 8002d8c:	e00a      	b.n	8002da4 <ultrasoundTask+0x364>
	    	}
	    	else{
	    		temp_dist=22-us_dist;
 8002d8e:	4b6e      	ldr	r3, [pc, #440]	; (8002f48 <ultrasoundTask+0x508>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	f1c3 0316 	rsb	r3, r3, #22
 8002d96:	60fb      	str	r3, [r7, #12]
	    		motorBack(temp_dist);
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7fe fdf9 	bl	8001990 <motorBack>
	    		osDelay(100);
 8002d9e:	2064      	movs	r0, #100	; 0x64
 8002da0:	f007 f924 	bl	8009fec <osDelay>
	    	}

	    	motorBack(6);
 8002da4:	2006      	movs	r0, #6
 8002da6:	f7fe fdf3 	bl	8001990 <motorBack>
	    	HAL_UART_Transmit_IT(&huart3,(uint8_t *)"1111\n",4);		//Sending ack to UART
 8002daa:	2204      	movs	r2, #4
 8002dac:	4969      	ldr	r1, [pc, #420]	; (8002f54 <ultrasoundTask+0x514>)
 8002dae:	486a      	ldr	r0, [pc, #424]	; (8002f58 <ultrasoundTask+0x518>)
 8002db0:	f006 f88d 	bl	8008ece <HAL_UART_Transmit_IT>

	    	//v ='3';
	    	break;
 8002db4:	f000 bdd6 	b.w	8003964 <ultrasoundTask+0xf24>

	    case '2'://right
	    	motorRight(45);
 8002db8:	202d      	movs	r0, #45	; 0x2d
 8002dba:	f7fe fd39 	bl	8001830 <motorRight>
	    	osDelay(200);
 8002dbe:	20c8      	movs	r0, #200	; 0xc8
 8002dc0:	f007 f914 	bl	8009fec <osDelay>
	    	motorForward(19.5,1);
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	2013      	movs	r0, #19
 8002dc8:	f7fe fb1e 	bl	8001408 <motorForward>
	    	osDelay(100);
 8002dcc:	2064      	movs	r0, #100	; 0x64
 8002dce:	f007 f90d 	bl	8009fec <osDelay>
	    	motorLeft(117);
 8002dd2:	2075      	movs	r0, #117	; 0x75
 8002dd4:	f7fe fd86 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 8002dd8:	2064      	movs	r0, #100	; 0x64
 8002dda:	f007 f907 	bl	8009fec <osDelay>
	    	//motorForward(10,1);
	    	//osDelay(100);
	    	motorRight(63);
 8002dde:	203f      	movs	r0, #63	; 0x3f
 8002de0:	f7fe fd26 	bl	8001830 <motorRight>


	    	//spacer
	    	osDelay(100);
 8002de4:	2064      	movs	r0, #100	; 0x64
 8002de6:	f007 f901 	bl	8009fec <osDelay>
	    	motorBack(24);
 8002dea:	2018      	movs	r0, #24
 8002dec:	f7fe fdd0 	bl	8001990 <motorBack>

		    total_angle = 0;
 8002df0:	4951      	ldr	r1, [pc, #324]	; (8002f38 <ultrasoundTask+0x4f8>)
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9c1 2300 	strd	r2, r3, [r1]
	    	while(us_dist>40 || us_dist<10){
 8002dfe:	e059      	b.n	8002eb4 <ultrasoundTask+0x474>
	    		motorOnA=1000;
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <ultrasoundTask+0x4f0>)
 8002e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e06:	601a      	str	r2, [r3, #0]
	    		motorOnB=1000;
 8002e08:	4b4a      	ldr	r3, [pc, #296]	; (8002f34 <ultrasoundTask+0x4f4>)
 8002e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e0e:	601a      	str	r2, [r3, #0]

	    		pidVal = (int)(147 + (total_angle*10 + 0.00*Aint));
 8002e10:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <ultrasoundTask+0x4f8>)
 8002e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	4b48      	ldr	r3, [pc, #288]	; (8002f3c <ultrasoundTask+0x4fc>)
 8002e1c:	f7fd fbe4 	bl	80005e8 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e34:	f7fd fbd8 	bl	80005e8 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd fa1c 	bl	800027c <__adddf3>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	a336      	add	r3, pc, #216	; (adr r3, 8002f28 <ultrasoundTask+0x4e8>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd fa13 	bl	800027c <__adddf3>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f7fd fe73 	bl	8000b48 <__aeabi_d2iz>
 8002e62:	4603      	mov	r3, r0
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c



	    		if(inOrOut=='7'){
 8002e66:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <ultrasoundTask+0x500>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b37      	cmp	r3, #55	; 0x37
 8002e6c:	d109      	bne.n	8002e82 <ultrasoundTask+0x442>

	    				if(pidVal <= 143.5){
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	2b8f      	cmp	r3, #143	; 0x8f
 8002e72:	dc01      	bgt.n	8002e78 <ultrasoundTask+0x438>
	    					pidVal = 140;
 8002e74:	238c      	movs	r3, #140	; 0x8c
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	    				}
	    				if(pidVal >= 154){
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	2b99      	cmp	r3, #153	; 0x99
 8002e7c:	dd01      	ble.n	8002e82 <ultrasoundTask+0x442>
	    					pidVal = 148.5;
 8002e7e:	2394      	movs	r3, #148	; 0x94
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	    				}

	    		}

	    		htim1.Instance -> CCR4 = 147;
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <ultrasoundTask+0x504>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2293      	movs	r2, #147	; 0x93
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
	    		osDelayUntil(5);
 8002e8a:	2005      	movs	r0, #5
 8002e8c:	f007 f8c9 	bl	800a022 <osDelayUntil>
	    		htim1.Instance -> CCR4 = pidVal;
 8002e90:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <ultrasoundTask+0x504>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
	    		osDelayUntil(5);
 8002e98:	2005      	movs	r0, #5
 8002e9a:	f007 f8c2 	bl	800a022 <osDelayUntil>
	    		Aint += total_angle;
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <ultrasoundTask+0x4f8>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ea8:	f7fd f9e8 	bl	800027c <__adddf3>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    	while(us_dist>40 || us_dist<10){
 8002eb4:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <ultrasoundTask+0x508>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b28      	cmp	r3, #40	; 0x28
 8002eba:	d8a1      	bhi.n	8002e00 <ultrasoundTask+0x3c0>
 8002ebc:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <ultrasoundTask+0x508>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d99d      	bls.n	8002e00 <ultrasoundTask+0x3c0>


	    	}
			motorStop();
 8002ec4:	f7fe fa8c 	bl	80013e0 <motorStop>
			total_distancea=0;
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <ultrasoundTask+0x50c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
			total_distanceb=0;
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <ultrasoundTask+0x510>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

			osDelay(1000);
 8002ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ed8:	f007 f888 	bl	8009fec <osDelay>



	    	if(us_dist>=22){
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <ultrasoundTask+0x508>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b15      	cmp	r3, #21
 8002ee2:	d90b      	bls.n	8002efc <ultrasoundTask+0x4bc>
	    		temp_dist=us_dist-22;
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <ultrasoundTask+0x508>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	3b16      	subs	r3, #22
 8002eea:	60fb      	str	r3, [r7, #12]
	    		motorForward(temp_dist,1);
 8002eec:	2101      	movs	r1, #1
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7fe fa8a 	bl	8001408 <motorForward>
	    		osDelay(100);
 8002ef4:	2064      	movs	r0, #100	; 0x64
 8002ef6:	f007 f879 	bl	8009fec <osDelay>
 8002efa:	e00a      	b.n	8002f12 <ultrasoundTask+0x4d2>
	    	}
	    	else{
	    		temp_dist=22-us_dist;
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <ultrasoundTask+0x508>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f1c3 0316 	rsb	r3, r3, #22
 8002f04:	60fb      	str	r3, [r7, #12]
	    		motorBack(temp_dist);
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7fe fd42 	bl	8001990 <motorBack>
	    		osDelay(100);
 8002f0c:	2064      	movs	r0, #100	; 0x64
 8002f0e:	f007 f86d 	bl	8009fec <osDelay>
	    	}

	    	motorBack(6);
 8002f12:	2006      	movs	r0, #6
 8002f14:	f7fe fd3c 	bl	8001990 <motorBack>
	    	HAL_UART_Transmit_IT(&huart3,(uint8_t *)"1111\n",4);		//Sending ack to UART
 8002f18:	2204      	movs	r2, #4
 8002f1a:	490e      	ldr	r1, [pc, #56]	; (8002f54 <ultrasoundTask+0x514>)
 8002f1c:	480e      	ldr	r0, [pc, #56]	; (8002f58 <ultrasoundTask+0x518>)
 8002f1e:	f005 ffd6 	bl	8008ece <HAL_UART_Transmit_IT>



	    	//v='4';
	    	break;
 8002f22:	f000 bd1f 	b.w	8003964 <ultrasoundTask+0xf24>
 8002f26:	bf00      	nop
 8002f28:	00000000 	.word	0x00000000
 8002f2c:	40626000 	.word	0x40626000
 8002f30:	2000079c 	.word	0x2000079c
 8002f34:	200007a0 	.word	0x200007a0
 8002f38:	20002818 	.word	0x20002818
 8002f3c:	40240000 	.word	0x40240000
 8002f40:	20000010 	.word	0x20000010
 8002f44:	200001a0 	.word	0x200001a0
 8002f48:	20002834 	.word	0x20002834
 8002f4c:	2000280c 	.word	0x2000280c
 8002f50:	20002810 	.word	0x20002810
 8002f54:	0800d850 	.word	0x0800d850
 8002f58:	20000308 	.word	0x20000308

	    case '3'://smallest dist

	    	osDelay(200);
 8002f5c:	20c8      	movs	r0, #200	; 0xc8
 8002f5e:	f007 f845 	bl	8009fec <osDelay>
	    	motorLeft(95);
 8002f62:	205f      	movs	r0, #95	; 0x5f
 8002f64:	f7fe fcbe 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 8002f68:	2064      	movs	r0, #100	; 0x64
 8002f6a:	f007 f83f 	bl	8009fec <osDelay>
//	    	motorForward(4,1);
//	    	osDelay(100);
	    	motorRight(195);
 8002f6e:	20c3      	movs	r0, #195	; 0xc3
 8002f70:	f7fe fc5e 	bl	8001830 <motorRight>
	    	osDelay(100);
 8002f74:	2064      	movs	r0, #100	; 0x64
 8002f76:	f007 f839 	bl	8009fec <osDelay>
	    	motorForward(52,1);
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2034      	movs	r0, #52	; 0x34
 8002f7e:	f7fe fa43 	bl	8001408 <motorForward>
	    	osDelay(100);
 8002f82:	2064      	movs	r0, #100	; 0x64
 8002f84:	f007 f832 	bl	8009fec <osDelay>
	    	motorRight(122.5);
 8002f88:	207a      	movs	r0, #122	; 0x7a
 8002f8a:	f7fe fc51 	bl	8001830 <motorRight>
	    	osDelay(100);
 8002f8e:	2064      	movs	r0, #100	; 0x64
 8002f90:	f007 f82c 	bl	8009fec <osDelay>

	    	gyroInit();
 8002f94:	f7fe fc08 	bl	80017a8 <gyroInit>
	    	total_angle=0;
 8002f98:	49b5      	ldr	r1, [pc, #724]	; (8003270 <ultrasoundTask+0x830>)
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9c1 2300 	strd	r2, r3, [r1]
	    	motorForward(124,1);
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	207c      	movs	r0, #124	; 0x7c
 8002faa:	f7fe fa2d 	bl	8001408 <motorForward>


	    	osDelay(100);
 8002fae:	2064      	movs	r0, #100	; 0x64
 8002fb0:	f007 f81c 	bl	8009fec <osDelay>
	    	motorRight(17);
 8002fb4:	2011      	movs	r0, #17
 8002fb6:	f7fe fc3b 	bl	8001830 <motorRight>
	    	osDelay(100);
 8002fba:	2064      	movs	r0, #100	; 0x64
 8002fbc:	f007 f816 	bl	8009fec <osDelay>
//	    	motorForward(5,1);
//	    	osDelay(100);
	    	motorLeft(28);
 8002fc0:	201c      	movs	r0, #28
 8002fc2:	f7fe fc8f 	bl	80018e4 <motorLeft>


	    	total_angle = 0;
 8002fc6:	49aa      	ldr	r1, [pc, #680]	; (8003270 <ultrasoundTask+0x830>)
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9c1 2300 	strd	r2, r3, [r1]
	    		    	while(us_dist>30 || us_dist<12){
 8002fd4:	e059      	b.n	800308a <ultrasoundTask+0x64a>
	    		    		motorOnA=1100;
 8002fd6:	4ba7      	ldr	r3, [pc, #668]	; (8003274 <ultrasoundTask+0x834>)
 8002fd8:	f240 424c 	movw	r2, #1100	; 0x44c
 8002fdc:	601a      	str	r2, [r3, #0]
	    		    		motorOnB=1100;
 8002fde:	4ba6      	ldr	r3, [pc, #664]	; (8003278 <ultrasoundTask+0x838>)
 8002fe0:	f240 424c 	movw	r2, #1100	; 0x44c
 8002fe4:	601a      	str	r2, [r3, #0]

	    		    		pidVal = (int)(147 + (total_angle*10 + 0.00*Aint));
 8002fe6:	4ba2      	ldr	r3, [pc, #648]	; (8003270 <ultrasoundTask+0x830>)
 8002fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	4ba2      	ldr	r3, [pc, #648]	; (800327c <ultrasoundTask+0x83c>)
 8002ff2:	f7fd faf9 	bl	80005e8 <__aeabi_dmul>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	461d      	mov	r5, r3
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800300a:	f7fd faed 	bl	80005e8 <__aeabi_dmul>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4620      	mov	r0, r4
 8003014:	4629      	mov	r1, r5
 8003016:	f7fd f931 	bl	800027c <__adddf3>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	a38f      	add	r3, pc, #572	; (adr r3, 8003260 <ultrasoundTask+0x820>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd f928 	bl	800027c <__adddf3>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f7fd fd88 	bl	8000b48 <__aeabi_d2iz>
 8003038:	4603      	mov	r3, r0
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c



	    		    		if(inOrOut=='7'){
 800303c:	4b90      	ldr	r3, [pc, #576]	; (8003280 <ultrasoundTask+0x840>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b37      	cmp	r3, #55	; 0x37
 8003042:	d109      	bne.n	8003058 <ultrasoundTask+0x618>

	    		    				if(pidVal <= 142){
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	2b8e      	cmp	r3, #142	; 0x8e
 8003048:	dc01      	bgt.n	800304e <ultrasoundTask+0x60e>
	    		    					pidVal = 144;
 800304a:	2390      	movs	r3, #144	; 0x90
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    				}
	    		    				if(pidVal >= 153){
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	2b98      	cmp	r3, #152	; 0x98
 8003052:	dd01      	ble.n	8003058 <ultrasoundTask+0x618>
	    		    					pidVal = 149;
 8003054:	2395      	movs	r3, #149	; 0x95
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    				}

	    		    		}

	    		    		htim1.Instance -> CCR4 = 147;
 8003058:	4b8a      	ldr	r3, [pc, #552]	; (8003284 <ultrasoundTask+0x844>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2293      	movs	r2, #147	; 0x93
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		osDelayUntil(5);
 8003060:	2005      	movs	r0, #5
 8003062:	f006 ffde 	bl	800a022 <osDelayUntil>
	    		    		htim1.Instance -> CCR4 = pidVal;
 8003066:	4b87      	ldr	r3, [pc, #540]	; (8003284 <ultrasoundTask+0x844>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		osDelayUntil(5);
 800306e:	2005      	movs	r0, #5
 8003070:	f006 ffd7 	bl	800a022 <osDelayUntil>
	    		    		Aint += total_angle;
 8003074:	4b7e      	ldr	r3, [pc, #504]	; (8003270 <ultrasoundTask+0x830>)
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800307e:	f7fd f8fd 	bl	800027c <__adddf3>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    		    	while(us_dist>30 || us_dist<12){
 800308a:	4b7f      	ldr	r3, [pc, #508]	; (8003288 <ultrasoundTask+0x848>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b1e      	cmp	r3, #30
 8003090:	d8a1      	bhi.n	8002fd6 <ultrasoundTask+0x596>
 8003092:	4b7d      	ldr	r3, [pc, #500]	; (8003288 <ultrasoundTask+0x848>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b0b      	cmp	r3, #11
 8003098:	d99d      	bls.n	8002fd6 <ultrasoundTask+0x596>


	    		    	}
	    				motorStop();
 800309a:	f7fe f9a1 	bl	80013e0 <motorStop>
	    				total_distancea=0;
 800309e:	4b7b      	ldr	r3, [pc, #492]	; (800328c <ultrasoundTask+0x84c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
	    				total_distanceb=0;
 80030a4:	4b7a      	ldr	r3, [pc, #488]	; (8003290 <ultrasoundTask+0x850>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

	    				osDelay(100);
 80030aa:	2064      	movs	r0, #100	; 0x64
 80030ac:	f006 ff9e 	bl	8009fec <osDelay>



	    		    	if(us_dist>=15){
 80030b0:	4b75      	ldr	r3, [pc, #468]	; (8003288 <ultrasoundTask+0x848>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b0e      	cmp	r3, #14
 80030b6:	d90c      	bls.n	80030d2 <ultrasoundTask+0x692>
	    		    		temp_dist=us_dist-15;
 80030b8:	4b73      	ldr	r3, [pc, #460]	; (8003288 <ultrasoundTask+0x848>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	3b0f      	subs	r3, #15
 80030be:	60fb      	str	r3, [r7, #12]
	    		    		motorForward(temp_dist,1);
 80030c0:	2101      	movs	r1, #1
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7fe f9a0 	bl	8001408 <motorForward>
	    		    		osDelay(100);
 80030c8:	2064      	movs	r0, #100	; 0x64
 80030ca:	f006 ff8f 	bl	8009fec <osDelay>
	    		    		osDelay(100);
	    		    	}


	    	//v='5';
	    	break;
 80030ce:	f000 bc49 	b.w	8003964 <ultrasoundTask+0xf24>
	    		    		temp_dist=15-us_dist;
 80030d2:	4b6d      	ldr	r3, [pc, #436]	; (8003288 <ultrasoundTask+0x848>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	f1c3 030f 	rsb	r3, r3, #15
 80030da:	60fb      	str	r3, [r7, #12]
	    		    		motorBack(temp_dist);
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7fe fc57 	bl	8001990 <motorBack>
	    		    		osDelay(100);
 80030e2:	2064      	movs	r0, #100	; 0x64
 80030e4:	f006 ff82 	bl	8009fec <osDelay>
	    	break;
 80030e8:	f000 bc3c 	b.w	8003964 <ultrasoundTask+0xf24>
//
	    case '4'://smallest dist

	    	osDelay(200);
 80030ec:	20c8      	movs	r0, #200	; 0xc8
 80030ee:	f006 ff7d 	bl	8009fec <osDelay>
	    	motorRight(95);
 80030f2:	205f      	movs	r0, #95	; 0x5f
 80030f4:	f7fe fb9c 	bl	8001830 <motorRight>
	    	osDelay(100);
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	f006 ff77 	bl	8009fec <osDelay>
//	    	motorForward(3,1);
//	    	osDelay(100);
	    	motorLeft(207);
 80030fe:	20cf      	movs	r0, #207	; 0xcf
 8003100:	f7fe fbf0 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 8003104:	2064      	movs	r0, #100	; 0x64
 8003106:	f006 ff71 	bl	8009fec <osDelay>
	    	motorForward(63,1);
 800310a:	2101      	movs	r1, #1
 800310c:	203f      	movs	r0, #63	; 0x3f
 800310e:	f7fe f97b 	bl	8001408 <motorForward>
	    	osDelay(100);
 8003112:	2064      	movs	r0, #100	; 0x64
 8003114:	f006 ff6a 	bl	8009fec <osDelay>
	    	motorLeft(125);
 8003118:	207d      	movs	r0, #125	; 0x7d
 800311a:	f7fe fbe3 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 800311e:	2064      	movs	r0, #100	; 0x64
 8003120:	f006 ff64 	bl	8009fec <osDelay>
	    	gyroInit();
 8003124:	f7fe fb40 	bl	80017a8 <gyroInit>
	    	total_angle=0;
 8003128:	4951      	ldr	r1, [pc, #324]	; (8003270 <ultrasoundTask+0x830>)
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9c1 2300 	strd	r2, r3, [r1]
	    	motorForward(130,1);
 8003136:	2101      	movs	r1, #1
 8003138:	2082      	movs	r0, #130	; 0x82
 800313a:	f7fe f965 	bl	8001408 <motorForward>


	    	osDelay(100);
 800313e:	2064      	movs	r0, #100	; 0x64
 8003140:	f006 ff54 	bl	8009fec <osDelay>
	    	motorLeft(15);
 8003144:	200f      	movs	r0, #15
 8003146:	f7fe fbcd 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 800314a:	2064      	movs	r0, #100	; 0x64
 800314c:	f006 ff4e 	bl	8009fec <osDelay>
//	    	motorForward(7,1);
//	    	osDelay(100);
	    	motorRight(21);
 8003150:	2015      	movs	r0, #21
 8003152:	f7fe fb6d 	bl	8001830 <motorRight>

	    	total_angle = 0;
 8003156:	4946      	ldr	r1, [pc, #280]	; (8003270 <ultrasoundTask+0x830>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9c1 2300 	strd	r2, r3, [r1]
	    		    		    	while(us_dist>30 || us_dist<12){
 8003164:	e059      	b.n	800321a <ultrasoundTask+0x7da>
	    		    		    		motorOnA=1100;
 8003166:	4b43      	ldr	r3, [pc, #268]	; (8003274 <ultrasoundTask+0x834>)
 8003168:	f240 424c 	movw	r2, #1100	; 0x44c
 800316c:	601a      	str	r2, [r3, #0]
	    		    		    		motorOnB=1100;
 800316e:	4b42      	ldr	r3, [pc, #264]	; (8003278 <ultrasoundTask+0x838>)
 8003170:	f240 424c 	movw	r2, #1100	; 0x44c
 8003174:	601a      	str	r2, [r3, #0]

	    		    		    		pidVal = (int)(146.5 + (total_angle*10 + 0.00*Aint));
 8003176:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <ultrasoundTask+0x830>)
 8003178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	4b3e      	ldr	r3, [pc, #248]	; (800327c <ultrasoundTask+0x83c>)
 8003182:	f7fd fa31 	bl	80005e8 <__aeabi_dmul>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4614      	mov	r4, r2
 800318c:	461d      	mov	r5, r3
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800319a:	f7fd fa25 	bl	80005e8 <__aeabi_dmul>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4620      	mov	r0, r4
 80031a4:	4629      	mov	r1, r5
 80031a6:	f7fd f869 	bl	800027c <__adddf3>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	a32d      	add	r3, pc, #180	; (adr r3, 8003268 <ultrasoundTask+0x828>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f7fd f860 	bl	800027c <__adddf3>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	f7fd fcc0 	bl	8000b48 <__aeabi_d2iz>
 80031c8:	4603      	mov	r3, r0
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c



	    		    		    		if(inOrOut=='7'){
 80031cc:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <ultrasoundTask+0x840>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b37      	cmp	r3, #55	; 0x37
 80031d2:	d109      	bne.n	80031e8 <ultrasoundTask+0x7a8>

	    		    		    				if(pidVal <= 140){
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	2b8c      	cmp	r3, #140	; 0x8c
 80031d8:	dc01      	bgt.n	80031de <ultrasoundTask+0x79e>
	    		    		    					pidVal = 145;
 80031da:	2391      	movs	r3, #145	; 0x91
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    		    				}
	    		    		    				if(pidVal >= 154){
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	2b99      	cmp	r3, #153	; 0x99
 80031e2:	dd01      	ble.n	80031e8 <ultrasoundTask+0x7a8>
	    		    		    					pidVal = 149;
 80031e4:	2395      	movs	r3, #149	; 0x95
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    		    				}

	    		    		    		}

	    		    		    		htim1.Instance -> CCR4 = 147;
 80031e8:	4b26      	ldr	r3, [pc, #152]	; (8003284 <ultrasoundTask+0x844>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2293      	movs	r2, #147	; 0x93
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		    		osDelayUntil(5);
 80031f0:	2005      	movs	r0, #5
 80031f2:	f006 ff16 	bl	800a022 <osDelayUntil>
	    		    		    		htim1.Instance -> CCR4 = pidVal;
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <ultrasoundTask+0x844>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		    		osDelayUntil(5);
 80031fe:	2005      	movs	r0, #5
 8003200:	f006 ff0f 	bl	800a022 <osDelayUntil>
	    		    		    		Aint += total_angle;
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <ultrasoundTask+0x830>)
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800320e:	f7fd f835 	bl	800027c <__adddf3>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    		    		    	while(us_dist>30 || us_dist<12){
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <ultrasoundTask+0x848>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b1e      	cmp	r3, #30
 8003220:	d8a1      	bhi.n	8003166 <ultrasoundTask+0x726>
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <ultrasoundTask+0x848>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b0b      	cmp	r3, #11
 8003228:	d99d      	bls.n	8003166 <ultrasoundTask+0x726>


	    		    		    	}
	    		    				motorStop();
 800322a:	f7fe f8d9 	bl	80013e0 <motorStop>
	    		    				total_distancea=0;
 800322e:	4b17      	ldr	r3, [pc, #92]	; (800328c <ultrasoundTask+0x84c>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
	    		    				total_distanceb=0;
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <ultrasoundTask+0x850>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]

	    		    				osDelay(100);
 800323a:	2064      	movs	r0, #100	; 0x64
 800323c:	f006 fed6 	bl	8009fec <osDelay>



	    		    		    	if(us_dist>=15){
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <ultrasoundTask+0x848>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b0e      	cmp	r3, #14
 8003246:	d925      	bls.n	8003294 <ultrasoundTask+0x854>
	    		    		    		temp_dist=us_dist-15;
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <ultrasoundTask+0x848>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	3b0f      	subs	r3, #15
 800324e:	60fb      	str	r3, [r7, #12]
	    		    		    		motorForward(temp_dist,1);
 8003250:	2101      	movs	r1, #1
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7fe f8d8 	bl	8001408 <motorForward>
	    		    		    		osDelay(100);
 8003258:	2064      	movs	r0, #100	; 0x64
 800325a:	f006 fec7 	bl	8009fec <osDelay>
	    		    		    		temp_dist=15-us_dist;
	    		    		    		motorBack(temp_dist);
	    		    		    		osDelay(100);
	    		    		    	}
	    	//v='5';
	    	break;
 800325e:	e381      	b.n	8003964 <ultrasoundTask+0xf24>
 8003260:	00000000 	.word	0x00000000
 8003264:	40626000 	.word	0x40626000
 8003268:	00000000 	.word	0x00000000
 800326c:	40625000 	.word	0x40625000
 8003270:	20002818 	.word	0x20002818
 8003274:	2000079c 	.word	0x2000079c
 8003278:	200007a0 	.word	0x200007a0
 800327c:	40240000 	.word	0x40240000
 8003280:	20000010 	.word	0x20000010
 8003284:	200001a0 	.word	0x200001a0
 8003288:	20002834 	.word	0x20002834
 800328c:	2000280c 	.word	0x2000280c
 8003290:	20002810 	.word	0x20002810
	    		    		    		temp_dist=15-us_dist;
 8003294:	4b8a      	ldr	r3, [pc, #552]	; (80034c0 <ultrasoundTask+0xa80>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	f1c3 030f 	rsb	r3, r3, #15
 800329c:	60fb      	str	r3, [r7, #12]
	    		    		    		motorBack(temp_dist);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7fe fb76 	bl	8001990 <motorBack>
	    		    		    		osDelay(100);
 80032a4:	2064      	movs	r0, #100	; 0x64
 80032a6:	f006 fea1 	bl	8009fec <osDelay>
	    	break;
 80032aa:	e35b      	b.n	8003964 <ultrasoundTask+0xf24>

	    case '5'://largest dist

	    	osDelay(200);
 80032ac:	20c8      	movs	r0, #200	; 0xc8
 80032ae:	f006 fe9d 	bl	8009fec <osDelay>
	    	motorLeft(95);
 80032b2:	205f      	movs	r0, #95	; 0x5f
 80032b4:	f7fe fb16 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 80032b8:	2064      	movs	r0, #100	; 0x64
 80032ba:	f006 fe97 	bl	8009fec <osDelay>
//	    	motorForward(4,1);
//	    	osDelay(100);
	    	motorRight(195);
 80032be:	20c3      	movs	r0, #195	; 0xc3
 80032c0:	f7fe fab6 	bl	8001830 <motorRight>
	    	osDelay(100);
 80032c4:	2064      	movs	r0, #100	; 0x64
 80032c6:	f006 fe91 	bl	8009fec <osDelay>
	    	motorForward(51.5,1);
 80032ca:	2101      	movs	r1, #1
 80032cc:	2033      	movs	r0, #51	; 0x33
 80032ce:	f7fe f89b 	bl	8001408 <motorForward>
	    	osDelay(100);
 80032d2:	2064      	movs	r0, #100	; 0x64
 80032d4:	f006 fe8a 	bl	8009fec <osDelay>
	    	motorRight(111);
 80032d8:	206f      	movs	r0, #111	; 0x6f
 80032da:	f7fe faa9 	bl	8001830 <motorRight>
	    	osDelay(100);
 80032de:	2064      	movs	r0, #100	; 0x64
 80032e0:	f006 fe84 	bl	8009fec <osDelay>

	    	gyroInit();
 80032e4:	f7fe fa60 	bl	80017a8 <gyroInit>
	    	total_angle=0;
 80032e8:	4976      	ldr	r1, [pc, #472]	; (80034c4 <ultrasoundTask+0xa84>)
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	e9c1 2300 	strd	r2, r3, [r1]
	    	motorForward(150,1);
 80032f6:	2101      	movs	r1, #1
 80032f8:	2096      	movs	r0, #150	; 0x96
 80032fa:	f7fe f885 	bl	8001408 <motorForward>


	    	osDelay(100);
 80032fe:	2064      	movs	r0, #100	; 0x64
 8003300:	f006 fe74 	bl	8009fec <osDelay>
	    	motorRight(12);
 8003304:	200c      	movs	r0, #12
 8003306:	f7fe fa93 	bl	8001830 <motorRight>
	    	osDelay(100);
 800330a:	2064      	movs	r0, #100	; 0x64
 800330c:	f006 fe6e 	bl	8009fec <osDelay>
//	    	motorForward(5,1);
//	    	osDelay(100);
	    	motorLeft(19);
 8003310:	2013      	movs	r0, #19
 8003312:	f7fe fae7 	bl	80018e4 <motorLeft>


	    	total_angle = 0;
 8003316:	496b      	ldr	r1, [pc, #428]	; (80034c4 <ultrasoundTask+0xa84>)
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9c1 2300 	strd	r2, r3, [r1]
	    		    	while(us_dist>30 || us_dist<12){
 8003324:	e059      	b.n	80033da <ultrasoundTask+0x99a>
	    		    		motorOnA=1100;
 8003326:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <ultrasoundTask+0xa88>)
 8003328:	f240 424c 	movw	r2, #1100	; 0x44c
 800332c:	601a      	str	r2, [r3, #0]
	    		    		motorOnB=1100;
 800332e:	4b67      	ldr	r3, [pc, #412]	; (80034cc <ultrasoundTask+0xa8c>)
 8003330:	f240 424c 	movw	r2, #1100	; 0x44c
 8003334:	601a      	str	r2, [r3, #0]

	    		    		pidVal = (int)(147 + (total_angle*10 + 0.00*Aint));
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <ultrasoundTask+0xa84>)
 8003338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <ultrasoundTask+0xa90>)
 8003342:	f7fd f951 	bl	80005e8 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4614      	mov	r4, r2
 800334c:	461d      	mov	r5, r3
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800335a:	f7fd f945 	bl	80005e8 <__aeabi_dmul>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4620      	mov	r0, r4
 8003364:	4629      	mov	r1, r5
 8003366:	f7fc ff89 	bl	800027c <__adddf3>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	a351      	add	r3, pc, #324	; (adr r3, 80034b8 <ultrasoundTask+0xa78>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fc ff80 	bl	800027c <__adddf3>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f7fd fbe0 	bl	8000b48 <__aeabi_d2iz>
 8003388:	4603      	mov	r3, r0
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c



	    		    		if(inOrOut=='7'){
 800338c:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <ultrasoundTask+0xa94>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b37      	cmp	r3, #55	; 0x37
 8003392:	d109      	bne.n	80033a8 <ultrasoundTask+0x968>

	    		    				if(pidVal <= 142){
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	2b8e      	cmp	r3, #142	; 0x8e
 8003398:	dc01      	bgt.n	800339e <ultrasoundTask+0x95e>
	    		    					pidVal = 144;
 800339a:	2390      	movs	r3, #144	; 0x90
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    				}
	    		    				if(pidVal >= 153){
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	2b98      	cmp	r3, #152	; 0x98
 80033a2:	dd01      	ble.n	80033a8 <ultrasoundTask+0x968>
	    		    					pidVal = 149;
 80033a4:	2395      	movs	r3, #149	; 0x95
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    				}

	    		    		}

	    		    		htim1.Instance -> CCR4 = 147;
 80033a8:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <ultrasoundTask+0xa98>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2293      	movs	r2, #147	; 0x93
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		osDelayUntil(5);
 80033b0:	2005      	movs	r0, #5
 80033b2:	f006 fe36 	bl	800a022 <osDelayUntil>
	    		    		htim1.Instance -> CCR4 = pidVal;
 80033b6:	4b48      	ldr	r3, [pc, #288]	; (80034d8 <ultrasoundTask+0xa98>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		osDelayUntil(5);
 80033be:	2005      	movs	r0, #5
 80033c0:	f006 fe2f 	bl	800a022 <osDelayUntil>
	    		    		Aint += total_angle;
 80033c4:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <ultrasoundTask+0xa84>)
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80033ce:	f7fc ff55 	bl	800027c <__adddf3>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    		    	while(us_dist>30 || us_dist<12){
 80033da:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <ultrasoundTask+0xa80>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b1e      	cmp	r3, #30
 80033e0:	d8a1      	bhi.n	8003326 <ultrasoundTask+0x8e6>
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <ultrasoundTask+0xa80>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b0b      	cmp	r3, #11
 80033e8:	d99d      	bls.n	8003326 <ultrasoundTask+0x8e6>


	    		    	}
	    				motorStop();
 80033ea:	f7fd fff9 	bl	80013e0 <motorStop>
	    				total_distancea=0;
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <ultrasoundTask+0xa9c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
	    				total_distanceb=0;
 80033f4:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <ultrasoundTask+0xaa0>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

	    				osDelay(100);
 80033fa:	2064      	movs	r0, #100	; 0x64
 80033fc:	f006 fdf6 	bl	8009fec <osDelay>



	    		    	if(us_dist>=15){
 8003400:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <ultrasoundTask+0xa80>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b0e      	cmp	r3, #14
 8003406:	d90b      	bls.n	8003420 <ultrasoundTask+0x9e0>
	    		    		temp_dist=us_dist-15;
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <ultrasoundTask+0xa80>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	3b0f      	subs	r3, #15
 800340e:	60fb      	str	r3, [r7, #12]
	    		    		motorForward(temp_dist,1);
 8003410:	2101      	movs	r1, #1
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7fd fff8 	bl	8001408 <motorForward>
	    		    		osDelay(100);
 8003418:	2064      	movs	r0, #100	; 0x64
 800341a:	f006 fde7 	bl	8009fec <osDelay>
	    		    		osDelay(100);
	    		    	}


	    	//v='5';
	    	break;
 800341e:	e2a1      	b.n	8003964 <ultrasoundTask+0xf24>
	    		    		temp_dist=15-us_dist;
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <ultrasoundTask+0xa80>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	f1c3 030f 	rsb	r3, r3, #15
 8003428:	60fb      	str	r3, [r7, #12]
	    		    		motorBack(temp_dist);
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7fe fab0 	bl	8001990 <motorBack>
	    		    		osDelay(100);
 8003430:	2064      	movs	r0, #100	; 0x64
 8003432:	f006 fddb 	bl	8009fec <osDelay>
	    	break;
 8003436:	e295      	b.n	8003964 <ultrasoundTask+0xf24>
//
	    case '6'://largest dist

	    	osDelay(200);
 8003438:	20c8      	movs	r0, #200	; 0xc8
 800343a:	f006 fdd7 	bl	8009fec <osDelay>
	    	motorRight(95);
 800343e:	205f      	movs	r0, #95	; 0x5f
 8003440:	f7fe f9f6 	bl	8001830 <motorRight>
	    	osDelay(100);
 8003444:	2064      	movs	r0, #100	; 0x64
 8003446:	f006 fdd1 	bl	8009fec <osDelay>
//	    	motorForward(3,1);
//	    	osDelay(100);
	    	motorLeft(207);
 800344a:	20cf      	movs	r0, #207	; 0xcf
 800344c:	f7fe fa4a 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 8003450:	2064      	movs	r0, #100	; 0x64
 8003452:	f006 fdcb 	bl	8009fec <osDelay>
	    	motorForward(63,1);
 8003456:	2101      	movs	r1, #1
 8003458:	203f      	movs	r0, #63	; 0x3f
 800345a:	f7fd ffd5 	bl	8001408 <motorForward>
	    	osDelay(100);
 800345e:	2064      	movs	r0, #100	; 0x64
 8003460:	f006 fdc4 	bl	8009fec <osDelay>
	    	motorLeft(116);
 8003464:	2074      	movs	r0, #116	; 0x74
 8003466:	f7fe fa3d 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 800346a:	2064      	movs	r0, #100	; 0x64
 800346c:	f006 fdbe 	bl	8009fec <osDelay>
	    	gyroInit();
 8003470:	f7fe f99a 	bl	80017a8 <gyroInit>
	    	total_angle=0;
 8003474:	4913      	ldr	r1, [pc, #76]	; (80034c4 <ultrasoundTask+0xa84>)
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9c1 2300 	strd	r2, r3, [r1]
	    	motorForward(153,1);
 8003482:	2101      	movs	r1, #1
 8003484:	2099      	movs	r0, #153	; 0x99
 8003486:	f7fd ffbf 	bl	8001408 <motorForward>


	    	osDelay(100);
 800348a:	2064      	movs	r0, #100	; 0x64
 800348c:	f006 fdae 	bl	8009fec <osDelay>
	    	motorLeft(18);
 8003490:	2012      	movs	r0, #18
 8003492:	f7fe fa27 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 8003496:	2064      	movs	r0, #100	; 0x64
 8003498:	f006 fda8 	bl	8009fec <osDelay>
//	    	motorForward(7,1);
//	    	osDelay(100);
	    	motorRight(20);
 800349c:	2014      	movs	r0, #20
 800349e:	f7fe f9c7 	bl	8001830 <motorRight>

	    	total_angle = 0;
 80034a2:	4908      	ldr	r1, [pc, #32]	; (80034c4 <ultrasoundTask+0xa84>)
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9c1 2300 	strd	r2, r3, [r1]
	    		    		    	while(us_dist>30 || us_dist<12){
 80034b0:	e080      	b.n	80035b4 <ultrasoundTask+0xb74>
 80034b2:	bf00      	nop
 80034b4:	f3af 8000 	nop.w
 80034b8:	00000000 	.word	0x00000000
 80034bc:	40626000 	.word	0x40626000
 80034c0:	20002834 	.word	0x20002834
 80034c4:	20002818 	.word	0x20002818
 80034c8:	2000079c 	.word	0x2000079c
 80034cc:	200007a0 	.word	0x200007a0
 80034d0:	40240000 	.word	0x40240000
 80034d4:	20000010 	.word	0x20000010
 80034d8:	200001a0 	.word	0x200001a0
 80034dc:	2000280c 	.word	0x2000280c
 80034e0:	20002810 	.word	0x20002810
	    		    		    		motorOnA=1100;
 80034e4:	4bb2      	ldr	r3, [pc, #712]	; (80037b0 <ultrasoundTask+0xd70>)
 80034e6:	f240 424c 	movw	r2, #1100	; 0x44c
 80034ea:	601a      	str	r2, [r3, #0]
	    		    		    		motorOnB=1100;
 80034ec:	4bb1      	ldr	r3, [pc, #708]	; (80037b4 <ultrasoundTask+0xd74>)
 80034ee:	f240 424c 	movw	r2, #1100	; 0x44c
 80034f2:	601a      	str	r2, [r3, #0]

	    		    		    		pidVal = (int)(146.5 + (total_angle*10 + 0.00*Aint));
 80034f4:	4bb0      	ldr	r3, [pc, #704]	; (80037b8 <ultrasoundTask+0xd78>)
 80034f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	4baf      	ldr	r3, [pc, #700]	; (80037bc <ultrasoundTask+0xd7c>)
 8003500:	f7fd f872 	bl	80005e8 <__aeabi_dmul>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4614      	mov	r4, r2
 800350a:	461d      	mov	r5, r3
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003518:	f7fd f866 	bl	80005e8 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4620      	mov	r0, r4
 8003522:	4629      	mov	r1, r5
 8003524:	f7fc feaa 	bl	800027c <__adddf3>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	a39b      	add	r3, pc, #620	; (adr r3, 80037a0 <ultrasoundTask+0xd60>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fc fea1 	bl	800027c <__adddf3>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fb01 	bl	8000b48 <__aeabi_d2iz>
 8003546:	4603      	mov	r3, r0
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c



	    		    		    		if(inOrOut=='7'){
 800354a:	4b9d      	ldr	r3, [pc, #628]	; (80037c0 <ultrasoundTask+0xd80>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b37      	cmp	r3, #55	; 0x37
 8003550:	d109      	bne.n	8003566 <ultrasoundTask+0xb26>

	    		    		    				if(pidVal <= 140){
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	2b8c      	cmp	r3, #140	; 0x8c
 8003556:	dc01      	bgt.n	800355c <ultrasoundTask+0xb1c>
	    		    		    					pidVal = 145;
 8003558:	2391      	movs	r3, #145	; 0x91
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    		    				}
	    		    		    				if(pidVal >= 154){
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	2b99      	cmp	r3, #153	; 0x99
 8003560:	dd01      	ble.n	8003566 <ultrasoundTask+0xb26>
	    		    		    					pidVal = 149;
 8003562:	2395      	movs	r3, #149	; 0x95
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    		    				}

	    		    		    		}

	    		    		    		if(inOrOut=='8'){
 8003566:	4b96      	ldr	r3, [pc, #600]	; (80037c0 <ultrasoundTask+0xd80>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b38      	cmp	r3, #56	; 0x38
 800356c:	d109      	bne.n	8003582 <ultrasoundTask+0xb42>

	    		    		    				if(pidVal <= 140){
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	2b8c      	cmp	r3, #140	; 0x8c
 8003572:	dc01      	bgt.n	8003578 <ultrasoundTask+0xb38>
	    		    		    					pidVal = 144;
 8003574:	2390      	movs	r3, #144	; 0x90
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    		    				}
	    		    		    				if(pidVal >= 154){
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	2b99      	cmp	r3, #153	; 0x99
 800357c:	dd01      	ble.n	8003582 <ultrasoundTask+0xb42>
	    		    		    					pidVal = 146.5;
 800357e:	2392      	movs	r3, #146	; 0x92
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    		    				}

	    		    		    		}
	    		    		    		htim1.Instance -> CCR4 = 147;
 8003582:	4b90      	ldr	r3, [pc, #576]	; (80037c4 <ultrasoundTask+0xd84>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2293      	movs	r2, #147	; 0x93
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		    		osDelayUntil(5);
 800358a:	2005      	movs	r0, #5
 800358c:	f006 fd49 	bl	800a022 <osDelayUntil>
	    		    		    		htim1.Instance -> CCR4 = pidVal;
 8003590:	4b8c      	ldr	r3, [pc, #560]	; (80037c4 <ultrasoundTask+0xd84>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		    		osDelayUntil(5);
 8003598:	2005      	movs	r0, #5
 800359a:	f006 fd42 	bl	800a022 <osDelayUntil>
	    		    		    		Aint += total_angle;
 800359e:	4b86      	ldr	r3, [pc, #536]	; (80037b8 <ultrasoundTask+0xd78>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035a8:	f7fc fe68 	bl	800027c <__adddf3>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    		    		    	while(us_dist>30 || us_dist<12){
 80035b4:	4b84      	ldr	r3, [pc, #528]	; (80037c8 <ultrasoundTask+0xd88>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b1e      	cmp	r3, #30
 80035ba:	d893      	bhi.n	80034e4 <ultrasoundTask+0xaa4>
 80035bc:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <ultrasoundTask+0xd88>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b0b      	cmp	r3, #11
 80035c2:	d98f      	bls.n	80034e4 <ultrasoundTask+0xaa4>


	    		    		    	}
	    		    				motorStop();
 80035c4:	f7fd ff0c 	bl	80013e0 <motorStop>
	    		    				total_distancea=0;
 80035c8:	4b80      	ldr	r3, [pc, #512]	; (80037cc <ultrasoundTask+0xd8c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
	    		    				total_distanceb=0;
 80035ce:	4b80      	ldr	r3, [pc, #512]	; (80037d0 <ultrasoundTask+0xd90>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

	    		    				osDelay(100);
 80035d4:	2064      	movs	r0, #100	; 0x64
 80035d6:	f006 fd09 	bl	8009fec <osDelay>



	    		    		    	if(us_dist>=15){
 80035da:	4b7b      	ldr	r3, [pc, #492]	; (80037c8 <ultrasoundTask+0xd88>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b0e      	cmp	r3, #14
 80035e0:	d90b      	bls.n	80035fa <ultrasoundTask+0xbba>
	    		    		    		temp_dist=us_dist-15;
 80035e2:	4b79      	ldr	r3, [pc, #484]	; (80037c8 <ultrasoundTask+0xd88>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	3b0f      	subs	r3, #15
 80035e8:	60fb      	str	r3, [r7, #12]
	    		    		    		motorForward(temp_dist,1);
 80035ea:	2101      	movs	r1, #1
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7fd ff0b 	bl	8001408 <motorForward>
	    		    		    		osDelay(100);
 80035f2:	2064      	movs	r0, #100	; 0x64
 80035f4:	f006 fcfa 	bl	8009fec <osDelay>
	    		    		    		temp_dist=15-us_dist;
	    		    		    		motorBack(temp_dist);
	    		    		    		osDelay(100);
	    		    		    	}
	    	//v='5';
	    	break;
 80035f8:	e1b4      	b.n	8003964 <ultrasoundTask+0xf24>
	    		    		    		temp_dist=15-us_dist;
 80035fa:	4b73      	ldr	r3, [pc, #460]	; (80037c8 <ultrasoundTask+0xd88>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f1c3 030f 	rsb	r3, r3, #15
 8003602:	60fb      	str	r3, [r7, #12]
	    		    		    		motorBack(temp_dist);
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7fe f9c3 	bl	8001990 <motorBack>
	    		    		    		osDelay(100);
 800360a:	2064      	movs	r0, #100	; 0x64
 800360c:	f006 fcee 	bl	8009fec <osDelay>
	    	break;
 8003610:	e1a8      	b.n	8003964 <ultrasoundTask+0xf24>

	    case '7'://medium dist

	    	osDelay(200);
 8003612:	20c8      	movs	r0, #200	; 0xc8
 8003614:	f006 fcea 	bl	8009fec <osDelay>
	    	motorLeft(95);
 8003618:	205f      	movs	r0, #95	; 0x5f
 800361a:	f7fe f963 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 800361e:	2064      	movs	r0, #100	; 0x64
 8003620:	f006 fce4 	bl	8009fec <osDelay>
//	    	motorForward(4,1);
//	    	osDelay(100);
	    	motorRight(195);
 8003624:	20c3      	movs	r0, #195	; 0xc3
 8003626:	f7fe f903 	bl	8001830 <motorRight>
	    	osDelay(100);
 800362a:	2064      	movs	r0, #100	; 0x64
 800362c:	f006 fcde 	bl	8009fec <osDelay>
	    	motorForward(51.5,1);
 8003630:	2101      	movs	r1, #1
 8003632:	2033      	movs	r0, #51	; 0x33
 8003634:	f7fd fee8 	bl	8001408 <motorForward>
	    	osDelay(100);
 8003638:	2064      	movs	r0, #100	; 0x64
 800363a:	f006 fcd7 	bl	8009fec <osDelay>
	    	motorRight(112);
 800363e:	2070      	movs	r0, #112	; 0x70
 8003640:	f7fe f8f6 	bl	8001830 <motorRight>
	    	osDelay(100);
 8003644:	2064      	movs	r0, #100	; 0x64
 8003646:	f006 fcd1 	bl	8009fec <osDelay>

	    	gyroInit();
 800364a:	f7fe f8ad 	bl	80017a8 <gyroInit>
	    	total_angle=0;
 800364e:	495a      	ldr	r1, [pc, #360]	; (80037b8 <ultrasoundTask+0xd78>)
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9c1 2300 	strd	r2, r3, [r1]
	    	motorForward(135,1);
 800365c:	2101      	movs	r1, #1
 800365e:	2087      	movs	r0, #135	; 0x87
 8003660:	f7fd fed2 	bl	8001408 <motorForward>


	    	osDelay(100);
 8003664:	2064      	movs	r0, #100	; 0x64
 8003666:	f006 fcc1 	bl	8009fec <osDelay>
	    	motorRight(10);
 800366a:	200a      	movs	r0, #10
 800366c:	f7fe f8e0 	bl	8001830 <motorRight>
	    	osDelay(100);
 8003670:	2064      	movs	r0, #100	; 0x64
 8003672:	f006 fcbb 	bl	8009fec <osDelay>
//	    	motorForward(5,1);
//	    	osDelay(100);
	    	motorLeft(18.5);
 8003676:	2012      	movs	r0, #18
 8003678:	f7fe f934 	bl	80018e4 <motorLeft>


	    	total_angle = 0;
 800367c:	494e      	ldr	r1, [pc, #312]	; (80037b8 <ultrasoundTask+0xd78>)
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9c1 2300 	strd	r2, r3, [r1]
	    		    	while(us_dist>30 || us_dist<12){
 800368a:	e059      	b.n	8003740 <ultrasoundTask+0xd00>
	    		    		motorOnA=1100;
 800368c:	4b48      	ldr	r3, [pc, #288]	; (80037b0 <ultrasoundTask+0xd70>)
 800368e:	f240 424c 	movw	r2, #1100	; 0x44c
 8003692:	601a      	str	r2, [r3, #0]
	    		    		motorOnB=1100;
 8003694:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <ultrasoundTask+0xd74>)
 8003696:	f240 424c 	movw	r2, #1100	; 0x44c
 800369a:	601a      	str	r2, [r3, #0]

	    		    		pidVal = (int)(147 + (total_angle*10 + 0.00*Aint));
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <ultrasoundTask+0xd78>)
 800369e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	4b45      	ldr	r3, [pc, #276]	; (80037bc <ultrasoundTask+0xd7c>)
 80036a8:	f7fc ff9e 	bl	80005e8 <__aeabi_dmul>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4614      	mov	r4, r2
 80036b2:	461d      	mov	r5, r3
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036c0:	f7fc ff92 	bl	80005e8 <__aeabi_dmul>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4620      	mov	r0, r4
 80036ca:	4629      	mov	r1, r5
 80036cc:	f7fc fdd6 	bl	800027c <__adddf3>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	a333      	add	r3, pc, #204	; (adr r3, 80037a8 <ultrasoundTask+0xd68>)
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f7fc fdcd 	bl	800027c <__adddf3>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	f7fd fa2d 	bl	8000b48 <__aeabi_d2iz>
 80036ee:	4603      	mov	r3, r0
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c



	    		    		if(inOrOut=='7'){
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <ultrasoundTask+0xd80>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b37      	cmp	r3, #55	; 0x37
 80036f8:	d109      	bne.n	800370e <ultrasoundTask+0xcce>

	    		    				if(pidVal <= 142){
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	2b8e      	cmp	r3, #142	; 0x8e
 80036fe:	dc01      	bgt.n	8003704 <ultrasoundTask+0xcc4>
	    		    					pidVal = 144;
 8003700:	2390      	movs	r3, #144	; 0x90
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    				}
	    		    				if(pidVal >= 153){
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	2b98      	cmp	r3, #152	; 0x98
 8003708:	dd01      	ble.n	800370e <ultrasoundTask+0xcce>
	    		    					pidVal = 149;
 800370a:	2395      	movs	r3, #149	; 0x95
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    				}

	    		    		}

	    		    		htim1.Instance -> CCR4 = 147;
 800370e:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <ultrasoundTask+0xd84>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2293      	movs	r2, #147	; 0x93
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		osDelayUntil(5);
 8003716:	2005      	movs	r0, #5
 8003718:	f006 fc83 	bl	800a022 <osDelayUntil>
	    		    		htim1.Instance -> CCR4 = pidVal;
 800371c:	4b29      	ldr	r3, [pc, #164]	; (80037c4 <ultrasoundTask+0xd84>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		osDelayUntil(5);
 8003724:	2005      	movs	r0, #5
 8003726:	f006 fc7c 	bl	800a022 <osDelayUntil>
	    		    		Aint += total_angle;
 800372a:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <ultrasoundTask+0xd78>)
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003734:	f7fc fda2 	bl	800027c <__adddf3>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    		    	while(us_dist>30 || us_dist<12){
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <ultrasoundTask+0xd88>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b1e      	cmp	r3, #30
 8003746:	d8a1      	bhi.n	800368c <ultrasoundTask+0xc4c>
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <ultrasoundTask+0xd88>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b0b      	cmp	r3, #11
 800374e:	d99d      	bls.n	800368c <ultrasoundTask+0xc4c>


	    		    	}
	    				motorStop();
 8003750:	f7fd fe46 	bl	80013e0 <motorStop>
	    				total_distancea=0;
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <ultrasoundTask+0xd8c>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
	    				total_distanceb=0;
 800375a:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <ultrasoundTask+0xd90>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

	    				osDelay(100);
 8003760:	2064      	movs	r0, #100	; 0x64
 8003762:	f006 fc43 	bl	8009fec <osDelay>



	    		    	if(us_dist>=15){
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <ultrasoundTask+0xd88>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b0e      	cmp	r3, #14
 800376c:	d90b      	bls.n	8003786 <ultrasoundTask+0xd46>
	    		    		temp_dist=us_dist-15;
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <ultrasoundTask+0xd88>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	3b0f      	subs	r3, #15
 8003774:	60fb      	str	r3, [r7, #12]
	    		    		motorForward(temp_dist,1);
 8003776:	2101      	movs	r1, #1
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7fd fe45 	bl	8001408 <motorForward>
	    		    		osDelay(100);
 800377e:	2064      	movs	r0, #100	; 0x64
 8003780:	f006 fc34 	bl	8009fec <osDelay>
	    		    		osDelay(100);
	    		    	}


	    	//v='5';
	    	break;
 8003784:	e0ee      	b.n	8003964 <ultrasoundTask+0xf24>
	    		    		temp_dist=15-us_dist;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <ultrasoundTask+0xd88>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	f1c3 030f 	rsb	r3, r3, #15
 800378e:	60fb      	str	r3, [r7, #12]
	    		    		motorBack(temp_dist);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7fe f8fd 	bl	8001990 <motorBack>
	    		    		osDelay(100);
 8003796:	2064      	movs	r0, #100	; 0x64
 8003798:	f006 fc28 	bl	8009fec <osDelay>
	    	break;
 800379c:	e0e2      	b.n	8003964 <ultrasoundTask+0xf24>
 800379e:	bf00      	nop
 80037a0:	00000000 	.word	0x00000000
 80037a4:	40625000 	.word	0x40625000
 80037a8:	00000000 	.word	0x00000000
 80037ac:	40626000 	.word	0x40626000
 80037b0:	2000079c 	.word	0x2000079c
 80037b4:	200007a0 	.word	0x200007a0
 80037b8:	20002818 	.word	0x20002818
 80037bc:	40240000 	.word	0x40240000
 80037c0:	20000010 	.word	0x20000010
 80037c4:	200001a0 	.word	0x200001a0
 80037c8:	20002834 	.word	0x20002834
 80037cc:	2000280c 	.word	0x2000280c
 80037d0:	20002810 	.word	0x20002810
//
	    case '8'://medium dist

	    	osDelay(200);
 80037d4:	20c8      	movs	r0, #200	; 0xc8
 80037d6:	f006 fc09 	bl	8009fec <osDelay>
	    	motorRight(95);
 80037da:	205f      	movs	r0, #95	; 0x5f
 80037dc:	f7fe f828 	bl	8001830 <motorRight>
	    	osDelay(100);
 80037e0:	2064      	movs	r0, #100	; 0x64
 80037e2:	f006 fc03 	bl	8009fec <osDelay>
//	    	motorForward(3,1);
//	    	osDelay(100);
	    	motorLeft(207);
 80037e6:	20cf      	movs	r0, #207	; 0xcf
 80037e8:	f7fe f87c 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 80037ec:	2064      	movs	r0, #100	; 0x64
 80037ee:	f006 fbfd 	bl	8009fec <osDelay>
	    	motorForward(67,1);
 80037f2:	2101      	movs	r1, #1
 80037f4:	2043      	movs	r0, #67	; 0x43
 80037f6:	f7fd fe07 	bl	8001408 <motorForward>
	    	osDelay(100);
 80037fa:	2064      	movs	r0, #100	; 0x64
 80037fc:	f006 fbf6 	bl	8009fec <osDelay>
	    	motorLeft(124);
 8003800:	207c      	movs	r0, #124	; 0x7c
 8003802:	f7fe f86f 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 8003806:	2064      	movs	r0, #100	; 0x64
 8003808:	f006 fbf0 	bl	8009fec <osDelay>
	    	gyroInit();
 800380c:	f7fd ffcc 	bl	80017a8 <gyroInit>
	    	total_angle=0;
 8003810:	4959      	ldr	r1, [pc, #356]	; (8003978 <ultrasoundTask+0xf38>)
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9c1 2300 	strd	r2, r3, [r1]
	    	motorForward(140,1);
 800381e:	2101      	movs	r1, #1
 8003820:	208c      	movs	r0, #140	; 0x8c
 8003822:	f7fd fdf1 	bl	8001408 <motorForward>


	    	osDelay(100);
 8003826:	2064      	movs	r0, #100	; 0x64
 8003828:	f006 fbe0 	bl	8009fec <osDelay>
	    	motorLeft(13);
 800382c:	200d      	movs	r0, #13
 800382e:	f7fe f859 	bl	80018e4 <motorLeft>
	    	osDelay(100);
 8003832:	2064      	movs	r0, #100	; 0x64
 8003834:	f006 fbda 	bl	8009fec <osDelay>
//	    	motorForward(7,1);
//	    	osDelay(100);
	    	motorRight(16);
 8003838:	2010      	movs	r0, #16
 800383a:	f7fd fff9 	bl	8001830 <motorRight>

	    	total_angle = 0;
 800383e:	494e      	ldr	r1, [pc, #312]	; (8003978 <ultrasoundTask+0xf38>)
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9c1 2300 	strd	r2, r3, [r1]
	    		    		    	while(us_dist>30 || us_dist<12){
 800384c:	e059      	b.n	8003902 <ultrasoundTask+0xec2>
	    		    		    		motorOnA=1100;
 800384e:	4b4b      	ldr	r3, [pc, #300]	; (800397c <ultrasoundTask+0xf3c>)
 8003850:	f240 424c 	movw	r2, #1100	; 0x44c
 8003854:	601a      	str	r2, [r3, #0]
	    		    		    		motorOnB=1100;
 8003856:	4b4a      	ldr	r3, [pc, #296]	; (8003980 <ultrasoundTask+0xf40>)
 8003858:	f240 424c 	movw	r2, #1100	; 0x44c
 800385c:	601a      	str	r2, [r3, #0]

	    		    		    		pidVal = (int)(147 + (total_angle*10 + 0.00*Aint));
 800385e:	4b46      	ldr	r3, [pc, #280]	; (8003978 <ultrasoundTask+0xf38>)
 8003860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	4b46      	ldr	r3, [pc, #280]	; (8003984 <ultrasoundTask+0xf44>)
 800386a:	f7fc febd 	bl	80005e8 <__aeabi_dmul>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4614      	mov	r4, r2
 8003874:	461d      	mov	r5, r3
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003882:	f7fc feb1 	bl	80005e8 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4620      	mov	r0, r4
 800388c:	4629      	mov	r1, r5
 800388e:	f7fc fcf5 	bl	800027c <__adddf3>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4610      	mov	r0, r2
 8003898:	4619      	mov	r1, r3
 800389a:	a335      	add	r3, pc, #212	; (adr r3, 8003970 <ultrasoundTask+0xf30>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fc fcec 	bl	800027c <__adddf3>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	f7fd f94c 	bl	8000b48 <__aeabi_d2iz>
 80038b0:	4603      	mov	r3, r0
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c



	    		    		    		if(inOrOut=='7'){
 80038b4:	4b34      	ldr	r3, [pc, #208]	; (8003988 <ultrasoundTask+0xf48>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b37      	cmp	r3, #55	; 0x37
 80038ba:	d109      	bne.n	80038d0 <ultrasoundTask+0xe90>

	    		    		    				if(pidVal <= 140){
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	2b8c      	cmp	r3, #140	; 0x8c
 80038c0:	dc01      	bgt.n	80038c6 <ultrasoundTask+0xe86>
	    		    		    					pidVal = 145;
 80038c2:	2391      	movs	r3, #145	; 0x91
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    		    				}
	    		    		    				if(pidVal >= 154){
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	2b99      	cmp	r3, #153	; 0x99
 80038ca:	dd01      	ble.n	80038d0 <ultrasoundTask+0xe90>
	    		    		    					pidVal = 149;
 80038cc:	2395      	movs	r3, #149	; 0x95
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		    		    				}

	    		    		    		}


	    		    		    		htim1.Instance -> CCR4 = 147;
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <ultrasoundTask+0xf4c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2293      	movs	r2, #147	; 0x93
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		    		osDelayUntil(5);
 80038d8:	2005      	movs	r0, #5
 80038da:	f006 fba2 	bl	800a022 <osDelayUntil>
	    		    		    		htim1.Instance -> CCR4 = pidVal;
 80038de:	4b2b      	ldr	r3, [pc, #172]	; (800398c <ultrasoundTask+0xf4c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
	    		    		    		osDelayUntil(5);
 80038e6:	2005      	movs	r0, #5
 80038e8:	f006 fb9b 	bl	800a022 <osDelayUntil>
	    		    		    		Aint += total_angle;
 80038ec:	4b22      	ldr	r3, [pc, #136]	; (8003978 <ultrasoundTask+0xf38>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80038f6:	f7fc fcc1 	bl	800027c <__adddf3>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    		    		    	while(us_dist>30 || us_dist<12){
 8003902:	4b23      	ldr	r3, [pc, #140]	; (8003990 <ultrasoundTask+0xf50>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b1e      	cmp	r3, #30
 8003908:	d8a1      	bhi.n	800384e <ultrasoundTask+0xe0e>
 800390a:	4b21      	ldr	r3, [pc, #132]	; (8003990 <ultrasoundTask+0xf50>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b0b      	cmp	r3, #11
 8003910:	d99d      	bls.n	800384e <ultrasoundTask+0xe0e>


	    		    		    	}
	    		    				motorStop();
 8003912:	f7fd fd65 	bl	80013e0 <motorStop>
	    		    				total_distancea=0;
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <ultrasoundTask+0xf54>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
	    		    				total_distanceb=0;
 800391c:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <ultrasoundTask+0xf58>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

	    		    				osDelay(100);
 8003922:	2064      	movs	r0, #100	; 0x64
 8003924:	f006 fb62 	bl	8009fec <osDelay>



	    		    		    	if(us_dist>=15){
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <ultrasoundTask+0xf50>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b0e      	cmp	r3, #14
 800392e:	d90b      	bls.n	8003948 <ultrasoundTask+0xf08>
	    		    		    		temp_dist=us_dist-15;
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <ultrasoundTask+0xf50>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	3b0f      	subs	r3, #15
 8003936:	60fb      	str	r3, [r7, #12]
	    		    		    		motorForward(temp_dist,1);
 8003938:	2101      	movs	r1, #1
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7fd fd64 	bl	8001408 <motorForward>
	    		    		    		osDelay(100);
 8003940:	2064      	movs	r0, #100	; 0x64
 8003942:	f006 fb53 	bl	8009fec <osDelay>
	    		    		    		temp_dist=15-us_dist;
	    		    		    		motorBack(temp_dist);
	    		    		    		osDelay(100);
	    		    		    	}
	    	//v='5';
	    	break;
 8003946:	e00d      	b.n	8003964 <ultrasoundTask+0xf24>
	    		    		    		temp_dist=15-us_dist;
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <ultrasoundTask+0xf50>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	f1c3 030f 	rsb	r3, r3, #15
 8003950:	60fb      	str	r3, [r7, #12]
	    		    		    		motorBack(temp_dist);
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7fe f81c 	bl	8001990 <motorBack>
	    		    		    		osDelay(100);
 8003958:	2064      	movs	r0, #100	; 0x64
 800395a:	f006 fb47 	bl	8009fec <osDelay>
	    	break;
 800395e:	e001      	b.n	8003964 <ultrasoundTask+0xf24>

	    case '9':
	    	motorStop();
 8003960:	f7fd fd3e 	bl	80013e0 <motorStop>


	    }
		osDelayUntil(5);
 8003964:	2005      	movs	r0, #5
 8003966:	f006 fb5c 	bl	800a022 <osDelayUntil>
		switch(receiveBuffer[0]){
 800396a:	f7ff b889 	b.w	8002a80 <ultrasoundTask+0x40>
 800396e:	bf00      	nop
 8003970:	00000000 	.word	0x00000000
 8003974:	40626000 	.word	0x40626000
 8003978:	20002818 	.word	0x20002818
 800397c:	2000079c 	.word	0x2000079c
 8003980:	200007a0 	.word	0x200007a0
 8003984:	40240000 	.word	0x40240000
 8003988:	20000010 	.word	0x20000010
 800398c:	200001a0 	.word	0x200001a0
 8003990:	20002834 	.word	0x20002834
 8003994:	2000280c 	.word	0x2000280c
 8003998:	20002810 	.word	0x20002810

0800399c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039ae:	f000 fc3d 	bl	800422c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40001000 	.word	0x40001000

080039c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039c4:	b672      	cpsid	i
}
 80039c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039c8:	e7fe      	b.n	80039c8 <Error_Handler+0x8>
	...

080039cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_MspInit+0x54>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_MspInit+0x54>)
 80039dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e0:	6453      	str	r3, [r2, #68]	; 0x44
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <HAL_MspInit+0x54>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_MspInit+0x54>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <HAL_MspInit+0x54>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_MspInit+0x54>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	210f      	movs	r1, #15
 8003a0e:	f06f 0001 	mvn.w	r0, #1
 8003a12:	f001 faad 	bl	8004f70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a3c      	ldr	r2, [pc, #240]	; (8003b34 <HAL_ADC_MspInit+0x110>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d171      	bne.n	8003b2a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_ADC_MspInit+0x114>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	4a3a      	ldr	r2, [pc, #232]	; (8003b38 <HAL_ADC_MspInit+0x114>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6453      	str	r3, [r2, #68]	; 0x44
 8003a56:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <HAL_ADC_MspInit+0x114>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_ADC_MspInit+0x114>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4a33      	ldr	r2, [pc, #204]	; (8003b38 <HAL_ADC_MspInit+0x114>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6313      	str	r3, [r2, #48]	; 0x30
 8003a72:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_ADC_MspInit+0x114>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_ADC_MspInit+0x114>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <HAL_ADC_MspInit+0x114>)
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_ADC_MspInit+0x114>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa6:	f107 0314 	add.w	r3, r7, #20
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4823      	ldr	r0, [pc, #140]	; (8003b3c <HAL_ADC_MspInit+0x118>)
 8003aae:	f001 fe8b 	bl	80057c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003abe:	f107 0314 	add.w	r3, r7, #20
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	481e      	ldr	r0, [pc, #120]	; (8003b40 <HAL_ADC_MspInit+0x11c>)
 8003ac6:	f001 fe7f 	bl	80057c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003aca:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003acc:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <HAL_ADC_MspInit+0x124>)
 8003ace:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003ad0:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ae8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003aea:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003af4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003af8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b0e:	480d      	ldr	r0, [pc, #52]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003b10:	f001 fa58 	bl	8004fc4 <HAL_DMA_Init>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003b1a:	f7ff ff51 	bl	80039c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <HAL_ADC_MspInit+0x120>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b2a:	bf00      	nop
 8003b2c:	3728      	adds	r7, #40	; 0x28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40012000 	.word	0x40012000
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	40020800 	.word	0x40020800
 8003b44:	200000ec 	.word	0x200000ec
 8003b48:	40026410 	.word	0x40026410

08003b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_I2C_MspInit+0x84>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12c      	bne.n	8003bc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <HAL_I2C_MspInit+0x88>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <HAL_I2C_MspInit+0x88>)
 8003b78:	f043 0302 	orr.w	r3, r3, #2
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_I2C_MspInit+0x88>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b90:	2312      	movs	r3, #18
 8003b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	480c      	ldr	r0, [pc, #48]	; (8003bd8 <HAL_I2C_MspInit+0x8c>)
 8003ba8:	f001 fe0e 	bl	80057c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_I2C_MspInit+0x88>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <HAL_I2C_MspInit+0x88>)
 8003bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bba:	6413      	str	r3, [r2, #64]	; 0x40
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_I2C_MspInit+0x88>)
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003bc8:	bf00      	nop
 8003bca:	3728      	adds	r7, #40	; 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40005400 	.word	0x40005400
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40020400 	.word	0x40020400

08003bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	; 0x30
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	f107 031c 	add.w	r3, r7, #28
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <HAL_TIM_Base_MspInit+0xf4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d116      	bne.n	8003c2c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	4a33      	ldr	r2, [pc, #204]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2105      	movs	r1, #5
 8003c1e:	2019      	movs	r0, #25
 8003c20:	f001 f9a6 	bl	8004f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c24:	2019      	movs	r0, #25
 8003c26:	f001 f9bf 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c2a:	e04d      	b.n	8003cc8 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM4)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a29      	ldr	r2, [pc, #164]	; (8003cd8 <HAL_TIM_Base_MspInit+0xfc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d135      	bne.n	8003ca2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	4b26      	ldr	r3, [pc, #152]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	6413      	str	r3, [r2, #64]	; 0x40
 8003c46:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c5c:	f043 0308 	orr.w	r3, r3, #8
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8003c6e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c80:	2302      	movs	r3, #2
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c84:	f107 031c 	add.w	r3, r7, #28
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4814      	ldr	r0, [pc, #80]	; (8003cdc <HAL_TIM_Base_MspInit+0x100>)
 8003c8c:	f001 fd9c 	bl	80057c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2105      	movs	r1, #5
 8003c94:	201e      	movs	r0, #30
 8003c96:	f001 f96b 	bl	8004f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c9a:	201e      	movs	r0, #30
 8003c9c:	f001 f984 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
}
 8003ca0:	e012      	b.n	8003cc8 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM8)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <HAL_TIM_Base_MspInit+0x104>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003cb6:	f043 0302 	orr.w	r3, r3, #2
 8003cba:	6453      	str	r3, [r2, #68]	; 0x44
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf8>)
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	bf00      	nop
 8003cca:	3730      	adds	r7, #48	; 0x30
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40000800 	.word	0x40000800
 8003cdc:	40020c00 	.word	0x40020c00
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	; 0x30
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cec:	f107 031c 	add.w	r3, r7, #28
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d04:	d14b      	bne.n	8003d9e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	4b3f      	ldr	r3, [pc, #252]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a3e      	ldr	r2, [pc, #248]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b3c      	ldr	r3, [pc, #240]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4a37      	ldr	r2, [pc, #220]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30
 8003d32:	4b35      	ldr	r3, [pc, #212]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	4a30      	ldr	r2, [pc, #192]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d60:	2302      	movs	r3, #2
 8003d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d70:	f107 031c 	add.w	r3, r7, #28
 8003d74:	4619      	mov	r1, r3
 8003d76:	4825      	ldr	r0, [pc, #148]	; (8003e0c <HAL_TIM_Encoder_MspInit+0x128>)
 8003d78:	f001 fd26 	bl	80057c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d80:	2302      	movs	r3, #2
 8003d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d90:	f107 031c 	add.w	r3, r7, #28
 8003d94:	4619      	mov	r1, r3
 8003d96:	481e      	ldr	r0, [pc, #120]	; (8003e10 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d98:	f001 fd16 	bl	80057c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d9c:	e030      	b.n	8003e00 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <HAL_TIM_Encoder_MspInit+0x130>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d12b      	bne.n	8003e00 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	6413      	str	r3, [r2, #64]	; 0x40
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003de0:	23c0      	movs	r3, #192	; 0xc0
 8003de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	2302      	movs	r3, #2
 8003de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003df0:	2302      	movs	r3, #2
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df4:	f107 031c 	add.w	r3, r7, #28
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4804      	ldr	r0, [pc, #16]	; (8003e0c <HAL_TIM_Encoder_MspInit+0x128>)
 8003dfc:	f001 fce4 	bl	80057c8 <HAL_GPIO_Init>
}
 8003e00:	bf00      	nop
 8003e02:	3730      	adds	r7, #48	; 0x30
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40020000 	.word	0x40020000
 8003e10:	40020400 	.word	0x40020400
 8003e14:	40000400 	.word	0x40000400

08003e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <HAL_TIM_MspPostInit+0xb0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d11f      	bne.n	8003e7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <HAL_TIM_MspPostInit+0xb4>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <HAL_TIM_MspPostInit+0xb4>)
 8003e44:	f043 0310 	orr.w	r3, r3, #16
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_TIM_MspPostInit+0xb4>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003e56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e64:	2303      	movs	r3, #3
 8003e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	4619      	mov	r1, r3
 8003e72:	4817      	ldr	r0, [pc, #92]	; (8003ed0 <HAL_TIM_MspPostInit+0xb8>)
 8003e74:	f001 fca8 	bl	80057c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003e78:	e022      	b.n	8003ec0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <HAL_TIM_MspPostInit+0xbc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d11d      	bne.n	8003ec0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <HAL_TIM_MspPostInit+0xb4>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4a0f      	ldr	r2, [pc, #60]	; (8003ecc <HAL_TIM_MspPostInit+0xb4>)
 8003e8e:	f043 0304 	orr.w	r3, r3, #4
 8003e92:	6313      	str	r3, [r2, #48]	; 0x30
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <HAL_TIM_MspPostInit+0xb4>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ea0:	23c0      	movs	r3, #192	; 0xc0
 8003ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eac:	2300      	movs	r3, #0
 8003eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4807      	ldr	r0, [pc, #28]	; (8003ed8 <HAL_TIM_MspPostInit+0xc0>)
 8003ebc:	f001 fc84 	bl	80057c8 <HAL_GPIO_Init>
}
 8003ec0:	bf00      	nop
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40010400 	.word	0x40010400
 8003ed8:	40020800 	.word	0x40020800

08003edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <HAL_UART_MspInit+0x94>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d134      	bne.n	8003f68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_UART_MspInit+0x98>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <HAL_UART_MspInit+0x98>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_UART_MspInit+0x98>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <HAL_UART_MspInit+0x98>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <HAL_UART_MspInit+0x98>)
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_UART_MspInit+0x98>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f44:	2303      	movs	r3, #3
 8003f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f48:	2307      	movs	r3, #7
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4619      	mov	r1, r3
 8003f52:	4809      	ldr	r0, [pc, #36]	; (8003f78 <HAL_UART_MspInit+0x9c>)
 8003f54:	f001 fc38 	bl	80057c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2105      	movs	r1, #5
 8003f5c:	2027      	movs	r0, #39	; 0x27
 8003f5e:	f001 f807 	bl	8004f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f62:	2027      	movs	r0, #39	; 0x27
 8003f64:	f001 f820 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f68:	bf00      	nop
 8003f6a:	3728      	adds	r7, #40	; 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40004800 	.word	0x40004800
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40020800 	.word	0x40020800

08003f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08e      	sub	sp, #56	; 0x38
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <HAL_InitTick+0xe4>)
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	4a32      	ldr	r2, [pc, #200]	; (8004060 <HAL_InitTick+0xe4>)
 8003f96:	f043 0310 	orr.w	r3, r3, #16
 8003f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <HAL_InitTick+0xe4>)
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fa8:	f107 0210 	add.w	r2, r7, #16
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 fa14 	bl	80073e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003fc2:	f003 f9e5 	bl	8007390 <HAL_RCC_GetPCLK1Freq>
 8003fc6:	6378      	str	r0, [r7, #52]	; 0x34
 8003fc8:	e004      	b.n	8003fd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003fca:	f003 f9e1 	bl	8007390 <HAL_RCC_GetPCLK1Freq>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd6:	4a23      	ldr	r2, [pc, #140]	; (8004064 <HAL_InitTick+0xe8>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	0c9b      	lsrs	r3, r3, #18
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_InitTick+0xec>)
 8003fe4:	4a21      	ldr	r2, [pc, #132]	; (800406c <HAL_InitTick+0xf0>)
 8003fe6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <HAL_InitTick+0xec>)
 8003fea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_InitTick+0xec>)
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003ff6:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <HAL_InitTick+0xec>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffc:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <HAL_InitTick+0xec>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004002:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_InitTick+0xec>)
 8004004:	2200      	movs	r2, #0
 8004006:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004008:	4817      	ldr	r0, [pc, #92]	; (8004068 <HAL_InitTick+0xec>)
 800400a:	f003 fa1b 	bl	8007444 <HAL_TIM_Base_Init>
 800400e:	4603      	mov	r3, r0
 8004010:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004014:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004018:	2b00      	cmp	r3, #0
 800401a:	d11b      	bne.n	8004054 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800401c:	4812      	ldr	r0, [pc, #72]	; (8004068 <HAL_InitTick+0xec>)
 800401e:	f003 fa61 	bl	80074e4 <HAL_TIM_Base_Start_IT>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004028:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800402c:	2b00      	cmp	r3, #0
 800402e:	d111      	bne.n	8004054 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004030:	2036      	movs	r0, #54	; 0x36
 8004032:	f000 ffb9 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b0f      	cmp	r3, #15
 800403a:	d808      	bhi.n	800404e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800403c:	2200      	movs	r2, #0
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	2036      	movs	r0, #54	; 0x36
 8004042:	f000 ff95 	bl	8004f70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_InitTick+0xf4>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	e002      	b.n	8004054 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004058:	4618      	mov	r0, r3
 800405a:	3738      	adds	r7, #56	; 0x38
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	431bde83 	.word	0x431bde83
 8004068:	2000284c 	.word	0x2000284c
 800406c:	40001000 	.word	0x40001000
 8004070:	20000018 	.word	0x20000018

08004074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004078:	e7fe      	b.n	8004078 <NMI_Handler+0x4>

0800407a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800407e:	e7fe      	b.n	800407e <HardFault_Handler+0x4>

08004080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004084:	e7fe      	b.n	8004084 <MemManage_Handler+0x4>

08004086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800408a:	e7fe      	b.n	800408a <BusFault_Handler+0x4>

0800408c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004090:	e7fe      	b.n	8004090 <UsageFault_Handler+0x4>

08004092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80040a4:	4802      	ldr	r0, [pc, #8]	; (80040b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80040a6:	f003 fe19 	bl	8007cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200001a0 	.word	0x200001a0

080040b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80040b8:	4802      	ldr	r0, [pc, #8]	; (80040c4 <TIM4_IRQHandler+0x10>)
 80040ba:	f003 fe0f 	bl	8007cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000278 	.word	0x20000278

080040c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80040cc:	4802      	ldr	r0, [pc, #8]	; (80040d8 <USART3_IRQHandler+0x10>)
 80040ce:	f004 ff73 	bl	8008fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000308 	.word	0x20000308

080040dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <TIM6_DAC_IRQHandler+0x10>)
 80040e2:	f003 fdfb 	bl	8007cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2000284c 	.word	0x2000284c

080040f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <DMA2_Stream0_IRQHandler+0x10>)
 80040f6:	f001 f8fd 	bl	80052f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200000ec 	.word	0x200000ec

08004104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800410c:	4a14      	ldr	r2, [pc, #80]	; (8004160 <_sbrk+0x5c>)
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <_sbrk+0x60>)
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <_sbrk+0x64>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d102      	bne.n	8004126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <_sbrk+0x64>)
 8004122:	4a12      	ldr	r2, [pc, #72]	; (800416c <_sbrk+0x68>)
 8004124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004126:	4b10      	ldr	r3, [pc, #64]	; (8004168 <_sbrk+0x64>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	429a      	cmp	r2, r3
 8004132:	d207      	bcs.n	8004144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004134:	f008 fc7a 	bl	800ca2c <__errno>
 8004138:	4603      	mov	r3, r0
 800413a:	220c      	movs	r2, #12
 800413c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800413e:	f04f 33ff 	mov.w	r3, #4294967295
 8004142:	e009      	b.n	8004158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004144:	4b08      	ldr	r3, [pc, #32]	; (8004168 <_sbrk+0x64>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800414a:	4b07      	ldr	r3, [pc, #28]	; (8004168 <_sbrk+0x64>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	4a05      	ldr	r2, [pc, #20]	; (8004168 <_sbrk+0x64>)
 8004154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20020000 	.word	0x20020000
 8004164:	00000400 	.word	0x00000400
 8004168:	20002894 	.word	0x20002894
 800416c:	20007200 	.word	0x20007200

08004170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <SystemInit+0x20>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	4a05      	ldr	r2, [pc, #20]	; (8004190 <SystemInit+0x20>)
 800417c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004198:	480d      	ldr	r0, [pc, #52]	; (80041d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800419a:	490e      	ldr	r1, [pc, #56]	; (80041d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800419c:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800419e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041a0:	e002      	b.n	80041a8 <LoopCopyDataInit>

080041a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041a6:	3304      	adds	r3, #4

080041a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041ac:	d3f9      	bcc.n	80041a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ae:	4a0b      	ldr	r2, [pc, #44]	; (80041dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041b0:	4c0b      	ldr	r4, [pc, #44]	; (80041e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041b4:	e001      	b.n	80041ba <LoopFillZerobss>

080041b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041b8:	3204      	adds	r2, #4

080041ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041bc:	d3fb      	bcc.n	80041b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041be:	f7ff ffd7 	bl	8004170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041c2:	f008 fc39 	bl	800ca38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041c6:	f7fd fbf9 	bl	80019bc <main>
  bx  lr    
 80041ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80041d8:	0800e3ec 	.word	0x0800e3ec
  ldr r2, =_sbss
 80041dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80041e0:	200071fc 	.word	0x200071fc

080041e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041e4:	e7fe      	b.n	80041e4 <ADC_IRQHandler>
	...

080041e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041ec:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <HAL_Init+0x40>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <HAL_Init+0x40>)
 80041f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_Init+0x40>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <HAL_Init+0x40>)
 80041fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <HAL_Init+0x40>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a07      	ldr	r2, [pc, #28]	; (8004228 <HAL_Init+0x40>)
 800420a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004210:	2003      	movs	r0, #3
 8004212:	f000 fea2 	bl	8004f5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004216:	200f      	movs	r0, #15
 8004218:	f7ff feb0 	bl	8003f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800421c:	f7ff fbd6 	bl	80039cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023c00 	.word	0x40023c00

0800422c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_IncTick+0x20>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_IncTick+0x24>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4413      	add	r3, r2
 800423c:	4a04      	ldr	r2, [pc, #16]	; (8004250 <HAL_IncTick+0x24>)
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000001c 	.word	0x2000001c
 8004250:	20002898 	.word	0x20002898

08004254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return uwTick;
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_GetTick+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20002898 	.word	0x20002898

0800426c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004274:	f7ff ffee 	bl	8004254 <HAL_GetTick>
 8004278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d005      	beq.n	8004292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_Delay+0x44>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004292:	bf00      	nop
 8004294:	f7ff ffde 	bl	8004254 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d8f7      	bhi.n	8004294 <HAL_Delay+0x28>
  {
  }
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2000001c 	.word	0x2000001c

080042b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e033      	b.n	8004332 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff fba6 	bl	8003a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042fa:	f023 0302 	bic.w	r3, r3, #2
 80042fe:	f043 0202 	orr.w	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fbfc 	bl	8004b04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
 8004322:	e001      	b.n	8004328 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_ADC_Start+0x1a>
 8004352:	2302      	movs	r3, #2
 8004354:	e0b2      	b.n	80044bc <HAL_ADC_Start+0x180>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d018      	beq.n	800439e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800437c:	4b52      	ldr	r3, [pc, #328]	; (80044c8 <HAL_ADC_Start+0x18c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a52      	ldr	r2, [pc, #328]	; (80044cc <HAL_ADC_Start+0x190>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0c9a      	lsrs	r2, r3, #18
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004390:	e002      	b.n	8004398 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	3b01      	subs	r3, #1
 8004396:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f9      	bne.n	8004392 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d17a      	bne.n	80044a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ea:	d106      	bne.n	80043fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	f023 0206 	bic.w	r2, r3, #6
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
 80043f8:	e002      	b.n	8004400 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004408:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_ADC_Start+0x194>)
 800440a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004414:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2b00      	cmp	r3, #0
 8004420:	d12a      	bne.n	8004478 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2b      	ldr	r2, [pc, #172]	; (80044d4 <HAL_ADC_Start+0x198>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d015      	beq.n	8004458 <HAL_ADC_Start+0x11c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a29      	ldr	r2, [pc, #164]	; (80044d8 <HAL_ADC_Start+0x19c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d105      	bne.n	8004442 <HAL_ADC_Start+0x106>
 8004436:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <HAL_ADC_Start+0x194>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a25      	ldr	r2, [pc, #148]	; (80044dc <HAL_ADC_Start+0x1a0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d136      	bne.n	80044ba <HAL_ADC_Start+0x17e>
 800444c:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <HAL_ADC_Start+0x194>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d130      	bne.n	80044ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d129      	bne.n	80044ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	e020      	b.n	80044ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <HAL_ADC_Start+0x198>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d11b      	bne.n	80044ba <HAL_ADC_Start+0x17e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d114      	bne.n	80044ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	e00b      	b.n	80044ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f043 0210 	orr.w	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	20000014 	.word	0x20000014
 80044cc:	431bde83 	.word	0x431bde83
 80044d0:	40012300 	.word	0x40012300
 80044d4:	40012000 	.word	0x40012000
 80044d8:	40012100 	.word	0x40012100
 80044dc:	40012200 	.word	0x40012200

080044e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_Stop+0x16>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e021      	b.n	800453a <HAL_ADC_Stop+0x5a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	f043 0201 	orr.w	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004562:	d113      	bne.n	800458c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800456e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004572:	d10b      	bne.n	800458c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e063      	b.n	8004654 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800458c:	f7ff fe62 	bl	8004254 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004592:	e021      	b.n	80045d8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d01d      	beq.n	80045d8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_ADC_PollForConversion+0x6c>
 80045a2:	f7ff fe57 	bl	8004254 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d212      	bcs.n	80045d8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d00b      	beq.n	80045d8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f043 0204 	orr.w	r2, r3, #4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e03d      	b.n	8004654 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d1d6      	bne.n	8004594 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0212 	mvn.w	r2, #18
 80045ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d123      	bne.n	8004652 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800460e:	2b00      	cmp	r3, #0
 8004610:	d11f      	bne.n	8004652 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800461c:	2b00      	cmp	r3, #0
 800461e:	d006      	beq.n	800462e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800462a:	2b00      	cmp	r3, #0
 800462c:	d111      	bne.n	8004652 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d105      	bne.n	8004652 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_ADC_Start_DMA+0x1e>
 8004676:	2302      	movs	r3, #2
 8004678:	e0e9      	b.n	800484e <HAL_ADC_Start_DMA+0x1f2>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d018      	beq.n	80046c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046a0:	4b6d      	ldr	r3, [pc, #436]	; (8004858 <HAL_ADC_Start_DMA+0x1fc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a6d      	ldr	r2, [pc, #436]	; (800485c <HAL_ADC_Start_DMA+0x200>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	0c9a      	lsrs	r2, r3, #18
 80046ac:	4613      	mov	r3, r2
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4413      	add	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046b4:	e002      	b.n	80046bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f9      	bne.n	80046b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d0:	d107      	bne.n	80046e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f040 80a1 	bne.w	8004834 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800471c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004730:	d106      	bne.n	8004740 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	f023 0206 	bic.w	r2, r3, #6
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
 800473e:	e002      	b.n	8004746 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800474e:	4b44      	ldr	r3, [pc, #272]	; (8004860 <HAL_ADC_Start_DMA+0x204>)
 8004750:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	4a43      	ldr	r2, [pc, #268]	; (8004864 <HAL_ADC_Start_DMA+0x208>)
 8004758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	4a42      	ldr	r2, [pc, #264]	; (8004868 <HAL_ADC_Start_DMA+0x20c>)
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	4a41      	ldr	r2, [pc, #260]	; (800486c <HAL_ADC_Start_DMA+0x210>)
 8004768:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004772:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004782:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004792:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	334c      	adds	r3, #76	; 0x4c
 800479e:	4619      	mov	r1, r3
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f000 fcbc 	bl	8005120 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d12a      	bne.n	800480a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a2d      	ldr	r2, [pc, #180]	; (8004870 <HAL_ADC_Start_DMA+0x214>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d015      	beq.n	80047ea <HAL_ADC_Start_DMA+0x18e>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <HAL_ADC_Start_DMA+0x218>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d105      	bne.n	80047d4 <HAL_ADC_Start_DMA+0x178>
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <HAL_ADC_Start_DMA+0x204>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <HAL_ADC_Start_DMA+0x21c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d136      	bne.n	800484c <HAL_ADC_Start_DMA+0x1f0>
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_ADC_Start_DMA+0x204>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d130      	bne.n	800484c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d129      	bne.n	800484c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	e020      	b.n	800484c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a18      	ldr	r2, [pc, #96]	; (8004870 <HAL_ADC_Start_DMA+0x214>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d11b      	bne.n	800484c <HAL_ADC_Start_DMA+0x1f0>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d114      	bne.n	800484c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004830:	609a      	str	r2, [r3, #8]
 8004832:	e00b      	b.n	800484c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	f043 0210 	orr.w	r2, r3, #16
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004844:	f043 0201 	orr.w	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000014 	.word	0x20000014
 800485c:	431bde83 	.word	0x431bde83
 8004860:	40012300 	.word	0x40012300
 8004864:	08004cfd 	.word	0x08004cfd
 8004868:	08004db7 	.word	0x08004db7
 800486c:	08004dd3 	.word	0x08004dd3
 8004870:	40012000 	.word	0x40012000
 8004874:	40012100 	.word	0x40012100
 8004878:	40012200 	.word	0x40012200

0800487c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x1c>
 80048d8:	2302      	movs	r3, #2
 80048da:	e105      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x228>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b09      	cmp	r3, #9
 80048ea:	d925      	bls.n	8004938 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68d9      	ldr	r1, [r3, #12]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	3b1e      	subs	r3, #30
 8004902:	2207      	movs	r2, #7
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43da      	mvns	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	400a      	ands	r2, r1
 8004910:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68d9      	ldr	r1, [r3, #12]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	4618      	mov	r0, r3
 8004924:	4603      	mov	r3, r0
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4403      	add	r3, r0
 800492a:	3b1e      	subs	r3, #30
 800492c:	409a      	lsls	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	e022      	b.n	800497e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6919      	ldr	r1, [r3, #16]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	2207      	movs	r2, #7
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43da      	mvns	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	400a      	ands	r2, r1
 800495a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6919      	ldr	r1, [r3, #16]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	4618      	mov	r0, r3
 800496e:	4603      	mov	r3, r0
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4403      	add	r3, r0
 8004974:	409a      	lsls	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b06      	cmp	r3, #6
 8004984:	d824      	bhi.n	80049d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	3b05      	subs	r3, #5
 8004998:	221f      	movs	r2, #31
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43da      	mvns	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	400a      	ands	r2, r1
 80049a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	4618      	mov	r0, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	3b05      	subs	r3, #5
 80049c2:	fa00 f203 	lsl.w	r2, r0, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34
 80049ce:	e04c      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b0c      	cmp	r3, #12
 80049d6:	d824      	bhi.n	8004a22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	3b23      	subs	r3, #35	; 0x23
 80049ea:	221f      	movs	r2, #31
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43da      	mvns	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	400a      	ands	r2, r1
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	4618      	mov	r0, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	3b23      	subs	r3, #35	; 0x23
 8004a14:	fa00 f203 	lsl.w	r2, r0, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a20:	e023      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	3b41      	subs	r3, #65	; 0x41
 8004a34:	221f      	movs	r2, #31
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	400a      	ands	r2, r1
 8004a42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4618      	mov	r0, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3b41      	subs	r3, #65	; 0x41
 8004a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a6a:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <HAL_ADC_ConfigChannel+0x234>)
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <HAL_ADC_ConfigChannel+0x238>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d109      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x1cc>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b12      	cmp	r3, #18
 8004a7e:	d105      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <HAL_ADC_ConfigChannel+0x238>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d123      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x21e>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d003      	beq.n	8004aa6 <HAL_ADC_ConfigChannel+0x1e6>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b11      	cmp	r3, #17
 8004aa4:	d11b      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d111      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004aba:	4b10      	ldr	r3, [pc, #64]	; (8004afc <HAL_ADC_ConfigChannel+0x23c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <HAL_ADC_ConfigChannel+0x240>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	0c9a      	lsrs	r2, r3, #18
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ad0:	e002      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f9      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40012300 	.word	0x40012300
 8004af8:	40012000 	.word	0x40012000
 8004afc:	20000014 	.word	0x20000014
 8004b00:	431bde83 	.word	0x431bde83

08004b04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b0c:	4b79      	ldr	r3, [pc, #484]	; (8004cf4 <ADC_Init+0x1f0>)
 8004b0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6859      	ldr	r1, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	021a      	lsls	r2, r3, #8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6899      	ldr	r1, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <ADC_Init+0x1f4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d022      	beq.n	8004be2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004baa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6899      	ldr	r1, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6899      	ldr	r1, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	e00f      	b.n	8004c02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0202 	bic.w	r2, r2, #2
 8004c10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7e1b      	ldrb	r3, [r3, #24]
 8004c1c:	005a      	lsls	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	035a      	lsls	r2, r3, #13
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	e007      	b.n	8004c78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	051a      	lsls	r2, r3, #20
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6899      	ldr	r1, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cba:	025a      	lsls	r2, r3, #9
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6899      	ldr	r1, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	029a      	lsls	r2, r3, #10
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40012300 	.word	0x40012300
 8004cf8:	0f000001 	.word	0x0f000001

08004cfc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d13c      	bne.n	8004d90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d12b      	bne.n	8004d88 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d127      	bne.n	8004d88 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d006      	beq.n	8004d54 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d119      	bne.n	8004d88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0220 	bic.w	r2, r2, #32
 8004d62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	f043 0201 	orr.w	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7fd fbed 	bl	8002568 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d8e:	e00e      	b.n	8004dae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7ff fd84 	bl	80048aa <HAL_ADC_ErrorCallback>
}
 8004da2:	e004      	b.n	8004dae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4798      	blx	r3
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7ff fd66 	bl	8004896 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	f043 0204 	orr.w	r2, r3, #4
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff fd59 	bl	80048aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <__NVIC_SetPriorityGrouping+0x44>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e32:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <__NVIC_SetPriorityGrouping+0x44>)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	60d3      	str	r3, [r2, #12]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	e000ed00 	.word	0xe000ed00

08004e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <__NVIC_GetPriorityGrouping+0x18>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	f003 0307 	and.w	r3, r3, #7
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	e000ed00 	.word	0xe000ed00

08004e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	db0b      	blt.n	8004e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	f003 021f 	and.w	r2, r3, #31
 8004e7c:	4907      	ldr	r1, [pc, #28]	; (8004e9c <__NVIC_EnableIRQ+0x38>)
 8004e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	2001      	movs	r0, #1
 8004e86:	fa00 f202 	lsl.w	r2, r0, r2
 8004e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	e000e100 	.word	0xe000e100

08004ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	6039      	str	r1, [r7, #0]
 8004eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	db0a      	blt.n	8004eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	490c      	ldr	r1, [pc, #48]	; (8004eec <__NVIC_SetPriority+0x4c>)
 8004eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebe:	0112      	lsls	r2, r2, #4
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ec8:	e00a      	b.n	8004ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	4908      	ldr	r1, [pc, #32]	; (8004ef0 <__NVIC_SetPriority+0x50>)
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	3b04      	subs	r3, #4
 8004ed8:	0112      	lsls	r2, r2, #4
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	440b      	add	r3, r1
 8004ede:	761a      	strb	r2, [r3, #24]
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	e000e100 	.word	0xe000e100
 8004ef0:	e000ed00 	.word	0xe000ed00

08004ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b089      	sub	sp, #36	; 0x24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f1c3 0307 	rsb	r3, r3, #7
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	bf28      	it	cs
 8004f12:	2304      	movcs	r3, #4
 8004f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d902      	bls.n	8004f24 <NVIC_EncodePriority+0x30>
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3b03      	subs	r3, #3
 8004f22:	e000      	b.n	8004f26 <NVIC_EncodePriority+0x32>
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43da      	mvns	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	401a      	ands	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	43d9      	mvns	r1, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f4c:	4313      	orrs	r3, r2
         );
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3724      	adds	r7, #36	; 0x24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff ff4c 	bl	8004e00 <__NVIC_SetPriorityGrouping>
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f82:	f7ff ff61 	bl	8004e48 <__NVIC_GetPriorityGrouping>
 8004f86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	6978      	ldr	r0, [r7, #20]
 8004f8e:	f7ff ffb1 	bl	8004ef4 <NVIC_EncodePriority>
 8004f92:	4602      	mov	r2, r0
 8004f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff ff80 	bl	8004ea0 <__NVIC_SetPriority>
}
 8004fa0:	bf00      	nop
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff ff54 	bl	8004e64 <__NVIC_EnableIRQ>
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fd0:	f7ff f940 	bl	8004254 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e099      	b.n	8005114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0201 	bic.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005000:	e00f      	b.n	8005022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005002:	f7ff f927 	bl	8004254 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b05      	cmp	r3, #5
 800500e:	d908      	bls.n	8005022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2203      	movs	r2, #3
 800501a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e078      	b.n	8005114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e8      	bne.n	8005002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4b38      	ldr	r3, [pc, #224]	; (800511c <HAL_DMA_Init+0x158>)
 800503c:	4013      	ands	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800504e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800505a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2b04      	cmp	r3, #4
 800507a:	d107      	bne.n	800508c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	4313      	orrs	r3, r2
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 0307 	bic.w	r3, r3, #7
 80050a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d117      	bne.n	80050e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fb01 	bl	80056d0 <DMA_CheckFifoParam>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2240      	movs	r2, #64	; 0x40
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050e2:	2301      	movs	r3, #1
 80050e4:	e016      	b.n	8005114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fab8 	bl	8005664 <DMA_CalcBaseAndBitshift>
 80050f4:	4603      	mov	r3, r0
 80050f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	223f      	movs	r2, #63	; 0x3f
 80050fe:	409a      	lsls	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	f010803f 	.word	0xf010803f

08005120 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_DMA_Start_IT+0x26>
 8005142:	2302      	movs	r3, #2
 8005144:	e040      	b.n	80051c8 <HAL_DMA_Start_IT+0xa8>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d12f      	bne.n	80051ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2202      	movs	r2, #2
 800515e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fa4a 	bl	8005608 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005178:	223f      	movs	r2, #63	; 0x3f
 800517a:	409a      	lsls	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0216 	orr.w	r2, r2, #22
 800518e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e005      	b.n	80051c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051c2:	2302      	movs	r3, #2
 80051c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051de:	f7ff f839 	bl	8004254 <HAL_GetTick>
 80051e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d008      	beq.n	8005202 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2280      	movs	r2, #128	; 0x80
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e052      	b.n	80052a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0216 	bic.w	r2, r2, #22
 8005210:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005220:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <HAL_DMA_Abort+0x62>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0208 	bic.w	r2, r2, #8
 8005240:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0201 	bic.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005252:	e013      	b.n	800527c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005254:	f7fe fffe 	bl	8004254 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b05      	cmp	r3, #5
 8005260:	d90c      	bls.n	800527c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2203      	movs	r2, #3
 800526c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e015      	b.n	80052a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e4      	bne.n	8005254 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528e:	223f      	movs	r2, #63	; 0x3f
 8005290:	409a      	lsls	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d004      	beq.n	80052ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2280      	movs	r2, #128	; 0x80
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e00c      	b.n	80052e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2205      	movs	r2, #5
 80052d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005300:	4b8e      	ldr	r3, [pc, #568]	; (800553c <HAL_DMA_IRQHandler+0x248>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a8e      	ldr	r2, [pc, #568]	; (8005540 <HAL_DMA_IRQHandler+0x24c>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	0a9b      	lsrs	r3, r3, #10
 800530c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005312:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531e:	2208      	movs	r2, #8
 8005320:	409a      	lsls	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4013      	ands	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01a      	beq.n	8005360 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d013      	beq.n	8005360 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0204 	bic.w	r2, r2, #4
 8005346:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	2208      	movs	r2, #8
 800534e:	409a      	lsls	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f043 0201 	orr.w	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005364:	2201      	movs	r2, #1
 8005366:	409a      	lsls	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d012      	beq.n	8005396 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005382:	2201      	movs	r2, #1
 8005384:	409a      	lsls	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	f043 0202 	orr.w	r2, r3, #2
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539a:	2204      	movs	r2, #4
 800539c:	409a      	lsls	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d012      	beq.n	80053cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00b      	beq.n	80053cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b8:	2204      	movs	r2, #4
 80053ba:	409a      	lsls	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c4:	f043 0204 	orr.w	r2, r3, #4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d0:	2210      	movs	r2, #16
 80053d2:	409a      	lsls	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d043      	beq.n	8005464 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d03c      	beq.n	8005464 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ee:	2210      	movs	r2, #16
 80053f0:	409a      	lsls	r2, r3
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d018      	beq.n	8005436 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d108      	bne.n	8005424 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d024      	beq.n	8005464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	4798      	blx	r3
 8005422:	e01f      	b.n	8005464 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
 8005434:	e016      	b.n	8005464 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005440:	2b00      	cmp	r3, #0
 8005442:	d107      	bne.n	8005454 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0208 	bic.w	r2, r2, #8
 8005452:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005468:	2220      	movs	r2, #32
 800546a:	409a      	lsls	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 808f 	beq.w	8005594 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8087 	beq.w	8005594 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548a:	2220      	movs	r2, #32
 800548c:	409a      	lsls	r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b05      	cmp	r3, #5
 800549c:	d136      	bne.n	800550c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0216 	bic.w	r2, r2, #22
 80054ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <HAL_DMA_IRQHandler+0x1da>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0208 	bic.w	r2, r2, #8
 80054dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e2:	223f      	movs	r2, #63	; 0x3f
 80054e4:	409a      	lsls	r2, r3
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d07e      	beq.n	8005600 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
        }
        return;
 800550a:	e079      	b.n	8005600 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01d      	beq.n	8005556 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10d      	bne.n	8005544 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552c:	2b00      	cmp	r3, #0
 800552e:	d031      	beq.n	8005594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	4798      	blx	r3
 8005538:	e02c      	b.n	8005594 <HAL_DMA_IRQHandler+0x2a0>
 800553a:	bf00      	nop
 800553c:	20000014 	.word	0x20000014
 8005540:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d023      	beq.n	8005594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	4798      	blx	r3
 8005554:	e01e      	b.n	8005594 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10f      	bne.n	8005584 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0210 	bic.w	r2, r2, #16
 8005572:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	2b00      	cmp	r3, #0
 800559a:	d032      	beq.n	8005602 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d022      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2205      	movs	r2, #5
 80055ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d307      	bcc.n	80055dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f2      	bne.n	80055c0 <HAL_DMA_IRQHandler+0x2cc>
 80055da:	e000      	b.n	80055de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80055dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
 80055fe:	e000      	b.n	8005602 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005600:	bf00      	nop
    }
  }
}
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005624:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d108      	bne.n	8005648 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005646:	e007      	b.n	8005658 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	3b10      	subs	r3, #16
 8005674:	4a14      	ldr	r2, [pc, #80]	; (80056c8 <DMA_CalcBaseAndBitshift+0x64>)
 8005676:	fba2 2303 	umull	r2, r3, r2, r3
 800567a:	091b      	lsrs	r3, r3, #4
 800567c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800567e:	4a13      	ldr	r2, [pc, #76]	; (80056cc <DMA_CalcBaseAndBitshift+0x68>)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d909      	bls.n	80056a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	1d1a      	adds	r2, r3, #4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	659a      	str	r2, [r3, #88]	; 0x58
 80056a4:	e007      	b.n	80056b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	aaaaaaab 	.word	0xaaaaaaab
 80056cc:	0800e3a0 	.word	0x0800e3a0

080056d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11f      	bne.n	800572a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d856      	bhi.n	800579e <DMA_CheckFifoParam+0xce>
 80056f0:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <DMA_CheckFifoParam+0x28>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	08005709 	.word	0x08005709
 80056fc:	0800571b 	.word	0x0800571b
 8005700:	08005709 	.word	0x08005709
 8005704:	0800579f 	.word	0x0800579f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d046      	beq.n	80057a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005718:	e043      	b.n	80057a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005722:	d140      	bne.n	80057a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005728:	e03d      	b.n	80057a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005732:	d121      	bne.n	8005778 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d837      	bhi.n	80057aa <DMA_CheckFifoParam+0xda>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <DMA_CheckFifoParam+0x70>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005751 	.word	0x08005751
 8005744:	08005757 	.word	0x08005757
 8005748:	08005751 	.word	0x08005751
 800574c:	08005769 	.word	0x08005769
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e030      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d025      	beq.n	80057ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005766:	e022      	b.n	80057ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005770:	d11f      	bne.n	80057b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005776:	e01c      	b.n	80057b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d903      	bls.n	8005786 <DMA_CheckFifoParam+0xb6>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b03      	cmp	r3, #3
 8005782:	d003      	beq.n	800578c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005784:	e018      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
      break;
 800578a:	e015      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
      break;
 800579c:	e00b      	b.n	80057b6 <DMA_CheckFifoParam+0xe6>
      break;
 800579e:	bf00      	nop
 80057a0:	e00a      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057a2:	bf00      	nop
 80057a4:	e008      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057a6:	bf00      	nop
 80057a8:	e006      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057aa:	bf00      	nop
 80057ac:	e004      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057ae:	bf00      	nop
 80057b0:	e002      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <DMA_CheckFifoParam+0xe8>
      break;
 80057b6:	bf00      	nop
    }
  } 
  
  return status; 
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop

080057c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b089      	sub	sp, #36	; 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	e16b      	b.n	8005abc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057e4:	2201      	movs	r2, #1
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4013      	ands	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	f040 815a 	bne.w	8005ab6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	2b01      	cmp	r3, #1
 800580c:	d005      	beq.n	800581a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005816:	2b02      	cmp	r3, #2
 8005818:	d130      	bne.n	800587c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	2203      	movs	r2, #3
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005850:	2201      	movs	r2, #1
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43db      	mvns	r3, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4013      	ands	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 0201 	and.w	r2, r3, #1
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	2b03      	cmp	r3, #3
 8005886:	d017      	beq.n	80058b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	2203      	movs	r2, #3
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	43db      	mvns	r3, r3
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	4013      	ands	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d123      	bne.n	800590c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	08da      	lsrs	r2, r3, #3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3208      	adds	r2, #8
 80058cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	220f      	movs	r2, #15
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	08da      	lsrs	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3208      	adds	r2, #8
 8005906:	69b9      	ldr	r1, [r7, #24]
 8005908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	2203      	movs	r2, #3
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4013      	ands	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 0203 	and.w	r2, r3, #3
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	4313      	orrs	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80b4 	beq.w	8005ab6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	4b60      	ldr	r3, [pc, #384]	; (8005ad4 <HAL_GPIO_Init+0x30c>)
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	4a5f      	ldr	r2, [pc, #380]	; (8005ad4 <HAL_GPIO_Init+0x30c>)
 8005958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800595c:	6453      	str	r3, [r2, #68]	; 0x44
 800595e:	4b5d      	ldr	r3, [pc, #372]	; (8005ad4 <HAL_GPIO_Init+0x30c>)
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800596a:	4a5b      	ldr	r2, [pc, #364]	; (8005ad8 <HAL_GPIO_Init+0x310>)
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	089b      	lsrs	r3, r3, #2
 8005970:	3302      	adds	r3, #2
 8005972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	220f      	movs	r2, #15
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4013      	ands	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a52      	ldr	r2, [pc, #328]	; (8005adc <HAL_GPIO_Init+0x314>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d02b      	beq.n	80059ee <HAL_GPIO_Init+0x226>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a51      	ldr	r2, [pc, #324]	; (8005ae0 <HAL_GPIO_Init+0x318>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d025      	beq.n	80059ea <HAL_GPIO_Init+0x222>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a50      	ldr	r2, [pc, #320]	; (8005ae4 <HAL_GPIO_Init+0x31c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01f      	beq.n	80059e6 <HAL_GPIO_Init+0x21e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a4f      	ldr	r2, [pc, #316]	; (8005ae8 <HAL_GPIO_Init+0x320>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d019      	beq.n	80059e2 <HAL_GPIO_Init+0x21a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a4e      	ldr	r2, [pc, #312]	; (8005aec <HAL_GPIO_Init+0x324>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <HAL_GPIO_Init+0x216>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a4d      	ldr	r2, [pc, #308]	; (8005af0 <HAL_GPIO_Init+0x328>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00d      	beq.n	80059da <HAL_GPIO_Init+0x212>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a4c      	ldr	r2, [pc, #304]	; (8005af4 <HAL_GPIO_Init+0x32c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <HAL_GPIO_Init+0x20e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a4b      	ldr	r2, [pc, #300]	; (8005af8 <HAL_GPIO_Init+0x330>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <HAL_GPIO_Init+0x20a>
 80059ce:	2307      	movs	r3, #7
 80059d0:	e00e      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059d2:	2308      	movs	r3, #8
 80059d4:	e00c      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059d6:	2306      	movs	r3, #6
 80059d8:	e00a      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059da:	2305      	movs	r3, #5
 80059dc:	e008      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059de:	2304      	movs	r3, #4
 80059e0:	e006      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059e2:	2303      	movs	r3, #3
 80059e4:	e004      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e002      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059ee:	2300      	movs	r3, #0
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	f002 0203 	and.w	r2, r2, #3
 80059f6:	0092      	lsls	r2, r2, #2
 80059f8:	4093      	lsls	r3, r2
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a00:	4935      	ldr	r1, [pc, #212]	; (8005ad8 <HAL_GPIO_Init+0x310>)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	089b      	lsrs	r3, r3, #2
 8005a06:	3302      	adds	r3, #2
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	; (8005afc <HAL_GPIO_Init+0x334>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a32:	4a32      	ldr	r2, [pc, #200]	; (8005afc <HAL_GPIO_Init+0x334>)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a38:	4b30      	ldr	r3, [pc, #192]	; (8005afc <HAL_GPIO_Init+0x334>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a5c:	4a27      	ldr	r2, [pc, #156]	; (8005afc <HAL_GPIO_Init+0x334>)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <HAL_GPIO_Init+0x334>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a86:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <HAL_GPIO_Init+0x334>)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <HAL_GPIO_Init+0x334>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ab0:	4a12      	ldr	r2, [pc, #72]	; (8005afc <HAL_GPIO_Init+0x334>)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b0f      	cmp	r3, #15
 8005ac0:	f67f ae90 	bls.w	80057e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	3724      	adds	r7, #36	; 0x24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40013800 	.word	0x40013800
 8005adc:	40020000 	.word	0x40020000
 8005ae0:	40020400 	.word	0x40020400
 8005ae4:	40020800 	.word	0x40020800
 8005ae8:	40020c00 	.word	0x40020c00
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40021400 	.word	0x40021400
 8005af4:	40021800 	.word	0x40021800
 8005af8:	40021c00 	.word	0x40021c00
 8005afc:	40013c00 	.word	0x40013c00

08005b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	807b      	strh	r3, [r7, #2]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b10:	787b      	ldrb	r3, [r7, #1]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b1c:	e003      	b.n	8005b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b1e:	887b      	ldrh	r3, [r7, #2]
 8005b20:	041a      	lsls	r2, r3, #16
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	619a      	str	r2, [r3, #24]
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e12b      	b.n	8005d9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fd fff6 	bl	8003b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b98:	f001 fbfa 	bl	8007390 <HAL_RCC_GetPCLK1Freq>
 8005b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	4a81      	ldr	r2, [pc, #516]	; (8005da8 <HAL_I2C_Init+0x274>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d807      	bhi.n	8005bb8 <HAL_I2C_Init+0x84>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a80      	ldr	r2, [pc, #512]	; (8005dac <HAL_I2C_Init+0x278>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	bf94      	ite	ls
 8005bb0:	2301      	movls	r3, #1
 8005bb2:	2300      	movhi	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	e006      	b.n	8005bc6 <HAL_I2C_Init+0x92>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a7d      	ldr	r2, [pc, #500]	; (8005db0 <HAL_I2C_Init+0x27c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	bf94      	ite	ls
 8005bc0:	2301      	movls	r3, #1
 8005bc2:	2300      	movhi	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e0e7      	b.n	8005d9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a78      	ldr	r2, [pc, #480]	; (8005db4 <HAL_I2C_Init+0x280>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	0c9b      	lsrs	r3, r3, #18
 8005bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a6a      	ldr	r2, [pc, #424]	; (8005da8 <HAL_I2C_Init+0x274>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d802      	bhi.n	8005c08 <HAL_I2C_Init+0xd4>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	3301      	adds	r3, #1
 8005c06:	e009      	b.n	8005c1c <HAL_I2C_Init+0xe8>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	4a69      	ldr	r2, [pc, #420]	; (8005db8 <HAL_I2C_Init+0x284>)
 8005c14:	fba2 2303 	umull	r2, r3, r2, r3
 8005c18:	099b      	lsrs	r3, r3, #6
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	495c      	ldr	r1, [pc, #368]	; (8005da8 <HAL_I2C_Init+0x274>)
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	d819      	bhi.n	8005c70 <HAL_I2C_Init+0x13c>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1e59      	subs	r1, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c4a:	1c59      	adds	r1, r3, #1
 8005c4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c50:	400b      	ands	r3, r1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <HAL_I2C_Init+0x138>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1e59      	subs	r1, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c64:	3301      	adds	r3, #1
 8005c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6a:	e051      	b.n	8005d10 <HAL_I2C_Init+0x1dc>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	e04f      	b.n	8005d10 <HAL_I2C_Init+0x1dc>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d111      	bne.n	8005c9c <HAL_I2C_Init+0x168>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	1e58      	subs	r0, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6859      	ldr	r1, [r3, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	440b      	add	r3, r1
 8005c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf0c      	ite	eq
 8005c94:	2301      	moveq	r3, #1
 8005c96:	2300      	movne	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	e012      	b.n	8005cc2 <HAL_I2C_Init+0x18e>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1e58      	subs	r0, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6859      	ldr	r1, [r3, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	0099      	lsls	r1, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bf0c      	ite	eq
 8005cbc:	2301      	moveq	r3, #1
 8005cbe:	2300      	movne	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_I2C_Init+0x196>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e022      	b.n	8005d10 <HAL_I2C_Init+0x1dc>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_I2C_Init+0x1bc>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1e58      	subs	r0, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6859      	ldr	r1, [r3, #4]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	440b      	add	r3, r1
 8005ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cee:	e00f      	b.n	8005d10 <HAL_I2C_Init+0x1dc>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	1e58      	subs	r0, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	0099      	lsls	r1, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d06:	3301      	adds	r3, #1
 8005d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	6809      	ldr	r1, [r1, #0]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69da      	ldr	r2, [r3, #28]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6911      	ldr	r1, [r2, #16]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68d2      	ldr	r2, [r2, #12]
 8005d4a:	4311      	orrs	r1, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695a      	ldr	r2, [r3, #20]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	000186a0 	.word	0x000186a0
 8005dac:	001e847f 	.word	0x001e847f
 8005db0:	003d08ff 	.word	0x003d08ff
 8005db4:	431bde83 	.word	0x431bde83
 8005db8:	10624dd3 	.word	0x10624dd3

08005dbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	460b      	mov	r3, r1
 8005dca:	817b      	strh	r3, [r7, #10]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dd0:	f7fe fa40 	bl	8004254 <HAL_GetTick>
 8005dd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	f040 80e0 	bne.w	8005fa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	2319      	movs	r3, #25
 8005dea:	2201      	movs	r2, #1
 8005dec:	4970      	ldr	r1, [pc, #448]	; (8005fb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fc58 	bl	80066a4 <I2C_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e0d3      	b.n	8005fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_I2C_Master_Transmit+0x50>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e0cc      	b.n	8005fa6 <HAL_I2C_Master_Transmit+0x1ea>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d007      	beq.n	8005e32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2221      	movs	r2, #33	; 0x21
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2210      	movs	r2, #16
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	893a      	ldrh	r2, [r7, #8]
 8005e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4a50      	ldr	r2, [pc, #320]	; (8005fb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e74:	8979      	ldrh	r1, [r7, #10]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	6a3a      	ldr	r2, [r7, #32]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fac2 	bl	8006404 <I2C_MasterRequestWrite>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e08d      	b.n	8005fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005ea0:	e066      	b.n	8005f70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	6a39      	ldr	r1, [r7, #32]
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 fcd2 	bl	8006850 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00d      	beq.n	8005ece <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d107      	bne.n	8005eca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e06b      	b.n	8005fa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d11b      	bne.n	8005f44 <HAL_I2C_Master_Transmit+0x188>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d017      	beq.n	8005f44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	6a39      	ldr	r1, [r7, #32]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fcc2 	bl	80068d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00d      	beq.n	8005f70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d107      	bne.n	8005f6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e01a      	b.n	8005fa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d194      	bne.n	8005ea2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	00100002 	.word	0x00100002
 8005fb4:	ffff0000 	.word	0xffff0000

08005fb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08c      	sub	sp, #48	; 0x30
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	817b      	strh	r3, [r7, #10]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fcc:	f7fe f942 	bl	8004254 <HAL_GetTick>
 8005fd0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	f040 820b 	bne.w	80063f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2319      	movs	r3, #25
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	497c      	ldr	r1, [pc, #496]	; (80061dc <HAL_I2C_Master_Receive+0x224>)
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fb5a 	bl	80066a4 <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e1fe      	b.n	80063f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_I2C_Master_Receive+0x50>
 8006004:	2302      	movs	r3, #2
 8006006:	e1f7      	b.n	80063f8 <HAL_I2C_Master_Receive+0x440>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	d007      	beq.n	800602e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f042 0201 	orr.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800603c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2222      	movs	r2, #34	; 0x22
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2210      	movs	r2, #16
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	893a      	ldrh	r2, [r7, #8]
 800605e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4a5c      	ldr	r2, [pc, #368]	; (80061e0 <HAL_I2C_Master_Receive+0x228>)
 800606e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006070:	8979      	ldrh	r1, [r7, #10]
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fa46 	bl	8006508 <I2C_MasterRequestRead>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e1b8      	b.n	80063f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608a:	2b00      	cmp	r3, #0
 800608c:	d113      	bne.n	80060b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608e:	2300      	movs	r3, #0
 8006090:	623b      	str	r3, [r7, #32]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	623b      	str	r3, [r7, #32]
 80060a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e18c      	b.n	80063d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d11b      	bne.n	80060f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e16c      	b.n	80063d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d11b      	bne.n	8006136 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800611c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611e:	2300      	movs	r3, #0
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	e14c      	b.n	80063d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800615c:	e138      	b.n	80063d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006162:	2b03      	cmp	r3, #3
 8006164:	f200 80f1 	bhi.w	800634a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616c:	2b01      	cmp	r3, #1
 800616e:	d123      	bne.n	80061b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006172:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fbed 	bl	8006954 <I2C_WaitOnRXNEFlagUntilTimeout>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e139      	b.n	80063f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061b6:	e10b      	b.n	80063d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d14e      	bne.n	800625e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	2200      	movs	r2, #0
 80061c8:	4906      	ldr	r1, [pc, #24]	; (80061e4 <HAL_I2C_Master_Receive+0x22c>)
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 fa6a 	bl	80066a4 <I2C_WaitOnFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d008      	beq.n	80061e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e10e      	b.n	80063f8 <HAL_I2C_Master_Receive+0x440>
 80061da:	bf00      	nop
 80061dc:	00100002 	.word	0x00100002
 80061e0:	ffff0000 	.word	0xffff0000
 80061e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800625c:	e0b8      	b.n	80063d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	2200      	movs	r2, #0
 8006266:	4966      	ldr	r1, [pc, #408]	; (8006400 <HAL_I2C_Master_Receive+0x448>)
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fa1b 	bl	80066a4 <I2C_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0bf      	b.n	80063f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	2200      	movs	r2, #0
 80062c2:	494f      	ldr	r1, [pc, #316]	; (8006400 <HAL_I2C_Master_Receive+0x448>)
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f9ed 	bl	80066a4 <I2C_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e091      	b.n	80063f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006348:	e042      	b.n	80063d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fb00 	bl	8006954 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e04c      	b.n	80063f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b04      	cmp	r3, #4
 800639c:	d118      	bne.n	80063d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f47f aec2 	bne.w	800615e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e000      	b.n	80063f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063f6:	2302      	movs	r3, #2
  }
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3728      	adds	r7, #40	; 0x28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	00010004 	.word	0x00010004

08006404 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	460b      	mov	r3, r1
 8006412:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b08      	cmp	r3, #8
 800641e:	d006      	beq.n	800642e <I2C_MasterRequestWrite+0x2a>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d003      	beq.n	800642e <I2C_MasterRequestWrite+0x2a>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800642c:	d108      	bne.n	8006440 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e00b      	b.n	8006458 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	2b12      	cmp	r3, #18
 8006446:	d107      	bne.n	8006458 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006456:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f91d 	bl	80066a4 <I2C_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00d      	beq.n	800648c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647e:	d103      	bne.n	8006488 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e035      	b.n	80064f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006494:	d108      	bne.n	80064a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006496:	897b      	ldrh	r3, [r7, #10]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064a4:	611a      	str	r2, [r3, #16]
 80064a6:	e01b      	b.n	80064e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064a8:	897b      	ldrh	r3, [r7, #10]
 80064aa:	11db      	asrs	r3, r3, #7
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	f003 0306 	and.w	r3, r3, #6
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f063 030f 	orn	r3, r3, #15
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	490e      	ldr	r1, [pc, #56]	; (8006500 <I2C_MasterRequestWrite+0xfc>)
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f943 	bl	8006752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e010      	b.n	80064f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064d6:	897b      	ldrh	r3, [r7, #10]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	4907      	ldr	r1, [pc, #28]	; (8006504 <I2C_MasterRequestWrite+0x100>)
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f933 	bl	8006752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	00010008 	.word	0x00010008
 8006504:	00010002 	.word	0x00010002

08006508 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	607a      	str	r2, [r7, #4]
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	460b      	mov	r3, r1
 8006516:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800652c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b08      	cmp	r3, #8
 8006532:	d006      	beq.n	8006542 <I2C_MasterRequestRead+0x3a>
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d003      	beq.n	8006542 <I2C_MasterRequestRead+0x3a>
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006540:	d108      	bne.n	8006554 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e00b      	b.n	800656c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	2b11      	cmp	r3, #17
 800655a:	d107      	bne.n	800656c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800656a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f893 	bl	80066a4 <I2C_WaitOnFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006592:	d103      	bne.n	800659c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800659a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e079      	b.n	8006694 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a8:	d108      	bne.n	80065bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065aa:	897b      	ldrh	r3, [r7, #10]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	611a      	str	r2, [r3, #16]
 80065ba:	e05f      	b.n	800667c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065bc:	897b      	ldrh	r3, [r7, #10]
 80065be:	11db      	asrs	r3, r3, #7
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f003 0306 	and.w	r3, r3, #6
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f063 030f 	orn	r3, r3, #15
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4930      	ldr	r1, [pc, #192]	; (800669c <I2C_MasterRequestRead+0x194>)
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f8b9 	bl	8006752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e054      	b.n	8006694 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065ea:	897b      	ldrh	r3, [r7, #10]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4929      	ldr	r1, [pc, #164]	; (80066a0 <I2C_MasterRequestRead+0x198>)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f8a9 	bl	8006752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e044      	b.n	8006694 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f831 	bl	80066a4 <I2C_WaitOnFlagUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006656:	d103      	bne.n	8006660 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e017      	b.n	8006694 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006664:	897b      	ldrh	r3, [r7, #10]
 8006666:	11db      	asrs	r3, r3, #7
 8006668:	b2db      	uxtb	r3, r3
 800666a:	f003 0306 	and.w	r3, r3, #6
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f063 030e 	orn	r3, r3, #14
 8006674:	b2da      	uxtb	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	4907      	ldr	r1, [pc, #28]	; (80066a0 <I2C_MasterRequestRead+0x198>)
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 f865 	bl	8006752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	00010008 	.word	0x00010008
 80066a0:	00010002 	.word	0x00010002

080066a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	4613      	mov	r3, r2
 80066b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066b4:	e025      	b.n	8006702 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d021      	beq.n	8006702 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066be:	f7fd fdc9 	bl	8004254 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d302      	bcc.n	80066d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d116      	bne.n	8006702 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f043 0220 	orr.w	r2, r3, #32
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e023      	b.n	800674a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	0c1b      	lsrs	r3, r3, #16
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d10d      	bne.n	8006728 <I2C_WaitOnFlagUntilTimeout+0x84>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	43da      	mvns	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4013      	ands	r3, r2
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf0c      	ite	eq
 800671e:	2301      	moveq	r3, #1
 8006720:	2300      	movne	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	e00c      	b.n	8006742 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	43da      	mvns	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4013      	ands	r3, r2
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	bf0c      	ite	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	2300      	movne	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	429a      	cmp	r2, r3
 8006746:	d0b6      	beq.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006760:	e051      	b.n	8006806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006770:	d123      	bne.n	80067ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006780:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800678a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	f043 0204 	orr.w	r2, r3, #4
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e046      	b.n	8006848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c0:	d021      	beq.n	8006806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	f7fd fd47 	bl	8004254 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d302      	bcc.n	80067d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d116      	bne.n	8006806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e020      	b.n	8006848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	0c1b      	lsrs	r3, r3, #16
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	d10c      	bne.n	800682a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	43da      	mvns	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4013      	ands	r3, r2
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	bf14      	ite	ne
 8006822:	2301      	movne	r3, #1
 8006824:	2300      	moveq	r3, #0
 8006826:	b2db      	uxtb	r3, r3
 8006828:	e00b      	b.n	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	43da      	mvns	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4013      	ands	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	bf14      	ite	ne
 800683c:	2301      	movne	r3, #1
 800683e:	2300      	moveq	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d18d      	bne.n	8006762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800685c:	e02d      	b.n	80068ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 f8ce 	bl	8006a00 <I2C_IsAcknowledgeFailed>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e02d      	b.n	80068ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d021      	beq.n	80068ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006876:	f7fd fced 	bl	8004254 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	429a      	cmp	r2, r3
 8006884:	d302      	bcc.n	800688c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d116      	bne.n	80068ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	f043 0220 	orr.w	r2, r3, #32
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e007      	b.n	80068ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c4:	2b80      	cmp	r3, #128	; 0x80
 80068c6:	d1ca      	bne.n	800685e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068de:	e02d      	b.n	800693c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 f88d 	bl	8006a00 <I2C_IsAcknowledgeFailed>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e02d      	b.n	800694c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d021      	beq.n	800693c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f8:	f7fd fcac 	bl	8004254 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	429a      	cmp	r2, r3
 8006906:	d302      	bcc.n	800690e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d116      	bne.n	800693c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e007      	b.n	800694c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b04      	cmp	r3, #4
 8006948:	d1ca      	bne.n	80068e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006960:	e042      	b.n	80069e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b10      	cmp	r3, #16
 800696e:	d119      	bne.n	80069a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0210 	mvn.w	r2, #16
 8006978:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e029      	b.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069a4:	f7fd fc56 	bl	8004254 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d302      	bcc.n	80069ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d116      	bne.n	80069e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	f043 0220 	orr.w	r2, r3, #32
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e007      	b.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	d1b5      	bne.n	8006962 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a16:	d11b      	bne.n	8006a50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	f043 0204 	orr.w	r2, r3, #4
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
	...

08006a60 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006a66:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <HAL_PWR_EnableBkUpAccess+0x24>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006a72:	687b      	ldr	r3, [r7, #4]
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	420e0020 	.word	0x420e0020
 8006a84:	40007000 	.word	0x40007000

08006a88 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006a8e:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <HAL_PWR_DisableBkUpAccess+0x24>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006a9a:	687b      	ldr	r3, [r7, #4]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	420e0020 	.word	0x420e0020
 8006aac:	40007000 	.word	0x40007000

08006ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e267      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d075      	beq.n	8006bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ace:	4b88      	ldr	r3, [pc, #544]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 030c 	and.w	r3, r3, #12
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d00c      	beq.n	8006af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ada:	4b85      	ldr	r3, [pc, #532]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d112      	bne.n	8006b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ae6:	4b82      	ldr	r3, [pc, #520]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006af2:	d10b      	bne.n	8006b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af4:	4b7e      	ldr	r3, [pc, #504]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d05b      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x108>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d157      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e242      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b14:	d106      	bne.n	8006b24 <HAL_RCC_OscConfig+0x74>
 8006b16:	4b76      	ldr	r3, [pc, #472]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a75      	ldr	r2, [pc, #468]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	e01d      	b.n	8006b60 <HAL_RCC_OscConfig+0xb0>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b2c:	d10c      	bne.n	8006b48 <HAL_RCC_OscConfig+0x98>
 8006b2e:	4b70      	ldr	r3, [pc, #448]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a6f      	ldr	r2, [pc, #444]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	4b6d      	ldr	r3, [pc, #436]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a6c      	ldr	r2, [pc, #432]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	e00b      	b.n	8006b60 <HAL_RCC_OscConfig+0xb0>
 8006b48:	4b69      	ldr	r3, [pc, #420]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a68      	ldr	r2, [pc, #416]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	4b66      	ldr	r3, [pc, #408]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a65      	ldr	r2, [pc, #404]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d013      	beq.n	8006b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b68:	f7fd fb74 	bl	8004254 <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b70:	f7fd fb70 	bl	8004254 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b64      	cmp	r3, #100	; 0x64
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e207      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b82:	4b5b      	ldr	r3, [pc, #364]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0f0      	beq.n	8006b70 <HAL_RCC_OscConfig+0xc0>
 8006b8e:	e014      	b.n	8006bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b90:	f7fd fb60 	bl	8004254 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b98:	f7fd fb5c 	bl	8004254 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b64      	cmp	r3, #100	; 0x64
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e1f3      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006baa:	4b51      	ldr	r3, [pc, #324]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f0      	bne.n	8006b98 <HAL_RCC_OscConfig+0xe8>
 8006bb6:	e000      	b.n	8006bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d063      	beq.n	8006c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bc6:	4b4a      	ldr	r3, [pc, #296]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 030c 	and.w	r3, r3, #12
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00b      	beq.n	8006bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bd2:	4b47      	ldr	r3, [pc, #284]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d11c      	bne.n	8006c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bde:	4b44      	ldr	r3, [pc, #272]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d116      	bne.n	8006c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bea:	4b41      	ldr	r3, [pc, #260]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <HAL_RCC_OscConfig+0x152>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d001      	beq.n	8006c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e1c7      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c02:	4b3b      	ldr	r3, [pc, #236]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4937      	ldr	r1, [pc, #220]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c16:	e03a      	b.n	8006c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d020      	beq.n	8006c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c20:	4b34      	ldr	r3, [pc, #208]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c22:	2201      	movs	r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c26:	f7fd fb15 	bl	8004254 <HAL_GetTick>
 8006c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c2e:	f7fd fb11 	bl	8004254 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e1a8      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c40:	4b2b      	ldr	r3, [pc, #172]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0f0      	beq.n	8006c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4c:	4b28      	ldr	r3, [pc, #160]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4925      	ldr	r1, [pc, #148]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	600b      	str	r3, [r1, #0]
 8006c60:	e015      	b.n	8006c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c62:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <HAL_RCC_OscConfig+0x244>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c68:	f7fd faf4 	bl	8004254 <HAL_GetTick>
 8006c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c70:	f7fd faf0 	bl	8004254 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e187      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c82:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f0      	bne.n	8006c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d036      	beq.n	8006d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d016      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ca2:	4b15      	ldr	r3, [pc, #84]	; (8006cf8 <HAL_RCC_OscConfig+0x248>)
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca8:	f7fd fad4 	bl	8004254 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cb0:	f7fd fad0 	bl	8004254 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e167      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cc2:	4b0b      	ldr	r3, [pc, #44]	; (8006cf0 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x200>
 8006cce:	e01b      	b.n	8006d08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cd0:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <HAL_RCC_OscConfig+0x248>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cd6:	f7fd fabd 	bl	8004254 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cdc:	e00e      	b.n	8006cfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cde:	f7fd fab9 	bl	8004254 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d907      	bls.n	8006cfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e150      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	42470000 	.word	0x42470000
 8006cf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cfc:	4b88      	ldr	r3, [pc, #544]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1ea      	bne.n	8006cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 8097 	beq.w	8006e44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d16:	2300      	movs	r3, #0
 8006d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d1a:	4b81      	ldr	r3, [pc, #516]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10f      	bne.n	8006d46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	4b7d      	ldr	r3, [pc, #500]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	4a7c      	ldr	r2, [pc, #496]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d34:	6413      	str	r3, [r2, #64]	; 0x40
 8006d36:	4b7a      	ldr	r3, [pc, #488]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d42:	2301      	movs	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d46:	4b77      	ldr	r3, [pc, #476]	; (8006f24 <HAL_RCC_OscConfig+0x474>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d118      	bne.n	8006d84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d52:	4b74      	ldr	r3, [pc, #464]	; (8006f24 <HAL_RCC_OscConfig+0x474>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a73      	ldr	r2, [pc, #460]	; (8006f24 <HAL_RCC_OscConfig+0x474>)
 8006d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d5e:	f7fd fa79 	bl	8004254 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d66:	f7fd fa75 	bl	8004254 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e10c      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d78:	4b6a      	ldr	r3, [pc, #424]	; (8006f24 <HAL_RCC_OscConfig+0x474>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d106      	bne.n	8006d9a <HAL_RCC_OscConfig+0x2ea>
 8006d8c:	4b64      	ldr	r3, [pc, #400]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d90:	4a63      	ldr	r2, [pc, #396]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	6713      	str	r3, [r2, #112]	; 0x70
 8006d98:	e01c      	b.n	8006dd4 <HAL_RCC_OscConfig+0x324>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2b05      	cmp	r3, #5
 8006da0:	d10c      	bne.n	8006dbc <HAL_RCC_OscConfig+0x30c>
 8006da2:	4b5f      	ldr	r3, [pc, #380]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	4a5e      	ldr	r2, [pc, #376]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006da8:	f043 0304 	orr.w	r3, r3, #4
 8006dac:	6713      	str	r3, [r2, #112]	; 0x70
 8006dae:	4b5c      	ldr	r3, [pc, #368]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	4a5b      	ldr	r2, [pc, #364]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006db4:	f043 0301 	orr.w	r3, r3, #1
 8006db8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dba:	e00b      	b.n	8006dd4 <HAL_RCC_OscConfig+0x324>
 8006dbc:	4b58      	ldr	r3, [pc, #352]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc0:	4a57      	ldr	r2, [pc, #348]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc8:	4b55      	ldr	r3, [pc, #340]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	4a54      	ldr	r2, [pc, #336]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006dce:	f023 0304 	bic.w	r3, r3, #4
 8006dd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d015      	beq.n	8006e08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ddc:	f7fd fa3a 	bl	8004254 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de2:	e00a      	b.n	8006dfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006de4:	f7fd fa36 	bl	8004254 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e0cb      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dfa:	4b49      	ldr	r3, [pc, #292]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0ee      	beq.n	8006de4 <HAL_RCC_OscConfig+0x334>
 8006e06:	e014      	b.n	8006e32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e08:	f7fd fa24 	bl	8004254 <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e0e:	e00a      	b.n	8006e26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e10:	f7fd fa20 	bl	8004254 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e0b5      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e26:	4b3e      	ldr	r3, [pc, #248]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1ee      	bne.n	8006e10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d105      	bne.n	8006e44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e38:	4b39      	ldr	r3, [pc, #228]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	4a38      	ldr	r2, [pc, #224]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80a1 	beq.w	8006f90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e4e:	4b34      	ldr	r3, [pc, #208]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 030c 	and.w	r3, r3, #12
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d05c      	beq.n	8006f14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d141      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e62:	4b31      	ldr	r3, [pc, #196]	; (8006f28 <HAL_RCC_OscConfig+0x478>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e68:	f7fd f9f4 	bl	8004254 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e70:	f7fd f9f0 	bl	8004254 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e087      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e82:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69da      	ldr	r2, [r3, #28]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	019b      	lsls	r3, r3, #6
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	041b      	lsls	r3, r3, #16
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	061b      	lsls	r3, r3, #24
 8006eb2:	491b      	ldr	r1, [pc, #108]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eb8:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <HAL_RCC_OscConfig+0x478>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebe:	f7fd f9c9 	bl	8004254 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec6:	f7fd f9c5 	bl	8004254 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e05c      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed8:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f0      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x416>
 8006ee4:	e054      	b.n	8006f90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee6:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <HAL_RCC_OscConfig+0x478>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eec:	f7fd f9b2 	bl	8004254 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ef4:	f7fd f9ae 	bl	8004254 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e045      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCC_OscConfig+0x470>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f0      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x444>
 8006f12:	e03d      	b.n	8006f90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d107      	bne.n	8006f2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e038      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40007000 	.word	0x40007000
 8006f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f2c:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <HAL_RCC_OscConfig+0x4ec>)
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d028      	beq.n	8006f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d121      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d11a      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d111      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	3b01      	subs	r3, #1
 8006f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d107      	bne.n	8006f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d001      	beq.n	8006f90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40023800 	.word	0x40023800

08006fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e0cc      	b.n	800714e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb4:	4b68      	ldr	r3, [pc, #416]	; (8007158 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d90c      	bls.n	8006fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc2:	4b65      	ldr	r3, [pc, #404]	; (8007158 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fca:	4b63      	ldr	r3, [pc, #396]	; (8007158 <HAL_RCC_ClockConfig+0x1b8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0b8      	b.n	800714e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d020      	beq.n	800702a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ff4:	4b59      	ldr	r3, [pc, #356]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	4a58      	ldr	r2, [pc, #352]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8006ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ffe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800700c:	4b53      	ldr	r3, [pc, #332]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	4a52      	ldr	r2, [pc, #328]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007018:	4b50      	ldr	r3, [pc, #320]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	494d      	ldr	r1, [pc, #308]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8007026:	4313      	orrs	r3, r2
 8007028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d044      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d107      	bne.n	800704e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703e:	4b47      	ldr	r3, [pc, #284]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d119      	bne.n	800707e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e07f      	b.n	800714e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d003      	beq.n	800705e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800705a:	2b03      	cmp	r3, #3
 800705c:	d107      	bne.n	800706e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800705e:	4b3f      	ldr	r3, [pc, #252]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d109      	bne.n	800707e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e06f      	b.n	800714e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800706e:	4b3b      	ldr	r3, [pc, #236]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e067      	b.n	800714e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800707e:	4b37      	ldr	r3, [pc, #220]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f023 0203 	bic.w	r2, r3, #3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	4934      	ldr	r1, [pc, #208]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 800708c:	4313      	orrs	r3, r2
 800708e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007090:	f7fd f8e0 	bl	8004254 <HAL_GetTick>
 8007094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007096:	e00a      	b.n	80070ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007098:	f7fd f8dc 	bl	8004254 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e04f      	b.n	800714e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ae:	4b2b      	ldr	r3, [pc, #172]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 020c 	and.w	r2, r3, #12
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	429a      	cmp	r2, r3
 80070be:	d1eb      	bne.n	8007098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070c0:	4b25      	ldr	r3, [pc, #148]	; (8007158 <HAL_RCC_ClockConfig+0x1b8>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d20c      	bcs.n	80070e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ce:	4b22      	ldr	r3, [pc, #136]	; (8007158 <HAL_RCC_ClockConfig+0x1b8>)
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070d6:	4b20      	ldr	r3, [pc, #128]	; (8007158 <HAL_RCC_ClockConfig+0x1b8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d001      	beq.n	80070e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e032      	b.n	800714e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070f4:	4b19      	ldr	r3, [pc, #100]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4916      	ldr	r1, [pc, #88]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	4313      	orrs	r3, r2
 8007104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007112:	4b12      	ldr	r3, [pc, #72]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	490e      	ldr	r1, [pc, #56]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 8007122:	4313      	orrs	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007126:	f000 f821 	bl	800716c <HAL_RCC_GetSysClockFreq>
 800712a:	4602      	mov	r2, r0
 800712c:	4b0b      	ldr	r3, [pc, #44]	; (800715c <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	091b      	lsrs	r3, r3, #4
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	490a      	ldr	r1, [pc, #40]	; (8007160 <HAL_RCC_ClockConfig+0x1c0>)
 8007138:	5ccb      	ldrb	r3, [r1, r3]
 800713a:	fa22 f303 	lsr.w	r3, r2, r3
 800713e:	4a09      	ldr	r2, [pc, #36]	; (8007164 <HAL_RCC_ClockConfig+0x1c4>)
 8007140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007142:	4b09      	ldr	r3, [pc, #36]	; (8007168 <HAL_RCC_ClockConfig+0x1c8>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f7fc ff18 	bl	8003f7c <HAL_InitTick>

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40023c00 	.word	0x40023c00
 800715c:	40023800 	.word	0x40023800
 8007160:	0800e388 	.word	0x0800e388
 8007164:	20000014 	.word	0x20000014
 8007168:	20000018 	.word	0x20000018

0800716c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800716c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007170:	b094      	sub	sp, #80	; 0x50
 8007172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	647b      	str	r3, [r7, #68]	; 0x44
 8007178:	2300      	movs	r3, #0
 800717a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800717c:	2300      	movs	r3, #0
 800717e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007184:	4b79      	ldr	r3, [pc, #484]	; (800736c <HAL_RCC_GetSysClockFreq+0x200>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 030c 	and.w	r3, r3, #12
 800718c:	2b08      	cmp	r3, #8
 800718e:	d00d      	beq.n	80071ac <HAL_RCC_GetSysClockFreq+0x40>
 8007190:	2b08      	cmp	r3, #8
 8007192:	f200 80e1 	bhi.w	8007358 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <HAL_RCC_GetSysClockFreq+0x34>
 800719a:	2b04      	cmp	r3, #4
 800719c:	d003      	beq.n	80071a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800719e:	e0db      	b.n	8007358 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071a0:	4b73      	ldr	r3, [pc, #460]	; (8007370 <HAL_RCC_GetSysClockFreq+0x204>)
 80071a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80071a4:	e0db      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071a6:	4b73      	ldr	r3, [pc, #460]	; (8007374 <HAL_RCC_GetSysClockFreq+0x208>)
 80071a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071aa:	e0d8      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071ac:	4b6f      	ldr	r3, [pc, #444]	; (800736c <HAL_RCC_GetSysClockFreq+0x200>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071b6:	4b6d      	ldr	r3, [pc, #436]	; (800736c <HAL_RCC_GetSysClockFreq+0x200>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d063      	beq.n	800728a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071c2:	4b6a      	ldr	r3, [pc, #424]	; (800736c <HAL_RCC_GetSysClockFreq+0x200>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	099b      	lsrs	r3, r3, #6
 80071c8:	2200      	movs	r2, #0
 80071ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80071cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d4:	633b      	str	r3, [r7, #48]	; 0x30
 80071d6:	2300      	movs	r3, #0
 80071d8:	637b      	str	r3, [r7, #52]	; 0x34
 80071da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80071de:	4622      	mov	r2, r4
 80071e0:	462b      	mov	r3, r5
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f04f 0100 	mov.w	r1, #0
 80071ea:	0159      	lsls	r1, r3, #5
 80071ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071f0:	0150      	lsls	r0, r2, #5
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	4621      	mov	r1, r4
 80071f8:	1a51      	subs	r1, r2, r1
 80071fa:	6139      	str	r1, [r7, #16]
 80071fc:	4629      	mov	r1, r5
 80071fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007210:	4659      	mov	r1, fp
 8007212:	018b      	lsls	r3, r1, #6
 8007214:	4651      	mov	r1, sl
 8007216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800721a:	4651      	mov	r1, sl
 800721c:	018a      	lsls	r2, r1, #6
 800721e:	4651      	mov	r1, sl
 8007220:	ebb2 0801 	subs.w	r8, r2, r1
 8007224:	4659      	mov	r1, fp
 8007226:	eb63 0901 	sbc.w	r9, r3, r1
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800723a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800723e:	4690      	mov	r8, r2
 8007240:	4699      	mov	r9, r3
 8007242:	4623      	mov	r3, r4
 8007244:	eb18 0303 	adds.w	r3, r8, r3
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	462b      	mov	r3, r5
 800724c:	eb49 0303 	adc.w	r3, r9, r3
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800725e:	4629      	mov	r1, r5
 8007260:	024b      	lsls	r3, r1, #9
 8007262:	4621      	mov	r1, r4
 8007264:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007268:	4621      	mov	r1, r4
 800726a:	024a      	lsls	r2, r1, #9
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007272:	2200      	movs	r2, #0
 8007274:	62bb      	str	r3, [r7, #40]	; 0x28
 8007276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007278:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800727c:	f7f9 fcfc 	bl	8000c78 <__aeabi_uldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4613      	mov	r3, r2
 8007286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007288:	e058      	b.n	800733c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800728a:	4b38      	ldr	r3, [pc, #224]	; (800736c <HAL_RCC_GetSysClockFreq+0x200>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	099b      	lsrs	r3, r3, #6
 8007290:	2200      	movs	r2, #0
 8007292:	4618      	mov	r0, r3
 8007294:	4611      	mov	r1, r2
 8007296:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800729a:	623b      	str	r3, [r7, #32]
 800729c:	2300      	movs	r3, #0
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
 80072a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80072a4:	4642      	mov	r2, r8
 80072a6:	464b      	mov	r3, r9
 80072a8:	f04f 0000 	mov.w	r0, #0
 80072ac:	f04f 0100 	mov.w	r1, #0
 80072b0:	0159      	lsls	r1, r3, #5
 80072b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072b6:	0150      	lsls	r0, r2, #5
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4641      	mov	r1, r8
 80072be:	ebb2 0a01 	subs.w	sl, r2, r1
 80072c2:	4649      	mov	r1, r9
 80072c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	f04f 0300 	mov.w	r3, #0
 80072d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072dc:	ebb2 040a 	subs.w	r4, r2, sl
 80072e0:	eb63 050b 	sbc.w	r5, r3, fp
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	00eb      	lsls	r3, r5, #3
 80072ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072f2:	00e2      	lsls	r2, r4, #3
 80072f4:	4614      	mov	r4, r2
 80072f6:	461d      	mov	r5, r3
 80072f8:	4643      	mov	r3, r8
 80072fa:	18e3      	adds	r3, r4, r3
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	464b      	mov	r3, r9
 8007300:	eb45 0303 	adc.w	r3, r5, r3
 8007304:	607b      	str	r3, [r7, #4]
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007312:	4629      	mov	r1, r5
 8007314:	028b      	lsls	r3, r1, #10
 8007316:	4621      	mov	r1, r4
 8007318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800731c:	4621      	mov	r1, r4
 800731e:	028a      	lsls	r2, r1, #10
 8007320:	4610      	mov	r0, r2
 8007322:	4619      	mov	r1, r3
 8007324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007326:	2200      	movs	r2, #0
 8007328:	61bb      	str	r3, [r7, #24]
 800732a:	61fa      	str	r2, [r7, #28]
 800732c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007330:	f7f9 fca2 	bl	8000c78 <__aeabi_uldivmod>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4613      	mov	r3, r2
 800733a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800733c:	4b0b      	ldr	r3, [pc, #44]	; (800736c <HAL_RCC_GetSysClockFreq+0x200>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	0c1b      	lsrs	r3, r3, #16
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	3301      	adds	r3, #1
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800734c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800734e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007356:	e002      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <HAL_RCC_GetSysClockFreq+0x204>)
 800735a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800735c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800735e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007360:	4618      	mov	r0, r3
 8007362:	3750      	adds	r7, #80	; 0x50
 8007364:	46bd      	mov	sp, r7
 8007366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800736a:	bf00      	nop
 800736c:	40023800 	.word	0x40023800
 8007370:	00f42400 	.word	0x00f42400
 8007374:	007a1200 	.word	0x007a1200

08007378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800737c:	4b03      	ldr	r3, [pc, #12]	; (800738c <HAL_RCC_GetHCLKFreq+0x14>)
 800737e:	681b      	ldr	r3, [r3, #0]
}
 8007380:	4618      	mov	r0, r3
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20000014 	.word	0x20000014

08007390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007394:	f7ff fff0 	bl	8007378 <HAL_RCC_GetHCLKFreq>
 8007398:	4602      	mov	r2, r0
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	0a9b      	lsrs	r3, r3, #10
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	4903      	ldr	r1, [pc, #12]	; (80073b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073a6:	5ccb      	ldrb	r3, [r1, r3]
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	40023800 	.word	0x40023800
 80073b4:	0800e398 	.word	0x0800e398

080073b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073bc:	f7ff ffdc 	bl	8007378 <HAL_RCC_GetHCLKFreq>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	0b5b      	lsrs	r3, r3, #13
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4903      	ldr	r1, [pc, #12]	; (80073dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073ce:	5ccb      	ldrb	r3, [r1, r3]
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	40023800 	.word	0x40023800
 80073dc:	0800e398 	.word	0x0800e398

080073e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	220f      	movs	r2, #15
 80073ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073f0:	4b12      	ldr	r3, [pc, #72]	; (800743c <HAL_RCC_GetClockConfig+0x5c>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0203 	and.w	r2, r3, #3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073fc:	4b0f      	ldr	r3, [pc, #60]	; (800743c <HAL_RCC_GetClockConfig+0x5c>)
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <HAL_RCC_GetClockConfig+0x5c>)
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007414:	4b09      	ldr	r3, [pc, #36]	; (800743c <HAL_RCC_GetClockConfig+0x5c>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	08db      	lsrs	r3, r3, #3
 800741a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007422:	4b07      	ldr	r3, [pc, #28]	; (8007440 <HAL_RCC_GetClockConfig+0x60>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0207 	and.w	r2, r3, #7
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	601a      	str	r2, [r3, #0]
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40023800 	.word	0x40023800
 8007440:	40023c00 	.word	0x40023c00

08007444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e041      	b.n	80074da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fc fbb6 	bl	8003bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f000 ffba 	bl	80083fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d001      	beq.n	80074fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e04e      	b.n	800759a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0201 	orr.w	r2, r2, #1
 8007512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a23      	ldr	r2, [pc, #140]	; (80075a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d022      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007526:	d01d      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <HAL_TIM_Base_Start_IT+0xc8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d018      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1e      	ldr	r2, [pc, #120]	; (80075b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d013      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1c      	ldr	r2, [pc, #112]	; (80075b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d00e      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1b      	ldr	r2, [pc, #108]	; (80075b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d009      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a19      	ldr	r2, [pc, #100]	; (80075bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a18      	ldr	r2, [pc, #96]	; (80075c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d111      	bne.n	8007588 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b06      	cmp	r3, #6
 8007574:	d010      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0201 	orr.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007586:	e007      	b.n	8007598 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0201 	orr.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40010000 	.word	0x40010000
 80075ac:	40000400 	.word	0x40000400
 80075b0:	40000800 	.word	0x40000800
 80075b4:	40000c00 	.word	0x40000c00
 80075b8:	40010400 	.word	0x40010400
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40001800 	.word	0x40001800

080075c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e041      	b.n	800765a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f839 	bl	8007662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f000 fefa 	bl	80083fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
	...

08007678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d109      	bne.n	800769c <HAL_TIM_PWM_Start+0x24>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	bf14      	ite	ne
 8007694:	2301      	movne	r3, #1
 8007696:	2300      	moveq	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	e022      	b.n	80076e2 <HAL_TIM_PWM_Start+0x6a>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d109      	bne.n	80076b6 <HAL_TIM_PWM_Start+0x3e>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	bf14      	ite	ne
 80076ae:	2301      	movne	r3, #1
 80076b0:	2300      	moveq	r3, #0
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	e015      	b.n	80076e2 <HAL_TIM_PWM_Start+0x6a>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d109      	bne.n	80076d0 <HAL_TIM_PWM_Start+0x58>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	bf14      	ite	ne
 80076c8:	2301      	movne	r3, #1
 80076ca:	2300      	moveq	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	e008      	b.n	80076e2 <HAL_TIM_PWM_Start+0x6a>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	bf14      	ite	ne
 80076dc:	2301      	movne	r3, #1
 80076de:	2300      	moveq	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e07c      	b.n	80077e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d104      	bne.n	80076fa <HAL_TIM_PWM_Start+0x82>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076f8:	e013      	b.n	8007722 <HAL_TIM_PWM_Start+0xaa>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start+0x92>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007708:	e00b      	b.n	8007722 <HAL_TIM_PWM_Start+0xaa>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b08      	cmp	r3, #8
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start+0xa2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007718:	e003      	b.n	8007722 <HAL_TIM_PWM_Start+0xaa>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2202      	movs	r2, #2
 800771e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2201      	movs	r2, #1
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f001 fa7a 	bl	8008c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a2d      	ldr	r2, [pc, #180]	; (80077ec <HAL_TIM_PWM_Start+0x174>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_TIM_PWM_Start+0xcc>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a2c      	ldr	r2, [pc, #176]	; (80077f0 <HAL_TIM_PWM_Start+0x178>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d101      	bne.n	8007748 <HAL_TIM_PWM_Start+0xd0>
 8007744:	2301      	movs	r3, #1
 8007746:	e000      	b.n	800774a <HAL_TIM_PWM_Start+0xd2>
 8007748:	2300      	movs	r3, #0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d007      	beq.n	800775e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800775c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a22      	ldr	r2, [pc, #136]	; (80077ec <HAL_TIM_PWM_Start+0x174>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d022      	beq.n	80077ae <HAL_TIM_PWM_Start+0x136>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007770:	d01d      	beq.n	80077ae <HAL_TIM_PWM_Start+0x136>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1f      	ldr	r2, [pc, #124]	; (80077f4 <HAL_TIM_PWM_Start+0x17c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <HAL_TIM_PWM_Start+0x136>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1d      	ldr	r2, [pc, #116]	; (80077f8 <HAL_TIM_PWM_Start+0x180>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_TIM_PWM_Start+0x136>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <HAL_TIM_PWM_Start+0x184>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_TIM_PWM_Start+0x136>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <HAL_TIM_PWM_Start+0x178>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_TIM_PWM_Start+0x136>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a18      	ldr	r2, [pc, #96]	; (8007800 <HAL_TIM_PWM_Start+0x188>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_TIM_PWM_Start+0x136>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a16      	ldr	r2, [pc, #88]	; (8007804 <HAL_TIM_PWM_Start+0x18c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d111      	bne.n	80077d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b06      	cmp	r3, #6
 80077be:	d010      	beq.n	80077e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d0:	e007      	b.n	80077e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f042 0201 	orr.w	r2, r2, #1
 80077e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40010400 	.word	0x40010400
 80077f4:	40000400 	.word	0x40000400
 80077f8:	40000800 	.word	0x40000800
 80077fc:	40000c00 	.word	0x40000c00
 8007800:	40014000 	.word	0x40014000
 8007804:	40001800 	.word	0x40001800

08007808 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e041      	b.n	800789e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f839 	bl	80078a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f000 fdd8 	bl	80083fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
	...

080078bc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_IC_Start+0x1a>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	e013      	b.n	80078fe <HAL_TIM_IC_Start+0x42>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_IC_Start+0x2a>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	e00b      	b.n	80078fe <HAL_TIM_IC_Start+0x42>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d104      	bne.n	80078f6 <HAL_TIM_IC_Start+0x3a>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	e003      	b.n	80078fe <HAL_TIM_IC_Start+0x42>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d104      	bne.n	8007910 <HAL_TIM_IC_Start+0x54>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800790c:	b2db      	uxtb	r3, r3
 800790e:	e013      	b.n	8007938 <HAL_TIM_IC_Start+0x7c>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b04      	cmp	r3, #4
 8007914:	d104      	bne.n	8007920 <HAL_TIM_IC_Start+0x64>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800791c:	b2db      	uxtb	r3, r3
 800791e:	e00b      	b.n	8007938 <HAL_TIM_IC_Start+0x7c>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b08      	cmp	r3, #8
 8007924:	d104      	bne.n	8007930 <HAL_TIM_IC_Start+0x74>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800792c:	b2db      	uxtb	r3, r3
 800792e:	e003      	b.n	8007938 <HAL_TIM_IC_Start+0x7c>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007936:	b2db      	uxtb	r3, r3
 8007938:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d102      	bne.n	8007946 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d001      	beq.n	800794a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e081      	b.n	8007a4e <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <HAL_TIM_IC_Start+0x9e>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007958:	e013      	b.n	8007982 <HAL_TIM_IC_Start+0xc6>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b04      	cmp	r3, #4
 800795e:	d104      	bne.n	800796a <HAL_TIM_IC_Start+0xae>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007968:	e00b      	b.n	8007982 <HAL_TIM_IC_Start+0xc6>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b08      	cmp	r3, #8
 800796e:	d104      	bne.n	800797a <HAL_TIM_IC_Start+0xbe>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007978:	e003      	b.n	8007982 <HAL_TIM_IC_Start+0xc6>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2202      	movs	r2, #2
 800797e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <HAL_TIM_IC_Start+0xd6>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007990:	e013      	b.n	80079ba <HAL_TIM_IC_Start+0xfe>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b04      	cmp	r3, #4
 8007996:	d104      	bne.n	80079a2 <HAL_TIM_IC_Start+0xe6>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079a0:	e00b      	b.n	80079ba <HAL_TIM_IC_Start+0xfe>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d104      	bne.n	80079b2 <HAL_TIM_IC_Start+0xf6>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b0:	e003      	b.n	80079ba <HAL_TIM_IC_Start+0xfe>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2201      	movs	r2, #1
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 f92e 	bl	8008c24 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <HAL_TIM_IC_Start+0x19c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d022      	beq.n	8007a18 <HAL_TIM_IC_Start+0x15c>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079da:	d01d      	beq.n	8007a18 <HAL_TIM_IC_Start+0x15c>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1e      	ldr	r2, [pc, #120]	; (8007a5c <HAL_TIM_IC_Start+0x1a0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d018      	beq.n	8007a18 <HAL_TIM_IC_Start+0x15c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1d      	ldr	r2, [pc, #116]	; (8007a60 <HAL_TIM_IC_Start+0x1a4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d013      	beq.n	8007a18 <HAL_TIM_IC_Start+0x15c>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1b      	ldr	r2, [pc, #108]	; (8007a64 <HAL_TIM_IC_Start+0x1a8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00e      	beq.n	8007a18 <HAL_TIM_IC_Start+0x15c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1a      	ldr	r2, [pc, #104]	; (8007a68 <HAL_TIM_IC_Start+0x1ac>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d009      	beq.n	8007a18 <HAL_TIM_IC_Start+0x15c>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a18      	ldr	r2, [pc, #96]	; (8007a6c <HAL_TIM_IC_Start+0x1b0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d004      	beq.n	8007a18 <HAL_TIM_IC_Start+0x15c>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a17      	ldr	r2, [pc, #92]	; (8007a70 <HAL_TIM_IC_Start+0x1b4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d111      	bne.n	8007a3c <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b06      	cmp	r3, #6
 8007a28:	d010      	beq.n	8007a4c <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0201 	orr.w	r2, r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3a:	e007      	b.n	8007a4c <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0201 	orr.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40010400 	.word	0x40010400
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40001800 	.word	0x40001800

08007a74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e097      	b.n	8007bb8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fc f921 	bl	8003ce4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab8:	f023 0307 	bic.w	r3, r3, #7
 8007abc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f000 fc97 	bl	80083fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	4313      	orrs	r3, r2
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007b14:	f023 030c 	bic.w	r3, r3, #12
 8007b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	4313      	orrs	r3, r2
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	011a      	lsls	r2, r3, #4
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	031b      	lsls	r3, r3, #12
 8007b44:	4313      	orrs	r3, r2
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007b52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007b5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	4313      	orrs	r3, r2
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bd0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007bd8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007be0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007be8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d110      	bne.n	8007c12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d102      	bne.n	8007bfc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bf6:	7b7b      	ldrb	r3, [r7, #13]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d001      	beq.n	8007c00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e069      	b.n	8007cd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c10:	e031      	b.n	8007c76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d110      	bne.n	8007c3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d102      	bne.n	8007c24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c1e:	7b3b      	ldrb	r3, [r7, #12]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d001      	beq.n	8007c28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e055      	b.n	8007cd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c38:	e01d      	b.n	8007c76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d108      	bne.n	8007c52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d105      	bne.n	8007c52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c46:	7b7b      	ldrb	r3, [r7, #13]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d102      	bne.n	8007c52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c4c:	7b3b      	ldrb	r3, [r7, #12]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d001      	beq.n	8007c56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e03e      	b.n	8007cd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2202      	movs	r2, #2
 8007c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2202      	movs	r2, #2
 8007c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_TIM_Encoder_Start+0xc4>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d008      	beq.n	8007c94 <HAL_TIM_Encoder_Start+0xd4>
 8007c82:	e00f      	b.n	8007ca4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 ffc9 	bl	8008c24 <TIM_CCxChannelCmd>
      break;
 8007c92:	e016      	b.n	8007cc2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	2104      	movs	r1, #4
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 ffc1 	bl	8008c24 <TIM_CCxChannelCmd>
      break;
 8007ca2:	e00e      	b.n	8007cc2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	2100      	movs	r1, #0
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 ffb9 	bl	8008c24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	2104      	movs	r1, #4
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 ffb2 	bl	8008c24 <TIM_CCxChannelCmd>
      break;
 8007cc0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0201 	orr.w	r2, r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d122      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d11b      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0202 	mvn.w	r2, #2
 8007d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7fa fb2a 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 8007d24:	e005      	b.n	8007d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fb4a 	bl	80083c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fb51 	bl	80083d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d122      	bne.n	8007d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d11b      	bne.n	8007d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0204 	mvn.w	r2, #4
 8007d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fa fb00 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 8007d78:	e005      	b.n	8007d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fb20 	bl	80083c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fb27 	bl	80083d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d122      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d11b      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0208 	mvn.w	r2, #8
 8007db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2204      	movs	r2, #4
 8007db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fa fad6 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 8007dcc:	e005      	b.n	8007dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 faf6 	bl	80083c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fafd 	bl	80083d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0310 	and.w	r3, r3, #16
 8007dea:	2b10      	cmp	r3, #16
 8007dec:	d122      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0310 	and.w	r3, r3, #16
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d11b      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0210 	mvn.w	r2, #16
 8007e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2208      	movs	r2, #8
 8007e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fa faac 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 8007e20:	e005      	b.n	8007e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 facc 	bl	80083c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fad3 	bl	80083d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d10e      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d107      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0201 	mvn.w	r2, #1
 8007e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7fb fd9e 	bl	800399c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6a:	2b80      	cmp	r3, #128	; 0x80
 8007e6c:	d10e      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e78:	2b80      	cmp	r3, #128	; 0x80
 8007e7a:	d107      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 ffca 	bl	8008e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e96:	2b40      	cmp	r3, #64	; 0x40
 8007e98:	d10e      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea4:	2b40      	cmp	r3, #64	; 0x40
 8007ea6:	d107      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa98 	bl	80083e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	d10e      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d107      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0220 	mvn.w	r2, #32
 8007edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 ff94 	bl	8008e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d101      	bne.n	8007f0a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007f06:	2302      	movs	r3, #2
 8007f08:	e088      	b.n	800801c <HAL_TIM_IC_ConfigChannel+0x130>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11b      	bne.n	8007f50 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6818      	ldr	r0, [r3, #0]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	6819      	ldr	r1, [r3, #0]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f000 fcb8 	bl	800889c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699a      	ldr	r2, [r3, #24]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 020c 	bic.w	r2, r2, #12
 8007f3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6999      	ldr	r1, [r3, #24]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	619a      	str	r2, [r3, #24]
 8007f4e:	e060      	b.n	8008012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d11c      	bne.n	8007f90 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6818      	ldr	r0, [r3, #0]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f000 fd3c 	bl	80089e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	699a      	ldr	r2, [r3, #24]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6999      	ldr	r1, [r3, #24]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	021a      	lsls	r2, r3, #8
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	619a      	str	r2, [r3, #24]
 8007f8e:	e040      	b.n	8008012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b08      	cmp	r3, #8
 8007f94:	d11b      	bne.n	8007fce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	6819      	ldr	r1, [r3, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f000 fd89 	bl	8008abc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69da      	ldr	r2, [r3, #28]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 020c 	bic.w	r2, r2, #12
 8007fb8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69d9      	ldr	r1, [r3, #28]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	61da      	str	r2, [r3, #28]
 8007fcc:	e021      	b.n	8008012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b0c      	cmp	r3, #12
 8007fd2:	d11c      	bne.n	800800e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	6819      	ldr	r1, [r3, #0]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f000 fda6 	bl	8008b34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69da      	ldr	r2, [r3, #28]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ff6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	69d9      	ldr	r1, [r3, #28]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	021a      	lsls	r2, r3, #8
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	61da      	str	r2, [r3, #28]
 800800c:	e001      	b.n	8008012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800803e:	2302      	movs	r3, #2
 8008040:	e0ae      	b.n	80081a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b0c      	cmp	r3, #12
 800804e:	f200 809f 	bhi.w	8008190 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008052:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	0800808d 	.word	0x0800808d
 800805c:	08008191 	.word	0x08008191
 8008060:	08008191 	.word	0x08008191
 8008064:	08008191 	.word	0x08008191
 8008068:	080080cd 	.word	0x080080cd
 800806c:	08008191 	.word	0x08008191
 8008070:	08008191 	.word	0x08008191
 8008074:	08008191 	.word	0x08008191
 8008078:	0800810f 	.word	0x0800810f
 800807c:	08008191 	.word	0x08008191
 8008080:	08008191 	.word	0x08008191
 8008084:	08008191 	.word	0x08008191
 8008088:	0800814f 	.word	0x0800814f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fa52 	bl	800853c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0208 	orr.w	r2, r2, #8
 80080a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0204 	bic.w	r2, r2, #4
 80080b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6999      	ldr	r1, [r3, #24]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	619a      	str	r2, [r3, #24]
      break;
 80080ca:	e064      	b.n	8008196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 faa2 	bl	800861c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699a      	ldr	r2, [r3, #24]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6999      	ldr	r1, [r3, #24]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	021a      	lsls	r2, r3, #8
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	619a      	str	r2, [r3, #24]
      break;
 800810c:	e043      	b.n	8008196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 faf7 	bl	8008708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0208 	orr.w	r2, r2, #8
 8008128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69da      	ldr	r2, [r3, #28]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0204 	bic.w	r2, r2, #4
 8008138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69d9      	ldr	r1, [r3, #28]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	691a      	ldr	r2, [r3, #16]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	61da      	str	r2, [r3, #28]
      break;
 800814c:	e023      	b.n	8008196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fb4b 	bl	80087f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69da      	ldr	r2, [r3, #28]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69d9      	ldr	r1, [r3, #28]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	021a      	lsls	r2, r3, #8
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	61da      	str	r2, [r3, #28]
      break;
 800818e:	e002      	b.n	8008196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	75fb      	strb	r3, [r7, #23]
      break;
 8008194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_TIM_ConfigClockSource+0x1c>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e0b4      	b.n	800832e <HAL_TIM_ConfigClockSource+0x186>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fc:	d03e      	beq.n	800827c <HAL_TIM_ConfigClockSource+0xd4>
 80081fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008202:	f200 8087 	bhi.w	8008314 <HAL_TIM_ConfigClockSource+0x16c>
 8008206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820a:	f000 8086 	beq.w	800831a <HAL_TIM_ConfigClockSource+0x172>
 800820e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008212:	d87f      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x16c>
 8008214:	2b70      	cmp	r3, #112	; 0x70
 8008216:	d01a      	beq.n	800824e <HAL_TIM_ConfigClockSource+0xa6>
 8008218:	2b70      	cmp	r3, #112	; 0x70
 800821a:	d87b      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x16c>
 800821c:	2b60      	cmp	r3, #96	; 0x60
 800821e:	d050      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x11a>
 8008220:	2b60      	cmp	r3, #96	; 0x60
 8008222:	d877      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	2b50      	cmp	r3, #80	; 0x50
 8008226:	d03c      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0xfa>
 8008228:	2b50      	cmp	r3, #80	; 0x50
 800822a:	d873      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x16c>
 800822c:	2b40      	cmp	r3, #64	; 0x40
 800822e:	d058      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x13a>
 8008230:	2b40      	cmp	r3, #64	; 0x40
 8008232:	d86f      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x16c>
 8008234:	2b30      	cmp	r3, #48	; 0x30
 8008236:	d064      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x15a>
 8008238:	2b30      	cmp	r3, #48	; 0x30
 800823a:	d86b      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x16c>
 800823c:	2b20      	cmp	r3, #32
 800823e:	d060      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x15a>
 8008240:	2b20      	cmp	r3, #32
 8008242:	d867      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x16c>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d05c      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x15a>
 8008248:	2b10      	cmp	r3, #16
 800824a:	d05a      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x15a>
 800824c:	e062      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6899      	ldr	r1, [r3, #8]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f000 fcc1 	bl	8008be4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	609a      	str	r2, [r3, #8]
      break;
 800827a:	e04f      	b.n	800831c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6818      	ldr	r0, [r3, #0]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6899      	ldr	r1, [r3, #8]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f000 fcaa 	bl	8008be4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800829e:	609a      	str	r2, [r3, #8]
      break;
 80082a0:	e03c      	b.n	800831c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6859      	ldr	r1, [r3, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f000 fb68 	bl	8008984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2150      	movs	r1, #80	; 0x50
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fc77 	bl	8008bae <TIM_ITRx_SetConfig>
      break;
 80082c0:	e02c      	b.n	800831c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6859      	ldr	r1, [r3, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f000 fbc4 	bl	8008a5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2160      	movs	r1, #96	; 0x60
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fc67 	bl	8008bae <TIM_ITRx_SetConfig>
      break;
 80082e0:	e01c      	b.n	800831c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	6859      	ldr	r1, [r3, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f000 fb48 	bl	8008984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2140      	movs	r1, #64	; 0x40
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fc57 	bl	8008bae <TIM_ITRx_SetConfig>
      break;
 8008300:	e00c      	b.n	800831c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f000 fc4e 	bl	8008bae <TIM_ITRx_SetConfig>
      break;
 8008312:	e003      	b.n	800831c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]
      break;
 8008318:	e000      	b.n	800831c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800831a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800832c:	7bfb      	ldrb	r3, [r7, #15]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b0c      	cmp	r3, #12
 800834a:	d831      	bhi.n	80083b0 <HAL_TIM_ReadCapturedValue+0x78>
 800834c:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <HAL_TIM_ReadCapturedValue+0x1c>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008389 	.word	0x08008389
 8008358:	080083b1 	.word	0x080083b1
 800835c:	080083b1 	.word	0x080083b1
 8008360:	080083b1 	.word	0x080083b1
 8008364:	08008393 	.word	0x08008393
 8008368:	080083b1 	.word	0x080083b1
 800836c:	080083b1 	.word	0x080083b1
 8008370:	080083b1 	.word	0x080083b1
 8008374:	0800839d 	.word	0x0800839d
 8008378:	080083b1 	.word	0x080083b1
 800837c:	080083b1 	.word	0x080083b1
 8008380:	080083b1 	.word	0x080083b1
 8008384:	080083a7 	.word	0x080083a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838e:	60fb      	str	r3, [r7, #12]

      break;
 8008390:	e00f      	b.n	80083b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	60fb      	str	r3, [r7, #12]

      break;
 800839a:	e00a      	b.n	80083b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a2:	60fb      	str	r3, [r7, #12]

      break;
 80083a4:	e005      	b.n	80083b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ac:	60fb      	str	r3, [r7, #12]

      break;
 80083ae:	e000      	b.n	80083b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80083b0:	bf00      	nop
  }

  return tmpreg;
 80083b2:	68fb      	ldr	r3, [r7, #12]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a40      	ldr	r2, [pc, #256]	; (8008510 <TIM_Base_SetConfig+0x114>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d013      	beq.n	800843c <TIM_Base_SetConfig+0x40>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841a:	d00f      	beq.n	800843c <TIM_Base_SetConfig+0x40>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a3d      	ldr	r2, [pc, #244]	; (8008514 <TIM_Base_SetConfig+0x118>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d00b      	beq.n	800843c <TIM_Base_SetConfig+0x40>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a3c      	ldr	r2, [pc, #240]	; (8008518 <TIM_Base_SetConfig+0x11c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d007      	beq.n	800843c <TIM_Base_SetConfig+0x40>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a3b      	ldr	r2, [pc, #236]	; (800851c <TIM_Base_SetConfig+0x120>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d003      	beq.n	800843c <TIM_Base_SetConfig+0x40>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a3a      	ldr	r2, [pc, #232]	; (8008520 <TIM_Base_SetConfig+0x124>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d108      	bne.n	800844e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a2f      	ldr	r2, [pc, #188]	; (8008510 <TIM_Base_SetConfig+0x114>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d02b      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800845c:	d027      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a2c      	ldr	r2, [pc, #176]	; (8008514 <TIM_Base_SetConfig+0x118>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d023      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a2b      	ldr	r2, [pc, #172]	; (8008518 <TIM_Base_SetConfig+0x11c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d01f      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a2a      	ldr	r2, [pc, #168]	; (800851c <TIM_Base_SetConfig+0x120>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d01b      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a29      	ldr	r2, [pc, #164]	; (8008520 <TIM_Base_SetConfig+0x124>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d017      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a28      	ldr	r2, [pc, #160]	; (8008524 <TIM_Base_SetConfig+0x128>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a27      	ldr	r2, [pc, #156]	; (8008528 <TIM_Base_SetConfig+0x12c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00f      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a26      	ldr	r2, [pc, #152]	; (800852c <TIM_Base_SetConfig+0x130>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00b      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a25      	ldr	r2, [pc, #148]	; (8008530 <TIM_Base_SetConfig+0x134>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d007      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a24      	ldr	r2, [pc, #144]	; (8008534 <TIM_Base_SetConfig+0x138>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d003      	beq.n	80084ae <TIM_Base_SetConfig+0xb2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a23      	ldr	r2, [pc, #140]	; (8008538 <TIM_Base_SetConfig+0x13c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d108      	bne.n	80084c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a0a      	ldr	r2, [pc, #40]	; (8008510 <TIM_Base_SetConfig+0x114>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d003      	beq.n	80084f4 <TIM_Base_SetConfig+0xf8>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a0c      	ldr	r2, [pc, #48]	; (8008520 <TIM_Base_SetConfig+0x124>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d103      	bne.n	80084fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	691a      	ldr	r2, [r3, #16]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	615a      	str	r2, [r3, #20]
}
 8008502:	bf00      	nop
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	40010000 	.word	0x40010000
 8008514:	40000400 	.word	0x40000400
 8008518:	40000800 	.word	0x40000800
 800851c:	40000c00 	.word	0x40000c00
 8008520:	40010400 	.word	0x40010400
 8008524:	40014000 	.word	0x40014000
 8008528:	40014400 	.word	0x40014400
 800852c:	40014800 	.word	0x40014800
 8008530:	40001800 	.word	0x40001800
 8008534:	40001c00 	.word	0x40001c00
 8008538:	40002000 	.word	0x40002000

0800853c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f023 0201 	bic.w	r2, r3, #1
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 0303 	bic.w	r3, r3, #3
 8008572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f023 0302 	bic.w	r3, r3, #2
 8008584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a20      	ldr	r2, [pc, #128]	; (8008614 <TIM_OC1_SetConfig+0xd8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_OC1_SetConfig+0x64>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a1f      	ldr	r2, [pc, #124]	; (8008618 <TIM_OC1_SetConfig+0xdc>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10c      	bne.n	80085ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f023 0308 	bic.w	r3, r3, #8
 80085a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f023 0304 	bic.w	r3, r3, #4
 80085b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a15      	ldr	r2, [pc, #84]	; (8008614 <TIM_OC1_SetConfig+0xd8>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d003      	beq.n	80085ca <TIM_OC1_SetConfig+0x8e>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a14      	ldr	r2, [pc, #80]	; (8008618 <TIM_OC1_SetConfig+0xdc>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d111      	bne.n	80085ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	621a      	str	r2, [r3, #32]
}
 8008608:	bf00      	nop
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	40010000 	.word	0x40010000
 8008618:	40010400 	.word	0x40010400

0800861c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f023 0210 	bic.w	r2, r3, #16
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800864a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	021b      	lsls	r3, r3, #8
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f023 0320 	bic.w	r3, r3, #32
 8008666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4313      	orrs	r3, r2
 8008672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a22      	ldr	r2, [pc, #136]	; (8008700 <TIM_OC2_SetConfig+0xe4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d003      	beq.n	8008684 <TIM_OC2_SetConfig+0x68>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a21      	ldr	r2, [pc, #132]	; (8008704 <TIM_OC2_SetConfig+0xe8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d10d      	bne.n	80086a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a17      	ldr	r2, [pc, #92]	; (8008700 <TIM_OC2_SetConfig+0xe4>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_OC2_SetConfig+0x94>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a16      	ldr	r2, [pc, #88]	; (8008704 <TIM_OC2_SetConfig+0xe8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d113      	bne.n	80086d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	621a      	str	r2, [r3, #32]
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40010000 	.word	0x40010000
 8008704:	40010400 	.word	0x40010400

08008708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	021b      	lsls	r3, r3, #8
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a21      	ldr	r2, [pc, #132]	; (80087e8 <TIM_OC3_SetConfig+0xe0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d003      	beq.n	800876e <TIM_OC3_SetConfig+0x66>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a20      	ldr	r2, [pc, #128]	; (80087ec <TIM_OC3_SetConfig+0xe4>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d10d      	bne.n	800878a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	021b      	lsls	r3, r3, #8
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	4313      	orrs	r3, r2
 8008780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a16      	ldr	r2, [pc, #88]	; (80087e8 <TIM_OC3_SetConfig+0xe0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d003      	beq.n	800879a <TIM_OC3_SetConfig+0x92>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a15      	ldr	r2, [pc, #84]	; (80087ec <TIM_OC3_SetConfig+0xe4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d113      	bne.n	80087c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4313      	orrs	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	621a      	str	r2, [r3, #32]
}
 80087dc:	bf00      	nop
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	40010000 	.word	0x40010000
 80087ec:	40010400 	.word	0x40010400

080087f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	021b      	lsls	r3, r3, #8
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800883a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	031b      	lsls	r3, r3, #12
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	4313      	orrs	r3, r2
 8008846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a12      	ldr	r2, [pc, #72]	; (8008894 <TIM_OC4_SetConfig+0xa4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d003      	beq.n	8008858 <TIM_OC4_SetConfig+0x68>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a11      	ldr	r2, [pc, #68]	; (8008898 <TIM_OC4_SetConfig+0xa8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d109      	bne.n	800886c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800885e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	019b      	lsls	r3, r3, #6
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4313      	orrs	r3, r2
 800886a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	621a      	str	r2, [r3, #32]
}
 8008886:	bf00      	nop
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40010000 	.word	0x40010000
 8008898:	40010400 	.word	0x40010400

0800889c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f023 0201 	bic.w	r2, r3, #1
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4a28      	ldr	r2, [pc, #160]	; (8008968 <TIM_TI1_SetConfig+0xcc>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d01b      	beq.n	8008902 <TIM_TI1_SetConfig+0x66>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d0:	d017      	beq.n	8008902 <TIM_TI1_SetConfig+0x66>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4a25      	ldr	r2, [pc, #148]	; (800896c <TIM_TI1_SetConfig+0xd0>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d013      	beq.n	8008902 <TIM_TI1_SetConfig+0x66>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4a24      	ldr	r2, [pc, #144]	; (8008970 <TIM_TI1_SetConfig+0xd4>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d00f      	beq.n	8008902 <TIM_TI1_SetConfig+0x66>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4a23      	ldr	r2, [pc, #140]	; (8008974 <TIM_TI1_SetConfig+0xd8>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00b      	beq.n	8008902 <TIM_TI1_SetConfig+0x66>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4a22      	ldr	r2, [pc, #136]	; (8008978 <TIM_TI1_SetConfig+0xdc>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d007      	beq.n	8008902 <TIM_TI1_SetConfig+0x66>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4a21      	ldr	r2, [pc, #132]	; (800897c <TIM_TI1_SetConfig+0xe0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d003      	beq.n	8008902 <TIM_TI1_SetConfig+0x66>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4a20      	ldr	r2, [pc, #128]	; (8008980 <TIM_TI1_SetConfig+0xe4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d101      	bne.n	8008906 <TIM_TI1_SetConfig+0x6a>
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <TIM_TI1_SetConfig+0x6c>
 8008906:	2300      	movs	r3, #0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f023 0303 	bic.w	r3, r3, #3
 8008912:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]
 800891c:	e003      	b.n	8008926 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f043 0301 	orr.w	r3, r3, #1
 8008924:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800892c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	b2db      	uxtb	r3, r3
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f023 030a 	bic.w	r3, r3, #10
 8008940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f003 030a 	and.w	r3, r3, #10
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	4313      	orrs	r3, r2
 800894c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	621a      	str	r2, [r3, #32]
}
 800895a:	bf00      	nop
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	40010000 	.word	0x40010000
 800896c:	40000400 	.word	0x40000400
 8008970:	40000800 	.word	0x40000800
 8008974:	40000c00 	.word	0x40000c00
 8008978:	40010400 	.word	0x40010400
 800897c:	40014000 	.word	0x40014000
 8008980:	40001800 	.word	0x40001800

08008984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f023 0201 	bic.w	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f023 030a 	bic.w	r3, r3, #10
 80089c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	621a      	str	r2, [r3, #32]
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b087      	sub	sp, #28
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	f023 0210 	bic.w	r2, r3, #16
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	031b      	lsls	r3, r3, #12
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	621a      	str	r2, [r3, #32]
}
 8008a50:	bf00      	nop
 8008a52:	371c      	adds	r7, #28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b087      	sub	sp, #28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f023 0210 	bic.w	r2, r3, #16
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	031b      	lsls	r3, r3, #12
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	621a      	str	r2, [r3, #32]
}
 8008ab0:	bf00      	nop
 8008ab2:	371c      	adds	r7, #28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f023 0303 	bic.w	r3, r3, #3
 8008ae8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008af8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	011b      	lsls	r3, r3, #4
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	621a      	str	r2, [r3, #32]
}
 8008b28:	bf00      	nop
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	031b      	lsls	r3, r3, #12
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008b86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	031b      	lsls	r3, r3, #12
 8008b8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	621a      	str	r2, [r3, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	f043 0307 	orr.w	r3, r3, #7
 8008bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	609a      	str	r2, [r3, #8]
}
 8008bd8:	bf00      	nop
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	021a      	lsls	r2, r3, #8
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	609a      	str	r2, [r3, #8]
}
 8008c18:	bf00      	nop
 8008c1a:	371c      	adds	r7, #28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f003 031f 	and.w	r3, r3, #31
 8008c36:	2201      	movs	r2, #1
 8008c38:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a1a      	ldr	r2, [r3, #32]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	43db      	mvns	r3, r3
 8008c46:	401a      	ands	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a1a      	ldr	r2, [r3, #32]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f003 031f 	and.w	r3, r3, #31
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	621a      	str	r2, [r3, #32]
}
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e05a      	b.n	8008d3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a21      	ldr	r2, [pc, #132]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d022      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd4:	d01d      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a1d      	ldr	r2, [pc, #116]	; (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d018      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a1b      	ldr	r2, [pc, #108]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d013      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a1a      	ldr	r2, [pc, #104]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00e      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a18      	ldr	r2, [pc, #96]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d009      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a17      	ldr	r2, [pc, #92]	; (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d004      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a15      	ldr	r2, [pc, #84]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d10c      	bne.n	8008d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40010000 	.word	0x40010000
 8008d50:	40000400 	.word	0x40000400
 8008d54:	40000800 	.word	0x40000800
 8008d58:	40000c00 	.word	0x40000c00
 8008d5c:	40010400 	.word	0x40010400
 8008d60:	40014000 	.word	0x40014000
 8008d64:	40001800 	.word	0x40001800

08008d68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e03d      	b.n	8008e00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e03f      	b.n	8008ec6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d106      	bne.n	8008e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7fb f83e 	bl	8003edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2224      	movs	r2, #36	; 0x24
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fd23 	bl	80098c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695a      	ldr	r2, [r3, #20]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	d130      	bne.n	8008f4a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d002      	beq.n	8008ef4 <HAL_UART_Transmit_IT+0x26>
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e029      	b.n	8008f4c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d101      	bne.n	8008f06 <HAL_UART_Transmit_IT+0x38>
 8008f02:	2302      	movs	r3, #2
 8008f04:	e022      	b.n	8008f4c <HAL_UART_Transmit_IT+0x7e>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	88fa      	ldrh	r2, [r7, #6]
 8008f18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	88fa      	ldrh	r2, [r7, #6]
 8008f1e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2221      	movs	r2, #33	; 0x21
 8008f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f44:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	e000      	b.n	8008f4c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008f4a:	2302      	movs	r3, #2
  }
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d11d      	bne.n	8008fae <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <HAL_UART_Receive_IT+0x26>
 8008f78:	88fb      	ldrh	r3, [r7, #6]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e016      	b.n	8008fb0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_UART_Receive_IT+0x38>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e00f      	b.n	8008fb0 <HAL_UART_Receive_IT+0x58>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	68b9      	ldr	r1, [r7, #8]
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fab5 	bl	8009514 <UART_Start_Receive_IT>
 8008faa:	4603      	mov	r3, r0
 8008fac:	e000      	b.n	8008fb0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008fae:	2302      	movs	r3, #2
  }
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b0ba      	sub	sp, #232	; 0xe8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10f      	bne.n	800901e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b00      	cmp	r3, #0
 8009008:	d009      	beq.n	800901e <HAL_UART_IRQHandler+0x66>
 800900a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fb99 	bl	800974e <UART_Receive_IT>
      return;
 800901c:	e256      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800901e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 80de 	beq.w	80091e4 <HAL_UART_IRQHandler+0x22c>
 8009028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d106      	bne.n	8009042 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009038:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 80d1 	beq.w	80091e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00b      	beq.n	8009066 <HAL_UART_IRQHandler+0xae>
 800904e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	f043 0201 	orr.w	r2, r3, #1
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800906a:	f003 0304 	and.w	r3, r3, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <HAL_UART_IRQHandler+0xd2>
 8009072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	f043 0202 	orr.w	r2, r3, #2
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800908a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <HAL_UART_IRQHandler+0xf6>
 8009096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f043 0204 	orr.w	r2, r3, #4
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d011      	beq.n	80090de <HAL_UART_IRQHandler+0x126>
 80090ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090be:	f003 0320 	and.w	r3, r3, #32
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d105      	bne.n	80090d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	f043 0208 	orr.w	r2, r3, #8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 81ed 	beq.w	80094c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d008      	beq.n	8009106 <HAL_UART_IRQHandler+0x14e>
 80090f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fb24 	bl	800974e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009110:	2b40      	cmp	r3, #64	; 0x40
 8009112:	bf0c      	ite	eq
 8009114:	2301      	moveq	r3, #1
 8009116:	2300      	movne	r3, #0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	f003 0308 	and.w	r3, r3, #8
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <HAL_UART_IRQHandler+0x17a>
 800912a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800912e:	2b00      	cmp	r3, #0
 8009130:	d04f      	beq.n	80091d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fa2c 	bl	8009590 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009142:	2b40      	cmp	r3, #64	; 0x40
 8009144:	d141      	bne.n	80091ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3314      	adds	r3, #20
 800914c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800915c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3314      	adds	r3, #20
 800916e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009172:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800917e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800918a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1d9      	bne.n	8009146 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009196:	2b00      	cmp	r3, #0
 8009198:	d013      	beq.n	80091c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919e:	4a7d      	ldr	r2, [pc, #500]	; (8009394 <HAL_UART_IRQHandler+0x3dc>)
 80091a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fc f882 	bl	80052b0 <HAL_DMA_Abort_IT>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d016      	beq.n	80091e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091bc:	4610      	mov	r0, r2
 80091be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c0:	e00e      	b.n	80091e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f990 	bl	80094e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c8:	e00a      	b.n	80091e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f98c 	bl	80094e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d0:	e006      	b.n	80091e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f988 	bl	80094e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80091de:	e170      	b.n	80094c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e0:	bf00      	nop
    return;
 80091e2:	e16e      	b.n	80094c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	f040 814a 	bne.w	8009482 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80091ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8143 	beq.w	8009482 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80091fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 813c 	beq.w	8009482 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800920a:	2300      	movs	r3, #0
 800920c:	60bb      	str	r3, [r7, #8]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	60bb      	str	r3, [r7, #8]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922a:	2b40      	cmp	r3, #64	; 0x40
 800922c:	f040 80b4 	bne.w	8009398 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800923c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 8140 	beq.w	80094c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800924a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800924e:	429a      	cmp	r2, r3
 8009250:	f080 8139 	bcs.w	80094c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800925a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009266:	f000 8088 	beq.w	800937a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	330c      	adds	r3, #12
 8009292:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800929a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1d9      	bne.n	800926a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3314      	adds	r3, #20
 80092bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80092c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3314      	adds	r3, #20
 80092d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80092da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80092de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1e1      	bne.n	80092b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3314      	adds	r3, #20
 80092f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3314      	adds	r3, #20
 8009312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009316:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009318:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800931c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e3      	bne.n	80092f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	330c      	adds	r3, #12
 800933e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009342:	e853 3f00 	ldrex	r3, [r3]
 8009346:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934a:	f023 0310 	bic.w	r3, r3, #16
 800934e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	330c      	adds	r3, #12
 8009358:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800935c:	65ba      	str	r2, [r7, #88]	; 0x58
 800935e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009362:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800936a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e3      	bne.n	8009338 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009374:	4618      	mov	r0, r3
 8009376:	f7fb ff2b 	bl	80051d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009382:	b29b      	uxth	r3, r3
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	b29b      	uxth	r3, r3
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f8b6 	bl	80094fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009390:	e099      	b.n	80094c6 <HAL_UART_IRQHandler+0x50e>
 8009392:	bf00      	nop
 8009394:	08009657 	.word	0x08009657
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 808b 	beq.w	80094ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80093b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 8086 	beq.w	80094ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80093e2:	647a      	str	r2, [r7, #68]	; 0x44
 80093e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e3      	bne.n	80093be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3314      	adds	r3, #20
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	623b      	str	r3, [r7, #32]
   return(result);
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	f023 0301 	bic.w	r3, r3, #1
 800940c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3314      	adds	r3, #20
 8009416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800941a:	633a      	str	r2, [r7, #48]	; 0x30
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e3      	bne.n	80093f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	330c      	adds	r3, #12
 8009442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	60fb      	str	r3, [r7, #12]
   return(result);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f023 0310 	bic.w	r3, r3, #16
 8009452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	330c      	adds	r3, #12
 800945c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009460:	61fa      	str	r2, [r7, #28]
 8009462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	69b9      	ldr	r1, [r7, #24]
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	617b      	str	r3, [r7, #20]
   return(result);
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e3      	bne.n	800943c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f83e 	bl	80094fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009480:	e023      	b.n	80094ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948a:	2b00      	cmp	r3, #0
 800948c:	d009      	beq.n	80094a2 <HAL_UART_IRQHandler+0x4ea>
 800948e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8ef 	bl	800967e <UART_Transmit_IT>
    return;
 80094a0:	e014      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00e      	beq.n	80094cc <HAL_UART_IRQHandler+0x514>
 80094ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d008      	beq.n	80094cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f92f 	bl	800971e <UART_EndTransmit_IT>
    return;
 80094c0:	e004      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
    return;
 80094c2:	bf00      	nop
 80094c4:	e002      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
      return;
 80094c6:	bf00      	nop
 80094c8:	e000      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
      return;
 80094ca:	bf00      	nop
  }
}
 80094cc:	37e8      	adds	r7, #232	; 0xe8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop

080094d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	88fa      	ldrh	r2, [r7, #6]
 800952c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	88fa      	ldrh	r2, [r7, #6]
 8009532:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2222      	movs	r2, #34	; 0x22
 800953e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d007      	beq.n	8009562 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009560:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	695a      	ldr	r2, [r3, #20]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f042 0201 	orr.w	r2, r2, #1
 8009570:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f042 0220 	orr.w	r2, r2, #32
 8009580:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b095      	sub	sp, #84	; 0x54
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	330c      	adds	r3, #12
 800959e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	330c      	adds	r3, #12
 80095b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095b8:	643a      	str	r2, [r7, #64]	; 0x40
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e5      	bne.n	8009598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3314      	adds	r3, #20
 80095d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	61fb      	str	r3, [r7, #28]
   return(result);
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f023 0301 	bic.w	r3, r3, #1
 80095e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3314      	adds	r3, #20
 80095ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e5      	bne.n	80095cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009604:	2b01      	cmp	r3, #1
 8009606:	d119      	bne.n	800963c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	330c      	adds	r3, #12
 800960e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	60bb      	str	r3, [r7, #8]
   return(result);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f023 0310 	bic.w	r3, r3, #16
 800961e:	647b      	str	r3, [r7, #68]	; 0x44
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	330c      	adds	r3, #12
 8009626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009628:	61ba      	str	r2, [r7, #24]
 800962a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	6979      	ldr	r1, [r7, #20]
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	e841 2300 	strex	r3, r2, [r1]
 8009634:	613b      	str	r3, [r7, #16]
   return(result);
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e5      	bne.n	8009608 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	631a      	str	r2, [r3, #48]	; 0x30
}
 800964a:	bf00      	nop
 800964c:	3754      	adds	r7, #84	; 0x54
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009662:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff ff39 	bl	80094e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800967e:	b480      	push	{r7}
 8009680:	b085      	sub	sp, #20
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b21      	cmp	r3, #33	; 0x21
 8009690:	d13e      	bne.n	8009710 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969a:	d114      	bne.n	80096c6 <UART_Transmit_IT+0x48>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d110      	bne.n	80096c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a1b      	ldr	r3, [r3, #32]
 80096a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	1c9a      	adds	r2, r3, #2
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	621a      	str	r2, [r3, #32]
 80096c4:	e008      	b.n	80096d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	1c59      	adds	r1, r3, #1
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	6211      	str	r1, [r2, #32]
 80096d0:	781a      	ldrb	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096dc:	b29b      	uxth	r3, r3
 80096de:	3b01      	subs	r3, #1
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	4619      	mov	r1, r3
 80096e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10f      	bne.n	800970c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800970a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	e000      	b.n	8009712 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009710:	2302      	movs	r3, #2
  }
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68da      	ldr	r2, [r3, #12]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009734:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff fec8 	bl	80094d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b08c      	sub	sp, #48	; 0x30
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b22      	cmp	r3, #34	; 0x22
 8009760:	f040 80ab 	bne.w	80098ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800976c:	d117      	bne.n	800979e <UART_Receive_IT+0x50>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d113      	bne.n	800979e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009776:	2300      	movs	r3, #0
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	b29b      	uxth	r3, r3
 8009788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978c:	b29a      	uxth	r2, r3
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009796:	1c9a      	adds	r2, r3, #2
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	629a      	str	r2, [r3, #40]	; 0x28
 800979c:	e026      	b.n	80097ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80097a4:	2300      	movs	r3, #0
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097b0:	d007      	beq.n	80097c2 <UART_Receive_IT+0x74>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10a      	bne.n	80097d0 <UART_Receive_IT+0x82>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d106      	bne.n	80097d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	e008      	b.n	80097e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	3b01      	subs	r3, #1
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	4619      	mov	r1, r3
 80097fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d15a      	bne.n	80098b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0220 	bic.w	r2, r2, #32
 800980e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800981e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	695a      	ldr	r2, [r3, #20]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f022 0201 	bic.w	r2, r2, #1
 800982e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2220      	movs	r2, #32
 8009834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983c:	2b01      	cmp	r3, #1
 800983e:	d135      	bne.n	80098ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	330c      	adds	r3, #12
 800984c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	613b      	str	r3, [r7, #16]
   return(result);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f023 0310 	bic.w	r3, r3, #16
 800985c:	627b      	str	r3, [r7, #36]	; 0x24
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	330c      	adds	r3, #12
 8009864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009866:	623a      	str	r2, [r7, #32]
 8009868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	69f9      	ldr	r1, [r7, #28]
 800986c:	6a3a      	ldr	r2, [r7, #32]
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	61bb      	str	r3, [r7, #24]
   return(result);
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e5      	bne.n	8009846 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b10      	cmp	r3, #16
 8009886:	d10a      	bne.n	800989e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009888:	2300      	movs	r3, #0
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff fe29 	bl	80094fc <HAL_UARTEx_RxEventCallback>
 80098aa:	e002      	b.n	80098b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7f8 fe23 	bl	80024f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	e002      	b.n	80098bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	e000      	b.n	80098bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80098ba:	2302      	movs	r3, #2
  }
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3730      	adds	r7, #48	; 0x30
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098c8:	b0c0      	sub	sp, #256	; 0x100
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e0:	68d9      	ldr	r1, [r3, #12]
 80098e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	ea40 0301 	orr.w	r3, r0, r1
 80098ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	431a      	orrs	r2, r3
 80098fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	431a      	orrs	r2, r3
 8009904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	4313      	orrs	r3, r2
 800990c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800991c:	f021 010c 	bic.w	r1, r1, #12
 8009920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800992a:	430b      	orrs	r3, r1
 800992c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800992e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800993a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800993e:	6999      	ldr	r1, [r3, #24]
 8009940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	ea40 0301 	orr.w	r3, r0, r1
 800994a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800994c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	4b8f      	ldr	r3, [pc, #572]	; (8009b90 <UART_SetConfig+0x2cc>)
 8009954:	429a      	cmp	r2, r3
 8009956:	d005      	beq.n	8009964 <UART_SetConfig+0xa0>
 8009958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	4b8d      	ldr	r3, [pc, #564]	; (8009b94 <UART_SetConfig+0x2d0>)
 8009960:	429a      	cmp	r2, r3
 8009962:	d104      	bne.n	800996e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009964:	f7fd fd28 	bl	80073b8 <HAL_RCC_GetPCLK2Freq>
 8009968:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800996c:	e003      	b.n	8009976 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800996e:	f7fd fd0f 	bl	8007390 <HAL_RCC_GetPCLK1Freq>
 8009972:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009980:	f040 810c 	bne.w	8009b9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009988:	2200      	movs	r2, #0
 800998a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800998e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009992:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009996:	4622      	mov	r2, r4
 8009998:	462b      	mov	r3, r5
 800999a:	1891      	adds	r1, r2, r2
 800999c:	65b9      	str	r1, [r7, #88]	; 0x58
 800999e:	415b      	adcs	r3, r3
 80099a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099a6:	4621      	mov	r1, r4
 80099a8:	eb12 0801 	adds.w	r8, r2, r1
 80099ac:	4629      	mov	r1, r5
 80099ae:	eb43 0901 	adc.w	r9, r3, r1
 80099b2:	f04f 0200 	mov.w	r2, #0
 80099b6:	f04f 0300 	mov.w	r3, #0
 80099ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099c6:	4690      	mov	r8, r2
 80099c8:	4699      	mov	r9, r3
 80099ca:	4623      	mov	r3, r4
 80099cc:	eb18 0303 	adds.w	r3, r8, r3
 80099d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099d4:	462b      	mov	r3, r5
 80099d6:	eb49 0303 	adc.w	r3, r9, r3
 80099da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80099ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80099f2:	460b      	mov	r3, r1
 80099f4:	18db      	adds	r3, r3, r3
 80099f6:	653b      	str	r3, [r7, #80]	; 0x50
 80099f8:	4613      	mov	r3, r2
 80099fa:	eb42 0303 	adc.w	r3, r2, r3
 80099fe:	657b      	str	r3, [r7, #84]	; 0x54
 8009a00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a08:	f7f7 f936 	bl	8000c78 <__aeabi_uldivmod>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4b61      	ldr	r3, [pc, #388]	; (8009b98 <UART_SetConfig+0x2d4>)
 8009a12:	fba3 2302 	umull	r2, r3, r3, r2
 8009a16:	095b      	lsrs	r3, r3, #5
 8009a18:	011c      	lsls	r4, r3, #4
 8009a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009a28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009a2c:	4642      	mov	r2, r8
 8009a2e:	464b      	mov	r3, r9
 8009a30:	1891      	adds	r1, r2, r2
 8009a32:	64b9      	str	r1, [r7, #72]	; 0x48
 8009a34:	415b      	adcs	r3, r3
 8009a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009a3c:	4641      	mov	r1, r8
 8009a3e:	eb12 0a01 	adds.w	sl, r2, r1
 8009a42:	4649      	mov	r1, r9
 8009a44:	eb43 0b01 	adc.w	fp, r3, r1
 8009a48:	f04f 0200 	mov.w	r2, #0
 8009a4c:	f04f 0300 	mov.w	r3, #0
 8009a50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a5c:	4692      	mov	sl, r2
 8009a5e:	469b      	mov	fp, r3
 8009a60:	4643      	mov	r3, r8
 8009a62:	eb1a 0303 	adds.w	r3, sl, r3
 8009a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a6a:	464b      	mov	r3, r9
 8009a6c:	eb4b 0303 	adc.w	r3, fp, r3
 8009a70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009a84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	18db      	adds	r3, r3, r3
 8009a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a8e:	4613      	mov	r3, r2
 8009a90:	eb42 0303 	adc.w	r3, r2, r3
 8009a94:	647b      	str	r3, [r7, #68]	; 0x44
 8009a96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009a9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009a9e:	f7f7 f8eb 	bl	8000c78 <__aeabi_uldivmod>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	4b3b      	ldr	r3, [pc, #236]	; (8009b98 <UART_SetConfig+0x2d4>)
 8009aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	2264      	movs	r2, #100	; 0x64
 8009ab2:	fb02 f303 	mul.w	r3, r2, r3
 8009ab6:	1acb      	subs	r3, r1, r3
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009abe:	4b36      	ldr	r3, [pc, #216]	; (8009b98 <UART_SetConfig+0x2d4>)
 8009ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8009ac4:	095b      	lsrs	r3, r3, #5
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009acc:	441c      	add	r4, r3
 8009ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ad8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009adc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009ae0:	4642      	mov	r2, r8
 8009ae2:	464b      	mov	r3, r9
 8009ae4:	1891      	adds	r1, r2, r2
 8009ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ae8:	415b      	adcs	r3, r3
 8009aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009af0:	4641      	mov	r1, r8
 8009af2:	1851      	adds	r1, r2, r1
 8009af4:	6339      	str	r1, [r7, #48]	; 0x30
 8009af6:	4649      	mov	r1, r9
 8009af8:	414b      	adcs	r3, r1
 8009afa:	637b      	str	r3, [r7, #52]	; 0x34
 8009afc:	f04f 0200 	mov.w	r2, #0
 8009b00:	f04f 0300 	mov.w	r3, #0
 8009b04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009b08:	4659      	mov	r1, fp
 8009b0a:	00cb      	lsls	r3, r1, #3
 8009b0c:	4651      	mov	r1, sl
 8009b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b12:	4651      	mov	r1, sl
 8009b14:	00ca      	lsls	r2, r1, #3
 8009b16:	4610      	mov	r0, r2
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	189b      	adds	r3, r3, r2
 8009b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b24:	464b      	mov	r3, r9
 8009b26:	460a      	mov	r2, r1
 8009b28:	eb42 0303 	adc.w	r3, r2, r3
 8009b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b44:	460b      	mov	r3, r1
 8009b46:	18db      	adds	r3, r3, r3
 8009b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	eb42 0303 	adc.w	r3, r2, r3
 8009b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009b5a:	f7f7 f88d 	bl	8000c78 <__aeabi_uldivmod>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <UART_SetConfig+0x2d4>)
 8009b64:	fba3 1302 	umull	r1, r3, r3, r2
 8009b68:	095b      	lsrs	r3, r3, #5
 8009b6a:	2164      	movs	r1, #100	; 0x64
 8009b6c:	fb01 f303 	mul.w	r3, r1, r3
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	3332      	adds	r3, #50	; 0x32
 8009b76:	4a08      	ldr	r2, [pc, #32]	; (8009b98 <UART_SetConfig+0x2d4>)
 8009b78:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7c:	095b      	lsrs	r3, r3, #5
 8009b7e:	f003 0207 	and.w	r2, r3, #7
 8009b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4422      	add	r2, r4
 8009b8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b8c:	e105      	b.n	8009d9a <UART_SetConfig+0x4d6>
 8009b8e:	bf00      	nop
 8009b90:	40011000 	.word	0x40011000
 8009b94:	40011400 	.word	0x40011400
 8009b98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ba6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009baa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009bae:	4642      	mov	r2, r8
 8009bb0:	464b      	mov	r3, r9
 8009bb2:	1891      	adds	r1, r2, r2
 8009bb4:	6239      	str	r1, [r7, #32]
 8009bb6:	415b      	adcs	r3, r3
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009bbe:	4641      	mov	r1, r8
 8009bc0:	1854      	adds	r4, r2, r1
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	eb43 0501 	adc.w	r5, r3, r1
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	f04f 0300 	mov.w	r3, #0
 8009bd0:	00eb      	lsls	r3, r5, #3
 8009bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009bd6:	00e2      	lsls	r2, r4, #3
 8009bd8:	4614      	mov	r4, r2
 8009bda:	461d      	mov	r5, r3
 8009bdc:	4643      	mov	r3, r8
 8009bde:	18e3      	adds	r3, r4, r3
 8009be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009be4:	464b      	mov	r3, r9
 8009be6:	eb45 0303 	adc.w	r3, r5, r3
 8009bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009bfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009bfe:	f04f 0200 	mov.w	r2, #0
 8009c02:	f04f 0300 	mov.w	r3, #0
 8009c06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	008b      	lsls	r3, r1, #2
 8009c0e:	4621      	mov	r1, r4
 8009c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c14:	4621      	mov	r1, r4
 8009c16:	008a      	lsls	r2, r1, #2
 8009c18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c1c:	f7f7 f82c 	bl	8000c78 <__aeabi_uldivmod>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4b60      	ldr	r3, [pc, #384]	; (8009da8 <UART_SetConfig+0x4e4>)
 8009c26:	fba3 2302 	umull	r2, r3, r3, r2
 8009c2a:	095b      	lsrs	r3, r3, #5
 8009c2c:	011c      	lsls	r4, r3, #4
 8009c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009c3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009c40:	4642      	mov	r2, r8
 8009c42:	464b      	mov	r3, r9
 8009c44:	1891      	adds	r1, r2, r2
 8009c46:	61b9      	str	r1, [r7, #24]
 8009c48:	415b      	adcs	r3, r3
 8009c4a:	61fb      	str	r3, [r7, #28]
 8009c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c50:	4641      	mov	r1, r8
 8009c52:	1851      	adds	r1, r2, r1
 8009c54:	6139      	str	r1, [r7, #16]
 8009c56:	4649      	mov	r1, r9
 8009c58:	414b      	adcs	r3, r1
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	f04f 0200 	mov.w	r2, #0
 8009c60:	f04f 0300 	mov.w	r3, #0
 8009c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c68:	4659      	mov	r1, fp
 8009c6a:	00cb      	lsls	r3, r1, #3
 8009c6c:	4651      	mov	r1, sl
 8009c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c72:	4651      	mov	r1, sl
 8009c74:	00ca      	lsls	r2, r1, #3
 8009c76:	4610      	mov	r0, r2
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	189b      	adds	r3, r3, r2
 8009c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c84:	464b      	mov	r3, r9
 8009c86:	460a      	mov	r2, r1
 8009c88:	eb42 0303 	adc.w	r3, r2, r3
 8009c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009ca8:	4649      	mov	r1, r9
 8009caa:	008b      	lsls	r3, r1, #2
 8009cac:	4641      	mov	r1, r8
 8009cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	008a      	lsls	r2, r1, #2
 8009cb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009cba:	f7f6 ffdd 	bl	8000c78 <__aeabi_uldivmod>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4b39      	ldr	r3, [pc, #228]	; (8009da8 <UART_SetConfig+0x4e4>)
 8009cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8009cc8:	095b      	lsrs	r3, r3, #5
 8009cca:	2164      	movs	r1, #100	; 0x64
 8009ccc:	fb01 f303 	mul.w	r3, r1, r3
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	3332      	adds	r3, #50	; 0x32
 8009cd6:	4a34      	ldr	r2, [pc, #208]	; (8009da8 <UART_SetConfig+0x4e4>)
 8009cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cdc:	095b      	lsrs	r3, r3, #5
 8009cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ce2:	441c      	add	r4, r3
 8009ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ce8:	2200      	movs	r2, #0
 8009cea:	673b      	str	r3, [r7, #112]	; 0x70
 8009cec:	677a      	str	r2, [r7, #116]	; 0x74
 8009cee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	1891      	adds	r1, r2, r2
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	415b      	adcs	r3, r3
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d02:	4641      	mov	r1, r8
 8009d04:	1851      	adds	r1, r2, r1
 8009d06:	6039      	str	r1, [r7, #0]
 8009d08:	4649      	mov	r1, r9
 8009d0a:	414b      	adcs	r3, r1
 8009d0c:	607b      	str	r3, [r7, #4]
 8009d0e:	f04f 0200 	mov.w	r2, #0
 8009d12:	f04f 0300 	mov.w	r3, #0
 8009d16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d1a:	4659      	mov	r1, fp
 8009d1c:	00cb      	lsls	r3, r1, #3
 8009d1e:	4651      	mov	r1, sl
 8009d20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d24:	4651      	mov	r1, sl
 8009d26:	00ca      	lsls	r2, r1, #3
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	4642      	mov	r2, r8
 8009d30:	189b      	adds	r3, r3, r2
 8009d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d34:	464b      	mov	r3, r9
 8009d36:	460a      	mov	r2, r1
 8009d38:	eb42 0303 	adc.w	r3, r2, r3
 8009d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	663b      	str	r3, [r7, #96]	; 0x60
 8009d48:	667a      	str	r2, [r7, #100]	; 0x64
 8009d4a:	f04f 0200 	mov.w	r2, #0
 8009d4e:	f04f 0300 	mov.w	r3, #0
 8009d52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009d56:	4649      	mov	r1, r9
 8009d58:	008b      	lsls	r3, r1, #2
 8009d5a:	4641      	mov	r1, r8
 8009d5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d60:	4641      	mov	r1, r8
 8009d62:	008a      	lsls	r2, r1, #2
 8009d64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009d68:	f7f6 ff86 	bl	8000c78 <__aeabi_uldivmod>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4b0d      	ldr	r3, [pc, #52]	; (8009da8 <UART_SetConfig+0x4e4>)
 8009d72:	fba3 1302 	umull	r1, r3, r3, r2
 8009d76:	095b      	lsrs	r3, r3, #5
 8009d78:	2164      	movs	r1, #100	; 0x64
 8009d7a:	fb01 f303 	mul.w	r3, r1, r3
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	3332      	adds	r3, #50	; 0x32
 8009d84:	4a08      	ldr	r2, [pc, #32]	; (8009da8 <UART_SetConfig+0x4e4>)
 8009d86:	fba2 2303 	umull	r2, r3, r2, r3
 8009d8a:	095b      	lsrs	r3, r3, #5
 8009d8c:	f003 020f 	and.w	r2, r3, #15
 8009d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4422      	add	r2, r4
 8009d98:	609a      	str	r2, [r3, #8]
}
 8009d9a:	bf00      	nop
 8009d9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009da0:	46bd      	mov	sp, r7
 8009da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009da6:	bf00      	nop
 8009da8:	51eb851f 	.word	0x51eb851f

08009dac <__NVIC_SetPriority>:
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	6039      	str	r1, [r7, #0]
 8009db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	db0a      	blt.n	8009dd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	490c      	ldr	r1, [pc, #48]	; (8009df8 <__NVIC_SetPriority+0x4c>)
 8009dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dca:	0112      	lsls	r2, r2, #4
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	440b      	add	r3, r1
 8009dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009dd4:	e00a      	b.n	8009dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	4908      	ldr	r1, [pc, #32]	; (8009dfc <__NVIC_SetPriority+0x50>)
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	3b04      	subs	r3, #4
 8009de4:	0112      	lsls	r2, r2, #4
 8009de6:	b2d2      	uxtb	r2, r2
 8009de8:	440b      	add	r3, r1
 8009dea:	761a      	strb	r2, [r3, #24]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	e000e100 	.word	0xe000e100
 8009dfc:	e000ed00 	.word	0xe000ed00

08009e00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009e04:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <SysTick_Handler+0x1c>)
 8009e06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009e08:	f001 fda8 	bl	800b95c <xTaskGetSchedulerState>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d001      	beq.n	8009e16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009e12:	f002 fb91 	bl	800c538 <xPortSysTickHandler>
  }
}
 8009e16:	bf00      	nop
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	e000e010 	.word	0xe000e010

08009e20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e24:	2100      	movs	r1, #0
 8009e26:	f06f 0004 	mvn.w	r0, #4
 8009e2a:	f7ff ffbf 	bl	8009dac <__NVIC_SetPriority>
#endif
}
 8009e2e:	bf00      	nop
 8009e30:	bd80      	pop	{r7, pc}
	...

08009e34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e3a:	f3ef 8305 	mrs	r3, IPSR
 8009e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8009e40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009e46:	f06f 0305 	mvn.w	r3, #5
 8009e4a:	607b      	str	r3, [r7, #4]
 8009e4c:	e00c      	b.n	8009e68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e4e:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <osKernelInitialize+0x44>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d105      	bne.n	8009e62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e56:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <osKernelInitialize+0x44>)
 8009e58:	2201      	movs	r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	607b      	str	r3, [r7, #4]
 8009e60:	e002      	b.n	8009e68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e62:	f04f 33ff 	mov.w	r3, #4294967295
 8009e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e68:	687b      	ldr	r3, [r7, #4]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	2000289c 	.word	0x2000289c

08009e7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e82:	f3ef 8305 	mrs	r3, IPSR
 8009e86:	603b      	str	r3, [r7, #0]
  return(result);
 8009e88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e8e:	f06f 0305 	mvn.w	r3, #5
 8009e92:	607b      	str	r3, [r7, #4]
 8009e94:	e010      	b.n	8009eb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e96:	4b0b      	ldr	r3, [pc, #44]	; (8009ec4 <osKernelStart+0x48>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d109      	bne.n	8009eb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e9e:	f7ff ffbf 	bl	8009e20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ea2:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <osKernelStart+0x48>)
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ea8:	f001 f910 	bl	800b0cc <vTaskStartScheduler>
      stat = osOK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	607b      	str	r3, [r7, #4]
 8009eb0:	e002      	b.n	8009eb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009eb8:	687b      	ldr	r3, [r7, #4]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	2000289c 	.word	0x2000289c

08009ec8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08e      	sub	sp, #56	; 0x38
 8009ecc:	af04      	add	r7, sp, #16
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ed8:	f3ef 8305 	mrs	r3, IPSR
 8009edc:	617b      	str	r3, [r7, #20]
  return(result);
 8009ede:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d17e      	bne.n	8009fe2 <osThreadNew+0x11a>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d07b      	beq.n	8009fe2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009eea:	2380      	movs	r3, #128	; 0x80
 8009eec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009eee:	2318      	movs	r3, #24
 8009ef0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8009efa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d045      	beq.n	8009f8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d002      	beq.n	8009f10 <osThreadNew+0x48>
        name = attr->name;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d008      	beq.n	8009f36 <osThreadNew+0x6e>
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	2b38      	cmp	r3, #56	; 0x38
 8009f28:	d805      	bhi.n	8009f36 <osThreadNew+0x6e>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <osThreadNew+0x72>
        return (NULL);
 8009f36:	2300      	movs	r3, #0
 8009f38:	e054      	b.n	8009fe4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	089b      	lsrs	r3, r3, #2
 8009f48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00e      	beq.n	8009f70 <osThreadNew+0xa8>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	2b5b      	cmp	r3, #91	; 0x5b
 8009f58:	d90a      	bls.n	8009f70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d006      	beq.n	8009f70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <osThreadNew+0xa8>
        mem = 1;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	61bb      	str	r3, [r7, #24]
 8009f6e:	e010      	b.n	8009f92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10c      	bne.n	8009f92 <osThreadNew+0xca>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d108      	bne.n	8009f92 <osThreadNew+0xca>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d104      	bne.n	8009f92 <osThreadNew+0xca>
          mem = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	61bb      	str	r3, [r7, #24]
 8009f8c:	e001      	b.n	8009f92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d110      	bne.n	8009fba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fa0:	9202      	str	r2, [sp, #8]
 8009fa2:	9301      	str	r3, [sp, #4]
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	6a3a      	ldr	r2, [r7, #32]
 8009fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 fe38 	bl	800ac24 <xTaskCreateStatic>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	613b      	str	r3, [r7, #16]
 8009fb8:	e013      	b.n	8009fe2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d110      	bne.n	8009fe2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	f107 0310 	add.w	r3, r7, #16
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fe83 	bl	800acde <xTaskCreate>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d001      	beq.n	8009fe2 <osThreadNew+0x11a>
            hTask = NULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009fe2:	693b      	ldr	r3, [r7, #16]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3728      	adds	r7, #40	; 0x28
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ff4:	f3ef 8305 	mrs	r3, IPSR
 8009ff8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <osDelay+0x1c>
    stat = osErrorISR;
 800a000:	f06f 0305 	mvn.w	r3, #5
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	e007      	b.n	800a018 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 f826 	bl	800b064 <vTaskDelay>
    }
  }

  return (stat);
 800a018:	68fb      	ldr	r3, [r7, #12]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800a022:	b580      	push	{r7, lr}
 800a024:	b086      	sub	sp, #24
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a02a:	f3ef 8305 	mrs	r3, IPSR
 800a02e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a030:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <osDelayUntil+0x1c>
    stat = osErrorISR;
 800a036:	f06f 0305 	mvn.w	r3, #5
 800a03a:	617b      	str	r3, [r7, #20]
 800a03c:	e019      	b.n	800a072 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800a03e:	2300      	movs	r3, #0
 800a040:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800a042:	f001 f955 	bl	800b2f0 <xTaskGetTickCount>
 800a046:	4603      	mov	r3, r0
 800a048:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d009      	beq.n	800a06c <osDelayUntil+0x4a>
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	db06      	blt.n	800a06c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800a05e:	f107 0308 	add.w	r3, r7, #8
 800a062:	6939      	ldr	r1, [r7, #16]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 ff7f 	bl	800af68 <vTaskDelayUntil>
 800a06a:	e002      	b.n	800a072 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800a06c:	f06f 0303 	mvn.w	r3, #3
 800a070:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a072:	697b      	ldr	r3, [r7, #20]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4a07      	ldr	r2, [pc, #28]	; (800a0a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a08c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	4a06      	ldr	r2, [pc, #24]	; (800a0ac <vApplicationGetIdleTaskMemory+0x30>)
 800a092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2280      	movs	r2, #128	; 0x80
 800a098:	601a      	str	r2, [r3, #0]
}
 800a09a:	bf00      	nop
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	200028a0 	.word	0x200028a0
 800a0ac:	200028fc 	.word	0x200028fc

0800a0b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4a07      	ldr	r2, [pc, #28]	; (800a0dc <vApplicationGetTimerTaskMemory+0x2c>)
 800a0c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	4a06      	ldr	r2, [pc, #24]	; (800a0e0 <vApplicationGetTimerTaskMemory+0x30>)
 800a0c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0ce:	601a      	str	r2, [r3, #0]
}
 800a0d0:	bf00      	nop
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20002afc 	.word	0x20002afc
 800a0e0:	20002b58 	.word	0x20002b58

0800a0e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f103 0208 	add.w	r2, r3, #8
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f103 0208 	add.w	r2, r3, #8
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f103 0208 	add.w	r2, r3, #8
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a132:	bf00      	nop
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	601a      	str	r2, [r3, #0]
}
 800a17a:	bf00      	nop
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a186:	b480      	push	{r7}
 800a188:	b085      	sub	sp, #20
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19c:	d103      	bne.n	800a1a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	e00c      	b.n	800a1c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	e002      	b.n	800a1b4 <vListInsert+0x2e>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d2f6      	bcs.n	800a1ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	601a      	str	r2, [r3, #0]
}
 800a1ec:	bf00      	nop
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	6892      	ldr	r2, [r2, #8]
 800a20e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	6852      	ldr	r2, [r2, #4]
 800a218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	429a      	cmp	r2, r3
 800a222:	d103      	bne.n	800a22c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	1e5a      	subs	r2, r3, #1
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a276:	f002 f8cd 	bl	800c414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a282:	68f9      	ldr	r1, [r7, #12]
 800a284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a286:	fb01 f303 	mul.w	r3, r1, r3
 800a28a:	441a      	add	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	68f9      	ldr	r1, [r7, #12]
 800a2aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2ac:	fb01 f303 	mul.w	r3, r1, r3
 800a2b0:	441a      	add	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	22ff      	movs	r2, #255	; 0xff
 800a2ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	22ff      	movs	r2, #255	; 0xff
 800a2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d114      	bne.n	800a2f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d01a      	beq.n	800a30a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3310      	adds	r3, #16
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 f981 	bl	800b5e0 <xTaskRemoveFromEventList>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d012      	beq.n	800a30a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2e4:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <xQueueGenericReset+0xcc>)
 800a2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	e009      	b.n	800a30a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3310      	adds	r3, #16
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff fef2 	bl	800a0e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3324      	adds	r3, #36	; 0x24
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff feed 	bl	800a0e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a30a:	f002 f8b3 	bl	800c474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a30e:	2301      	movs	r3, #1
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08e      	sub	sp, #56	; 0x38
 800a320:	af02      	add	r7, sp, #8
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10a      	bne.n	800a346 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10a      	bne.n	800a362 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a35e:	bf00      	nop
 800a360:	e7fe      	b.n	800a360 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <xQueueGenericCreateStatic+0x52>
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <xQueueGenericCreateStatic+0x56>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <xQueueGenericCreateStatic+0x58>
 800a372:	2300      	movs	r3, #0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	623b      	str	r3, [r7, #32]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <xQueueGenericCreateStatic+0x7e>
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <xQueueGenericCreateStatic+0x82>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <xQueueGenericCreateStatic+0x84>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10a      	bne.n	800a3ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	61fb      	str	r3, [r7, #28]
}
 800a3b6:	bf00      	nop
 800a3b8:	e7fe      	b.n	800a3b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3ba:	2350      	movs	r3, #80	; 0x50
 800a3bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2b50      	cmp	r3, #80	; 0x50
 800a3c2:	d00a      	beq.n	800a3da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	61bb      	str	r3, [r7, #24]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a3da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00d      	beq.n	800a402 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 f805 	bl	800a40c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a404:	4618      	mov	r0, r3
 800a406:	3730      	adds	r7, #48	; 0x30
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d103      	bne.n	800a428 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	69ba      	ldr	r2, [r7, #24]
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	e002      	b.n	800a42e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a43a:	2101      	movs	r1, #1
 800a43c:	69b8      	ldr	r0, [r7, #24]
 800a43e:	f7ff ff05 	bl	800a24c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	78fa      	ldrb	r2, [r7, #3]
 800a446:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a44a:	bf00      	nop
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08e      	sub	sp, #56	; 0x38
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a462:	2300      	movs	r3, #0
 800a464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <xQueueGenericSend+0x32>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d103      	bne.n	800a494 <xQueueGenericSend+0x40>
 800a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <xQueueGenericSend+0x44>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <xQueueGenericSend+0x46>
 800a498:	2300      	movs	r3, #0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10a      	bne.n	800a4b4 <xQueueGenericSend+0x60>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4b0:	bf00      	nop
 800a4b2:	e7fe      	b.n	800a4b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d103      	bne.n	800a4c2 <xQueueGenericSend+0x6e>
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d101      	bne.n	800a4c6 <xQueueGenericSend+0x72>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <xQueueGenericSend+0x74>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	623b      	str	r3, [r7, #32]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4e2:	f001 fa3b 	bl	800b95c <xTaskGetSchedulerState>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <xQueueGenericSend+0x9e>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <xQueueGenericSend+0xa2>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e000      	b.n	800a4f8 <xQueueGenericSend+0xa4>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10a      	bne.n	800a512 <xQueueGenericSend+0xbe>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	61fb      	str	r3, [r7, #28]
}
 800a50e:	bf00      	nop
 800a510:	e7fe      	b.n	800a510 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a512:	f001 ff7f 	bl	800c414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51e:	429a      	cmp	r2, r3
 800a520:	d302      	bcc.n	800a528 <xQueueGenericSend+0xd4>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b02      	cmp	r3, #2
 800a526:	d129      	bne.n	800a57c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	68b9      	ldr	r1, [r7, #8]
 800a52c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a52e:	f000 fa0b 	bl	800a948 <prvCopyDataToQueue>
 800a532:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d010      	beq.n	800a55e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	3324      	adds	r3, #36	; 0x24
 800a540:	4618      	mov	r0, r3
 800a542:	f001 f84d 	bl	800b5e0 <xTaskRemoveFromEventList>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d013      	beq.n	800a574 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a54c:	4b3f      	ldr	r3, [pc, #252]	; (800a64c <xQueueGenericSend+0x1f8>)
 800a54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	e00a      	b.n	800a574 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a560:	2b00      	cmp	r3, #0
 800a562:	d007      	beq.n	800a574 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a564:	4b39      	ldr	r3, [pc, #228]	; (800a64c <xQueueGenericSend+0x1f8>)
 800a566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a574:	f001 ff7e 	bl	800c474 <vPortExitCritical>
				return pdPASS;
 800a578:	2301      	movs	r3, #1
 800a57a:	e063      	b.n	800a644 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d103      	bne.n	800a58a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a582:	f001 ff77 	bl	800c474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a586:	2300      	movs	r3, #0
 800a588:	e05c      	b.n	800a644 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d106      	bne.n	800a59e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a590:	f107 0314 	add.w	r3, r7, #20
 800a594:	4618      	mov	r0, r3
 800a596:	f001 f887 	bl	800b6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a59a:	2301      	movs	r3, #1
 800a59c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a59e:	f001 ff69 	bl	800c474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5a2:	f000 fdf9 	bl	800b198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5a6:	f001 ff35 	bl	800c414 <vPortEnterCritical>
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5b0:	b25b      	sxtb	r3, r3
 800a5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b6:	d103      	bne.n	800a5c0 <xQueueGenericSend+0x16c>
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5c6:	b25b      	sxtb	r3, r3
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5cc:	d103      	bne.n	800a5d6 <xQueueGenericSend+0x182>
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5d6:	f001 ff4d 	bl	800c474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5da:	1d3a      	adds	r2, r7, #4
 800a5dc:	f107 0314 	add.w	r3, r7, #20
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 f876 	bl	800b6d4 <xTaskCheckForTimeOut>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d124      	bne.n	800a638 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f0:	f000 faa2 	bl	800ab38 <prvIsQueueFull>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d018      	beq.n	800a62c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	3310      	adds	r3, #16
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f000 ff9c 	bl	800b540 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a60a:	f000 fa2d 	bl	800aa68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a60e:	f000 fdd1 	bl	800b1b4 <xTaskResumeAll>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	f47f af7c 	bne.w	800a512 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a61a:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <xQueueGenericSend+0x1f8>)
 800a61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	e772      	b.n	800a512 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a62c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a62e:	f000 fa1b 	bl	800aa68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a632:	f000 fdbf 	bl	800b1b4 <xTaskResumeAll>
 800a636:	e76c      	b.n	800a512 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a63a:	f000 fa15 	bl	800aa68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a63e:	f000 fdb9 	bl	800b1b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a642:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a644:	4618      	mov	r0, r3
 800a646:	3738      	adds	r7, #56	; 0x38
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	e000ed04 	.word	0xe000ed04

0800a650 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b090      	sub	sp, #64	; 0x40
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10a      	bne.n	800a67e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a67a:	bf00      	nop
 800a67c:	e7fe      	b.n	800a67c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d103      	bne.n	800a68c <xQueueGenericSendFromISR+0x3c>
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <xQueueGenericSendFromISR+0x40>
 800a68c:	2301      	movs	r3, #1
 800a68e:	e000      	b.n	800a692 <xQueueGenericSendFromISR+0x42>
 800a690:	2300      	movs	r3, #0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10a      	bne.n	800a6ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d103      	bne.n	800a6ba <xQueueGenericSendFromISR+0x6a>
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d101      	bne.n	800a6be <xQueueGenericSendFromISR+0x6e>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e000      	b.n	800a6c0 <xQueueGenericSendFromISR+0x70>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	623b      	str	r3, [r7, #32]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6da:	f001 ff7d 	bl	800c5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6de:	f3ef 8211 	mrs	r2, BASEPRI
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	61fa      	str	r2, [r7, #28]
 800a6f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a702:	429a      	cmp	r2, r3
 800a704:	d302      	bcc.n	800a70c <xQueueGenericSendFromISR+0xbc>
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d12f      	bne.n	800a76c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a722:	f000 f911 	bl	800a948 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a726:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d112      	bne.n	800a756 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	2b00      	cmp	r3, #0
 800a736:	d016      	beq.n	800a766 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	3324      	adds	r3, #36	; 0x24
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 ff4f 	bl	800b5e0 <xTaskRemoveFromEventList>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00e      	beq.n	800a766 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	e007      	b.n	800a766 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a756:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a75a:	3301      	adds	r3, #1
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	b25a      	sxtb	r2, r3
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a766:	2301      	movs	r3, #1
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a76a:	e001      	b.n	800a770 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a76c:	2300      	movs	r3, #0
 800a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a772:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a77a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3740      	adds	r7, #64	; 0x40
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08c      	sub	sp, #48	; 0x30
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a794:	2300      	movs	r3, #0
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <xQueueReceive+0x30>
	__asm volatile
 800a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a6:	f383 8811 	msr	BASEPRI, r3
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	623b      	str	r3, [r7, #32]
}
 800a7b4:	bf00      	nop
 800a7b6:	e7fe      	b.n	800a7b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <xQueueReceive+0x3e>
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <xQueueReceive+0x42>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e000      	b.n	800a7cc <xQueueReceive+0x44>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10a      	bne.n	800a7e6 <xQueueReceive+0x5e>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	61fb      	str	r3, [r7, #28]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7e6:	f001 f8b9 	bl	800b95c <xTaskGetSchedulerState>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d102      	bne.n	800a7f6 <xQueueReceive+0x6e>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <xQueueReceive+0x72>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e000      	b.n	800a7fc <xQueueReceive+0x74>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10a      	bne.n	800a816 <xQueueReceive+0x8e>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	61bb      	str	r3, [r7, #24]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a816:	f001 fdfd 	bl	800c414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	d01f      	beq.n	800a866 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a82a:	f000 f8f7 	bl	800aa1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	1e5a      	subs	r2, r3, #1
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00f      	beq.n	800a85e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a840:	3310      	adds	r3, #16
 800a842:	4618      	mov	r0, r3
 800a844:	f000 fecc 	bl	800b5e0 <xTaskRemoveFromEventList>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d007      	beq.n	800a85e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a84e:	4b3d      	ldr	r3, [pc, #244]	; (800a944 <xQueueReceive+0x1bc>)
 800a850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a85e:	f001 fe09 	bl	800c474 <vPortExitCritical>
				return pdPASS;
 800a862:	2301      	movs	r3, #1
 800a864:	e069      	b.n	800a93a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d103      	bne.n	800a874 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a86c:	f001 fe02 	bl	800c474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a870:	2300      	movs	r3, #0
 800a872:	e062      	b.n	800a93a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	2b00      	cmp	r3, #0
 800a878:	d106      	bne.n	800a888 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a87a:	f107 0310 	add.w	r3, r7, #16
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 ff12 	bl	800b6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a884:	2301      	movs	r3, #1
 800a886:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a888:	f001 fdf4 	bl	800c474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a88c:	f000 fc84 	bl	800b198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a890:	f001 fdc0 	bl	800c414 <vPortEnterCritical>
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a89a:	b25b      	sxtb	r3, r3
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a0:	d103      	bne.n	800a8aa <xQueueReceive+0x122>
 800a8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8b0:	b25b      	sxtb	r3, r3
 800a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b6:	d103      	bne.n	800a8c0 <xQueueReceive+0x138>
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8c0:	f001 fdd8 	bl	800c474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8c4:	1d3a      	adds	r2, r7, #4
 800a8c6:	f107 0310 	add.w	r3, r7, #16
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 ff01 	bl	800b6d4 <xTaskCheckForTimeOut>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d123      	bne.n	800a920 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8da:	f000 f917 	bl	800ab0c <prvIsQueueEmpty>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d017      	beq.n	800a914 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	3324      	adds	r3, #36	; 0x24
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fe27 	bl	800b540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8f4:	f000 f8b8 	bl	800aa68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8f8:	f000 fc5c 	bl	800b1b4 <xTaskResumeAll>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d189      	bne.n	800a816 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a902:	4b10      	ldr	r3, [pc, #64]	; (800a944 <xQueueReceive+0x1bc>)
 800a904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	e780      	b.n	800a816 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a916:	f000 f8a7 	bl	800aa68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a91a:	f000 fc4b 	bl	800b1b4 <xTaskResumeAll>
 800a91e:	e77a      	b.n	800a816 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a922:	f000 f8a1 	bl	800aa68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a926:	f000 fc45 	bl	800b1b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a92a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a92c:	f000 f8ee 	bl	800ab0c <prvIsQueueEmpty>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	f43f af6f 	beq.w	800a816 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a938:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3730      	adds	r7, #48	; 0x30
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	e000ed04 	.word	0xe000ed04

0800a948 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a954:	2300      	movs	r3, #0
 800a956:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10d      	bne.n	800a982 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d14d      	bne.n	800aa0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	4618      	mov	r0, r3
 800a974:	f001 f810 	bl	800b998 <xTaskPriorityDisinherit>
 800a978:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	609a      	str	r2, [r3, #8]
 800a980:	e043      	b.n	800aa0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d119      	bne.n	800a9bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6858      	ldr	r0, [r3, #4]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	461a      	mov	r2, r3
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	f002 f874 	bl	800ca80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a0:	441a      	add	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d32b      	bcc.n	800aa0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	605a      	str	r2, [r3, #4]
 800a9ba:	e026      	b.n	800aa0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	68d8      	ldr	r0, [r3, #12]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	68b9      	ldr	r1, [r7, #8]
 800a9c8:	f002 f85a 	bl	800ca80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	68da      	ldr	r2, [r3, #12]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d4:	425b      	negs	r3, r3
 800a9d6:	441a      	add	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	68da      	ldr	r2, [r3, #12]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d207      	bcs.n	800a9f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	689a      	ldr	r2, [r3, #8]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f0:	425b      	negs	r3, r3
 800a9f2:	441a      	add	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d105      	bne.n	800aa0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa12:	697b      	ldr	r3, [r7, #20]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d018      	beq.n	800aa60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68da      	ldr	r2, [r3, #12]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa36:	441a      	add	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68da      	ldr	r2, [r3, #12]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d303      	bcc.n	800aa50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68d9      	ldr	r1, [r3, #12]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6838      	ldr	r0, [r7, #0]
 800aa5c:	f002 f810 	bl	800ca80 <memcpy>
	}
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa70:	f001 fcd0 	bl	800c414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa7c:	e011      	b.n	800aaa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d012      	beq.n	800aaac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3324      	adds	r3, #36	; 0x24
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fda8 	bl	800b5e0 <xTaskRemoveFromEventList>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa96:	f000 fe7f 	bl	800b798 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aaa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	dce9      	bgt.n	800aa7e <prvUnlockQueue+0x16>
 800aaaa:	e000      	b.n	800aaae <prvUnlockQueue+0x46>
					break;
 800aaac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	22ff      	movs	r2, #255	; 0xff
 800aab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aab6:	f001 fcdd 	bl	800c474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aaba:	f001 fcab 	bl	800c414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aac4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aac6:	e011      	b.n	800aaec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	691b      	ldr	r3, [r3, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d012      	beq.n	800aaf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	3310      	adds	r3, #16
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 fd83 	bl	800b5e0 <xTaskRemoveFromEventList>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aae0:	f000 fe5a 	bl	800b798 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	dce9      	bgt.n	800aac8 <prvUnlockQueue+0x60>
 800aaf4:	e000      	b.n	800aaf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aaf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	22ff      	movs	r2, #255	; 0xff
 800aafc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab00:	f001 fcb8 	bl	800c474 <vPortExitCritical>
}
 800ab04:	bf00      	nop
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab14:	f001 fc7e 	bl	800c414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d102      	bne.n	800ab26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab20:	2301      	movs	r3, #1
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	e001      	b.n	800ab2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab2a:	f001 fca3 	bl	800c474 <vPortExitCritical>

	return xReturn;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab40:	f001 fc68 	bl	800c414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d102      	bne.n	800ab56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab50:	2301      	movs	r3, #1
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	e001      	b.n	800ab5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab5a:	f001 fc8b 	bl	800c474 <vPortExitCritical>

	return xReturn;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab72:	2300      	movs	r3, #0
 800ab74:	60fb      	str	r3, [r7, #12]
 800ab76:	e014      	b.n	800aba2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab78:	4a0f      	ldr	r2, [pc, #60]	; (800abb8 <vQueueAddToRegistry+0x50>)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10b      	bne.n	800ab9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab84:	490c      	ldr	r1, [pc, #48]	; (800abb8 <vQueueAddToRegistry+0x50>)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab8e:	4a0a      	ldr	r2, [pc, #40]	; (800abb8 <vQueueAddToRegistry+0x50>)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	4413      	add	r3, r2
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab9a:	e006      	b.n	800abaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	60fb      	str	r3, [r7, #12]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2b07      	cmp	r3, #7
 800aba6:	d9e7      	bls.n	800ab78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aba8:	bf00      	nop
 800abaa:	bf00      	nop
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	20002f58 	.word	0x20002f58

0800abbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800abcc:	f001 fc22 	bl	800c414 <vPortEnterCritical>
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abd6:	b25b      	sxtb	r3, r3
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abdc:	d103      	bne.n	800abe6 <vQueueWaitForMessageRestricted+0x2a>
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abec:	b25b      	sxtb	r3, r3
 800abee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf2:	d103      	bne.n	800abfc <vQueueWaitForMessageRestricted+0x40>
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abfc:	f001 fc3a 	bl	800c474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d106      	bne.n	800ac16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	3324      	adds	r3, #36	; 0x24
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	68b9      	ldr	r1, [r7, #8]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 fcb9 	bl	800b588 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac16:	6978      	ldr	r0, [r7, #20]
 800ac18:	f7ff ff26 	bl	800aa68 <prvUnlockQueue>
	}
 800ac1c:	bf00      	nop
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b08e      	sub	sp, #56	; 0x38
 800ac28:	af04      	add	r7, sp, #16
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10a      	bne.n	800ac4e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	623b      	str	r3, [r7, #32]
}
 800ac4a:	bf00      	nop
 800ac4c:	e7fe      	b.n	800ac4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10a      	bne.n	800ac6a <xTaskCreateStatic+0x46>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	61fb      	str	r3, [r7, #28]
}
 800ac66:	bf00      	nop
 800ac68:	e7fe      	b.n	800ac68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac6a:	235c      	movs	r3, #92	; 0x5c
 800ac6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2b5c      	cmp	r3, #92	; 0x5c
 800ac72:	d00a      	beq.n	800ac8a <xTaskCreateStatic+0x66>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	61bb      	str	r3, [r7, #24]
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d01e      	beq.n	800acd0 <xTaskCreateStatic+0xac>
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d01b      	beq.n	800acd0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aca0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	2202      	movs	r2, #2
 800aca6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acaa:	2300      	movs	r3, #0
 800acac:	9303      	str	r3, [sp, #12]
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	9302      	str	r3, [sp, #8]
 800acb2:	f107 0314 	add.w	r3, r7, #20
 800acb6:	9301      	str	r3, [sp, #4]
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	68b9      	ldr	r1, [r7, #8]
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 f850 	bl	800ad68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acca:	f000 f8dd 	bl	800ae88 <prvAddNewTaskToReadyList>
 800acce:	e001      	b.n	800acd4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800acd0:	2300      	movs	r3, #0
 800acd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acd4:	697b      	ldr	r3, [r7, #20]
	}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3728      	adds	r7, #40	; 0x28
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b08c      	sub	sp, #48	; 0x30
 800ace2:	af04      	add	r7, sp, #16
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	603b      	str	r3, [r7, #0]
 800acea:	4613      	mov	r3, r2
 800acec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800acee:	88fb      	ldrh	r3, [r7, #6]
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f001 fcb0 	bl	800c658 <pvPortMalloc>
 800acf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00e      	beq.n	800ad1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad00:	205c      	movs	r0, #92	; 0x5c
 800ad02:	f001 fca9 	bl	800c658 <pvPortMalloc>
 800ad06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	631a      	str	r2, [r3, #48]	; 0x30
 800ad14:	e005      	b.n	800ad22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad16:	6978      	ldr	r0, [r7, #20]
 800ad18:	f001 fd6a 	bl	800c7f0 <vPortFree>
 800ad1c:	e001      	b.n	800ad22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d017      	beq.n	800ad58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad30:	88fa      	ldrh	r2, [r7, #6]
 800ad32:	2300      	movs	r3, #0
 800ad34:	9303      	str	r3, [sp, #12]
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	9302      	str	r3, [sp, #8]
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f000 f80e 	bl	800ad68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad4c:	69f8      	ldr	r0, [r7, #28]
 800ad4e:	f000 f89b 	bl	800ae88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad52:	2301      	movs	r3, #1
 800ad54:	61bb      	str	r3, [r7, #24]
 800ad56:	e002      	b.n	800ad5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad58:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
	}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3720      	adds	r7, #32
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	461a      	mov	r2, r3
 800ad80:	21a5      	movs	r1, #165	; 0xa5
 800ad82:	f001 fe8b 	bl	800ca9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad90:	3b01      	subs	r3, #1
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	f023 0307 	bic.w	r3, r3, #7
 800ad9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	f003 0307 	and.w	r3, r3, #7
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00a      	beq.n	800adc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	617b      	str	r3, [r7, #20]
}
 800adbc:	bf00      	nop
 800adbe:	e7fe      	b.n	800adbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d01f      	beq.n	800ae06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adc6:	2300      	movs	r3, #0
 800adc8:	61fb      	str	r3, [r7, #28]
 800adca:	e012      	b.n	800adf2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	4413      	add	r3, r2
 800add2:	7819      	ldrb	r1, [r3, #0]
 800add4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	4413      	add	r3, r2
 800adda:	3334      	adds	r3, #52	; 0x34
 800addc:	460a      	mov	r2, r1
 800adde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	4413      	add	r3, r2
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d006      	beq.n	800adfa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	3301      	adds	r3, #1
 800adf0:	61fb      	str	r3, [r7, #28]
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	2b0f      	cmp	r3, #15
 800adf6:	d9e9      	bls.n	800adcc <prvInitialiseNewTask+0x64>
 800adf8:	e000      	b.n	800adfc <prvInitialiseNewTask+0x94>
			{
				break;
 800adfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae04:	e003      	b.n	800ae0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	2b37      	cmp	r3, #55	; 0x37
 800ae12:	d901      	bls.n	800ae18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae14:	2337      	movs	r3, #55	; 0x37
 800ae16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae26:	2200      	movs	r2, #0
 800ae28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff f978 	bl	800a124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	3318      	adds	r3, #24
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7ff f973 	bl	800a124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	2200      	movs	r2, #0
 800ae58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	68f9      	ldr	r1, [r7, #12]
 800ae66:	69b8      	ldr	r0, [r7, #24]
 800ae68:	f001 f9a6 	bl	800c1b8 <pxPortInitialiseStack>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae7e:	bf00      	nop
 800ae80:	3720      	adds	r7, #32
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
	...

0800ae88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae90:	f001 fac0 	bl	800c414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae94:	4b2d      	ldr	r3, [pc, #180]	; (800af4c <prvAddNewTaskToReadyList+0xc4>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	4a2c      	ldr	r2, [pc, #176]	; (800af4c <prvAddNewTaskToReadyList+0xc4>)
 800ae9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae9e:	4b2c      	ldr	r3, [pc, #176]	; (800af50 <prvAddNewTaskToReadyList+0xc8>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d109      	bne.n	800aeba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aea6:	4a2a      	ldr	r2, [pc, #168]	; (800af50 <prvAddNewTaskToReadyList+0xc8>)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aeac:	4b27      	ldr	r3, [pc, #156]	; (800af4c <prvAddNewTaskToReadyList+0xc4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d110      	bne.n	800aed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aeb4:	f000 fc94 	bl	800b7e0 <prvInitialiseTaskLists>
 800aeb8:	e00d      	b.n	800aed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aeba:	4b26      	ldr	r3, [pc, #152]	; (800af54 <prvAddNewTaskToReadyList+0xcc>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d109      	bne.n	800aed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aec2:	4b23      	ldr	r3, [pc, #140]	; (800af50 <prvAddNewTaskToReadyList+0xc8>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aecc:	429a      	cmp	r2, r3
 800aece:	d802      	bhi.n	800aed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aed0:	4a1f      	ldr	r2, [pc, #124]	; (800af50 <prvAddNewTaskToReadyList+0xc8>)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aed6:	4b20      	ldr	r3, [pc, #128]	; (800af58 <prvAddNewTaskToReadyList+0xd0>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3301      	adds	r3, #1
 800aedc:	4a1e      	ldr	r2, [pc, #120]	; (800af58 <prvAddNewTaskToReadyList+0xd0>)
 800aede:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aee0:	4b1d      	ldr	r3, [pc, #116]	; (800af58 <prvAddNewTaskToReadyList+0xd0>)
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeec:	4b1b      	ldr	r3, [pc, #108]	; (800af5c <prvAddNewTaskToReadyList+0xd4>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d903      	bls.n	800aefc <prvAddNewTaskToReadyList+0x74>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	4a18      	ldr	r2, [pc, #96]	; (800af5c <prvAddNewTaskToReadyList+0xd4>)
 800aefa:	6013      	str	r3, [r2, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4a15      	ldr	r2, [pc, #84]	; (800af60 <prvAddNewTaskToReadyList+0xd8>)
 800af0a:	441a      	add	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3304      	adds	r3, #4
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f7ff f913 	bl	800a13e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af18:	f001 faac 	bl	800c474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af1c:	4b0d      	ldr	r3, [pc, #52]	; (800af54 <prvAddNewTaskToReadyList+0xcc>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00e      	beq.n	800af42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af24:	4b0a      	ldr	r3, [pc, #40]	; (800af50 <prvAddNewTaskToReadyList+0xc8>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2e:	429a      	cmp	r2, r3
 800af30:	d207      	bcs.n	800af42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af32:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <prvAddNewTaskToReadyList+0xdc>)
 800af34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af42:	bf00      	nop
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	2000346c 	.word	0x2000346c
 800af50:	20002f98 	.word	0x20002f98
 800af54:	20003478 	.word	0x20003478
 800af58:	20003488 	.word	0x20003488
 800af5c:	20003474 	.word	0x20003474
 800af60:	20002f9c 	.word	0x20002f9c
 800af64:	e000ed04 	.word	0xe000ed04

0800af68 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08a      	sub	sp, #40	; 0x28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800af72:	2300      	movs	r3, #0
 800af74:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <vTaskDelayUntil+0x2a>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	617b      	str	r3, [r7, #20]
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <vTaskDelayUntil+0x46>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	613b      	str	r3, [r7, #16]
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800afae:	4b2a      	ldr	r3, [pc, #168]	; (800b058 <vTaskDelayUntil+0xf0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00a      	beq.n	800afcc <vTaskDelayUntil+0x64>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	60fb      	str	r3, [r7, #12]
}
 800afc8:	bf00      	nop
 800afca:	e7fe      	b.n	800afca <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800afcc:	f000 f8e4 	bl	800b198 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800afd0:	4b22      	ldr	r3, [pc, #136]	; (800b05c <vTaskDelayUntil+0xf4>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	4413      	add	r3, r2
 800afde:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6a3a      	ldr	r2, [r7, #32]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d20b      	bcs.n	800b002 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69fa      	ldr	r2, [r7, #28]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d211      	bcs.n	800b018 <vTaskDelayUntil+0xb0>
 800aff4:	69fa      	ldr	r2, [r7, #28]
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d90d      	bls.n	800b018 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800affc:	2301      	movs	r3, #1
 800affe:	627b      	str	r3, [r7, #36]	; 0x24
 800b000:	e00a      	b.n	800b018 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69fa      	ldr	r2, [r7, #28]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d303      	bcc.n	800b014 <vTaskDelayUntil+0xac>
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	6a3b      	ldr	r3, [r7, #32]
 800b010:	429a      	cmp	r2, r3
 800b012:	d901      	bls.n	800b018 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b014:	2301      	movs	r3, #1
 800b016:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	69fa      	ldr	r2, [r7, #28]
 800b01c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b020:	2b00      	cmp	r3, #0
 800b022:	d006      	beq.n	800b032 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b024:	69fa      	ldr	r2, [r7, #28]
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	2100      	movs	r1, #0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 fd21 	bl	800ba74 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b032:	f000 f8bf 	bl	800b1b4 <xTaskResumeAll>
 800b036:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d107      	bne.n	800b04e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b03e:	4b08      	ldr	r3, [pc, #32]	; (800b060 <vTaskDelayUntil+0xf8>)
 800b040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b044:	601a      	str	r2, [r3, #0]
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b04e:	bf00      	nop
 800b050:	3728      	adds	r7, #40	; 0x28
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20003494 	.word	0x20003494
 800b05c:	20003470 	.word	0x20003470
 800b060:	e000ed04 	.word	0xe000ed04

0800b064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d017      	beq.n	800b0a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b076:	4b13      	ldr	r3, [pc, #76]	; (800b0c4 <vTaskDelay+0x60>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00a      	beq.n	800b094 <vTaskDelay+0x30>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	60bb      	str	r3, [r7, #8]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b094:	f000 f880 	bl	800b198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b098:	2100      	movs	r1, #0
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fcea 	bl	800ba74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0a0:	f000 f888 	bl	800b1b4 <xTaskResumeAll>
 800b0a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d107      	bne.n	800b0bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <vTaskDelay+0x64>)
 800b0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0bc:	bf00      	nop
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	20003494 	.word	0x20003494
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08a      	sub	sp, #40	; 0x28
 800b0d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0da:	463a      	mov	r2, r7
 800b0dc:	1d39      	adds	r1, r7, #4
 800b0de:	f107 0308 	add.w	r3, r7, #8
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fe ffca 	bl	800a07c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	9202      	str	r2, [sp, #8]
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	460a      	mov	r2, r1
 800b0fa:	4921      	ldr	r1, [pc, #132]	; (800b180 <vTaskStartScheduler+0xb4>)
 800b0fc:	4821      	ldr	r0, [pc, #132]	; (800b184 <vTaskStartScheduler+0xb8>)
 800b0fe:	f7ff fd91 	bl	800ac24 <xTaskCreateStatic>
 800b102:	4603      	mov	r3, r0
 800b104:	4a20      	ldr	r2, [pc, #128]	; (800b188 <vTaskStartScheduler+0xbc>)
 800b106:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b108:	4b1f      	ldr	r3, [pc, #124]	; (800b188 <vTaskStartScheduler+0xbc>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b110:	2301      	movs	r3, #1
 800b112:	617b      	str	r3, [r7, #20]
 800b114:	e001      	b.n	800b11a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d102      	bne.n	800b126 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b120:	f000 fcfc 	bl	800bb1c <xTimerCreateTimerTask>
 800b124:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d116      	bne.n	800b15a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	613b      	str	r3, [r7, #16]
}
 800b13e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b140:	4b12      	ldr	r3, [pc, #72]	; (800b18c <vTaskStartScheduler+0xc0>)
 800b142:	f04f 32ff 	mov.w	r2, #4294967295
 800b146:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b148:	4b11      	ldr	r3, [pc, #68]	; (800b190 <vTaskStartScheduler+0xc4>)
 800b14a:	2201      	movs	r2, #1
 800b14c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b14e:	4b11      	ldr	r3, [pc, #68]	; (800b194 <vTaskStartScheduler+0xc8>)
 800b150:	2200      	movs	r2, #0
 800b152:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b154:	f001 f8bc 	bl	800c2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b158:	e00e      	b.n	800b178 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b160:	d10a      	bne.n	800b178 <vTaskStartScheduler+0xac>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	60fb      	str	r3, [r7, #12]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <vTaskStartScheduler+0xaa>
}
 800b178:	bf00      	nop
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	0800d858 	.word	0x0800d858
 800b184:	0800b7b1 	.word	0x0800b7b1
 800b188:	20003490 	.word	0x20003490
 800b18c:	2000348c 	.word	0x2000348c
 800b190:	20003478 	.word	0x20003478
 800b194:	20003470 	.word	0x20003470

0800b198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b198:	b480      	push	{r7}
 800b19a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b19c:	4b04      	ldr	r3, [pc, #16]	; (800b1b0 <vTaskSuspendAll+0x18>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	4a03      	ldr	r2, [pc, #12]	; (800b1b0 <vTaskSuspendAll+0x18>)
 800b1a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1a6:	bf00      	nop
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	20003494 	.word	0x20003494

0800b1b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1c2:	4b42      	ldr	r3, [pc, #264]	; (800b2cc <xTaskResumeAll+0x118>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10a      	bne.n	800b1e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	603b      	str	r3, [r7, #0]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1e0:	f001 f918 	bl	800c414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1e4:	4b39      	ldr	r3, [pc, #228]	; (800b2cc <xTaskResumeAll+0x118>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	4a38      	ldr	r2, [pc, #224]	; (800b2cc <xTaskResumeAll+0x118>)
 800b1ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ee:	4b37      	ldr	r3, [pc, #220]	; (800b2cc <xTaskResumeAll+0x118>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d162      	bne.n	800b2bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1f6:	4b36      	ldr	r3, [pc, #216]	; (800b2d0 <xTaskResumeAll+0x11c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d05e      	beq.n	800b2bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1fe:	e02f      	b.n	800b260 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b200:	4b34      	ldr	r3, [pc, #208]	; (800b2d4 <xTaskResumeAll+0x120>)
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3318      	adds	r3, #24
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe fff3 	bl	800a1f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	3304      	adds	r3, #4
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe ffee 	bl	800a1f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b220:	4b2d      	ldr	r3, [pc, #180]	; (800b2d8 <xTaskResumeAll+0x124>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	429a      	cmp	r2, r3
 800b226:	d903      	bls.n	800b230 <xTaskResumeAll+0x7c>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22c:	4a2a      	ldr	r2, [pc, #168]	; (800b2d8 <xTaskResumeAll+0x124>)
 800b22e:	6013      	str	r3, [r2, #0]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b234:	4613      	mov	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4a27      	ldr	r2, [pc, #156]	; (800b2dc <xTaskResumeAll+0x128>)
 800b23e:	441a      	add	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	3304      	adds	r3, #4
 800b244:	4619      	mov	r1, r3
 800b246:	4610      	mov	r0, r2
 800b248:	f7fe ff79 	bl	800a13e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b250:	4b23      	ldr	r3, [pc, #140]	; (800b2e0 <xTaskResumeAll+0x12c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b256:	429a      	cmp	r2, r3
 800b258:	d302      	bcc.n	800b260 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b25a:	4b22      	ldr	r3, [pc, #136]	; (800b2e4 <xTaskResumeAll+0x130>)
 800b25c:	2201      	movs	r2, #1
 800b25e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b260:	4b1c      	ldr	r3, [pc, #112]	; (800b2d4 <xTaskResumeAll+0x120>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1cb      	bne.n	800b200 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b26e:	f000 fb55 	bl	800b91c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b272:	4b1d      	ldr	r3, [pc, #116]	; (800b2e8 <xTaskResumeAll+0x134>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d010      	beq.n	800b2a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b27e:	f000 f847 	bl	800b310 <xTaskIncrementTick>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b288:	4b16      	ldr	r3, [pc, #88]	; (800b2e4 <xTaskResumeAll+0x130>)
 800b28a:	2201      	movs	r2, #1
 800b28c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3b01      	subs	r3, #1
 800b292:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1f1      	bne.n	800b27e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b29a:	4b13      	ldr	r3, [pc, #76]	; (800b2e8 <xTaskResumeAll+0x134>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2a0:	4b10      	ldr	r3, [pc, #64]	; (800b2e4 <xTaskResumeAll+0x130>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d009      	beq.n	800b2bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2ac:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <xTaskResumeAll+0x138>)
 800b2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2bc:	f001 f8da 	bl	800c474 <vPortExitCritical>

	return xAlreadyYielded;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20003494 	.word	0x20003494
 800b2d0:	2000346c 	.word	0x2000346c
 800b2d4:	2000342c 	.word	0x2000342c
 800b2d8:	20003474 	.word	0x20003474
 800b2dc:	20002f9c 	.word	0x20002f9c
 800b2e0:	20002f98 	.word	0x20002f98
 800b2e4:	20003480 	.word	0x20003480
 800b2e8:	2000347c 	.word	0x2000347c
 800b2ec:	e000ed04 	.word	0xe000ed04

0800b2f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b2f6:	4b05      	ldr	r3, [pc, #20]	; (800b30c <xTaskGetTickCount+0x1c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b2fc:	687b      	ldr	r3, [r7, #4]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	20003470 	.word	0x20003470

0800b310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b316:	2300      	movs	r3, #0
 800b318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b31a:	4b4f      	ldr	r3, [pc, #316]	; (800b458 <xTaskIncrementTick+0x148>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f040 808f 	bne.w	800b442 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b324:	4b4d      	ldr	r3, [pc, #308]	; (800b45c <xTaskIncrementTick+0x14c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3301      	adds	r3, #1
 800b32a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b32c:	4a4b      	ldr	r2, [pc, #300]	; (800b45c <xTaskIncrementTick+0x14c>)
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d120      	bne.n	800b37a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b338:	4b49      	ldr	r3, [pc, #292]	; (800b460 <xTaskIncrementTick+0x150>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00a      	beq.n	800b358 <xTaskIncrementTick+0x48>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	603b      	str	r3, [r7, #0]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <xTaskIncrementTick+0x46>
 800b358:	4b41      	ldr	r3, [pc, #260]	; (800b460 <xTaskIncrementTick+0x150>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	4b41      	ldr	r3, [pc, #260]	; (800b464 <xTaskIncrementTick+0x154>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a3f      	ldr	r2, [pc, #252]	; (800b460 <xTaskIncrementTick+0x150>)
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	4a3f      	ldr	r2, [pc, #252]	; (800b464 <xTaskIncrementTick+0x154>)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	4b3e      	ldr	r3, [pc, #248]	; (800b468 <xTaskIncrementTick+0x158>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3301      	adds	r3, #1
 800b372:	4a3d      	ldr	r2, [pc, #244]	; (800b468 <xTaskIncrementTick+0x158>)
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	f000 fad1 	bl	800b91c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b37a:	4b3c      	ldr	r3, [pc, #240]	; (800b46c <xTaskIncrementTick+0x15c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	429a      	cmp	r2, r3
 800b382:	d349      	bcc.n	800b418 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b384:	4b36      	ldr	r3, [pc, #216]	; (800b460 <xTaskIncrementTick+0x150>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d104      	bne.n	800b398 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b38e:	4b37      	ldr	r3, [pc, #220]	; (800b46c <xTaskIncrementTick+0x15c>)
 800b390:	f04f 32ff 	mov.w	r2, #4294967295
 800b394:	601a      	str	r2, [r3, #0]
					break;
 800b396:	e03f      	b.n	800b418 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b398:	4b31      	ldr	r3, [pc, #196]	; (800b460 <xTaskIncrementTick+0x150>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d203      	bcs.n	800b3b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3b0:	4a2e      	ldr	r2, [pc, #184]	; (800b46c <xTaskIncrementTick+0x15c>)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3b6:	e02f      	b.n	800b418 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe ff1b 	bl	800a1f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d004      	beq.n	800b3d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	3318      	adds	r3, #24
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fe ff12 	bl	800a1f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d8:	4b25      	ldr	r3, [pc, #148]	; (800b470 <xTaskIncrementTick+0x160>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d903      	bls.n	800b3e8 <xTaskIncrementTick+0xd8>
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4a22      	ldr	r2, [pc, #136]	; (800b470 <xTaskIncrementTick+0x160>)
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4a1f      	ldr	r2, [pc, #124]	; (800b474 <xTaskIncrementTick+0x164>)
 800b3f6:	441a      	add	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7fe fe9d 	bl	800a13e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b408:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <xTaskIncrementTick+0x168>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	429a      	cmp	r2, r3
 800b410:	d3b8      	bcc.n	800b384 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b412:	2301      	movs	r3, #1
 800b414:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b416:	e7b5      	b.n	800b384 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b418:	4b17      	ldr	r3, [pc, #92]	; (800b478 <xTaskIncrementTick+0x168>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41e:	4915      	ldr	r1, [pc, #84]	; (800b474 <xTaskIncrementTick+0x164>)
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	440b      	add	r3, r1
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d901      	bls.n	800b434 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b434:	4b11      	ldr	r3, [pc, #68]	; (800b47c <xTaskIncrementTick+0x16c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d007      	beq.n	800b44c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	e004      	b.n	800b44c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b442:	4b0f      	ldr	r3, [pc, #60]	; (800b480 <xTaskIncrementTick+0x170>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3301      	adds	r3, #1
 800b448:	4a0d      	ldr	r2, [pc, #52]	; (800b480 <xTaskIncrementTick+0x170>)
 800b44a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b44c:	697b      	ldr	r3, [r7, #20]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20003494 	.word	0x20003494
 800b45c:	20003470 	.word	0x20003470
 800b460:	20003424 	.word	0x20003424
 800b464:	20003428 	.word	0x20003428
 800b468:	20003484 	.word	0x20003484
 800b46c:	2000348c 	.word	0x2000348c
 800b470:	20003474 	.word	0x20003474
 800b474:	20002f9c 	.word	0x20002f9c
 800b478:	20002f98 	.word	0x20002f98
 800b47c:	20003480 	.word	0x20003480
 800b480:	2000347c 	.word	0x2000347c

0800b484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b48a:	4b28      	ldr	r3, [pc, #160]	; (800b52c <vTaskSwitchContext+0xa8>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b492:	4b27      	ldr	r3, [pc, #156]	; (800b530 <vTaskSwitchContext+0xac>)
 800b494:	2201      	movs	r2, #1
 800b496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b498:	e041      	b.n	800b51e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b49a:	4b25      	ldr	r3, [pc, #148]	; (800b530 <vTaskSwitchContext+0xac>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a0:	4b24      	ldr	r3, [pc, #144]	; (800b534 <vTaskSwitchContext+0xb0>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60fb      	str	r3, [r7, #12]
 800b4a6:	e010      	b.n	800b4ca <vTaskSwitchContext+0x46>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	607b      	str	r3, [r7, #4]
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <vTaskSwitchContext+0x3e>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	491b      	ldr	r1, [pc, #108]	; (800b538 <vTaskSwitchContext+0xb4>)
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	440b      	add	r3, r1
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0e4      	beq.n	800b4a8 <vTaskSwitchContext+0x24>
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4a13      	ldr	r2, [pc, #76]	; (800b538 <vTaskSwitchContext+0xb4>)
 800b4ea:	4413      	add	r3, r2
 800b4ec:	60bb      	str	r3, [r7, #8]
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	605a      	str	r2, [r3, #4]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	685a      	ldr	r2, [r3, #4]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	3308      	adds	r3, #8
 800b500:	429a      	cmp	r2, r3
 800b502:	d104      	bne.n	800b50e <vTaskSwitchContext+0x8a>
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	605a      	str	r2, [r3, #4]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	4a09      	ldr	r2, [pc, #36]	; (800b53c <vTaskSwitchContext+0xb8>)
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	4a06      	ldr	r2, [pc, #24]	; (800b534 <vTaskSwitchContext+0xb0>)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6013      	str	r3, [r2, #0]
}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	20003494 	.word	0x20003494
 800b530:	20003480 	.word	0x20003480
 800b534:	20003474 	.word	0x20003474
 800b538:	20002f9c 	.word	0x20002f9c
 800b53c:	20002f98 	.word	0x20002f98

0800b540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10a      	bne.n	800b566 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	60fb      	str	r3, [r7, #12]
}
 800b562:	bf00      	nop
 800b564:	e7fe      	b.n	800b564 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b566:	4b07      	ldr	r3, [pc, #28]	; (800b584 <vTaskPlaceOnEventList+0x44>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3318      	adds	r3, #24
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f7fe fe09 	bl	800a186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b574:	2101      	movs	r1, #1
 800b576:	6838      	ldr	r0, [r7, #0]
 800b578:	f000 fa7c 	bl	800ba74 <prvAddCurrentTaskToDelayedList>
}
 800b57c:	bf00      	nop
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20002f98 	.word	0x20002f98

0800b588 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10a      	bne.n	800b5b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	617b      	str	r3, [r7, #20]
}
 800b5ac:	bf00      	nop
 800b5ae:	e7fe      	b.n	800b5ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	; (800b5dc <vTaskPlaceOnEventListRestricted+0x54>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3318      	adds	r3, #24
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7fe fdc0 	bl	800a13e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5ca:	6879      	ldr	r1, [r7, #4]
 800b5cc:	68b8      	ldr	r0, [r7, #8]
 800b5ce:	f000 fa51 	bl	800ba74 <prvAddCurrentTaskToDelayedList>
	}
 800b5d2:	bf00      	nop
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	20002f98 	.word	0x20002f98

0800b5e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10a      	bne.n	800b60c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	60fb      	str	r3, [r7, #12]
}
 800b608:	bf00      	nop
 800b60a:	e7fe      	b.n	800b60a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	3318      	adds	r3, #24
 800b610:	4618      	mov	r0, r3
 800b612:	f7fe fdf1 	bl	800a1f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b616:	4b1e      	ldr	r3, [pc, #120]	; (800b690 <xTaskRemoveFromEventList+0xb0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d11d      	bne.n	800b65a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	3304      	adds	r3, #4
 800b622:	4618      	mov	r0, r3
 800b624:	f7fe fde8 	bl	800a1f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62c:	4b19      	ldr	r3, [pc, #100]	; (800b694 <xTaskRemoveFromEventList+0xb4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d903      	bls.n	800b63c <xTaskRemoveFromEventList+0x5c>
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	4a16      	ldr	r2, [pc, #88]	; (800b694 <xTaskRemoveFromEventList+0xb4>)
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b640:	4613      	mov	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4a13      	ldr	r2, [pc, #76]	; (800b698 <xTaskRemoveFromEventList+0xb8>)
 800b64a:	441a      	add	r2, r3
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	3304      	adds	r3, #4
 800b650:	4619      	mov	r1, r3
 800b652:	4610      	mov	r0, r2
 800b654:	f7fe fd73 	bl	800a13e <vListInsertEnd>
 800b658:	e005      	b.n	800b666 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	3318      	adds	r3, #24
 800b65e:	4619      	mov	r1, r3
 800b660:	480e      	ldr	r0, [pc, #56]	; (800b69c <xTaskRemoveFromEventList+0xbc>)
 800b662:	f7fe fd6c 	bl	800a13e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66a:	4b0d      	ldr	r3, [pc, #52]	; (800b6a0 <xTaskRemoveFromEventList+0xc0>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b670:	429a      	cmp	r2, r3
 800b672:	d905      	bls.n	800b680 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b674:	2301      	movs	r3, #1
 800b676:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b678:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <xTaskRemoveFromEventList+0xc4>)
 800b67a:	2201      	movs	r2, #1
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	e001      	b.n	800b684 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b684:	697b      	ldr	r3, [r7, #20]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20003494 	.word	0x20003494
 800b694:	20003474 	.word	0x20003474
 800b698:	20002f9c 	.word	0x20002f9c
 800b69c:	2000342c 	.word	0x2000342c
 800b6a0:	20002f98 	.word	0x20002f98
 800b6a4:	20003480 	.word	0x20003480

0800b6a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6b0:	4b06      	ldr	r3, [pc, #24]	; (800b6cc <vTaskInternalSetTimeOutState+0x24>)
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <vTaskInternalSetTimeOutState+0x28>)
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	605a      	str	r2, [r3, #4]
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	20003484 	.word	0x20003484
 800b6d0:	20003470 	.word	0x20003470

0800b6d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b088      	sub	sp, #32
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10a      	bne.n	800b6fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	613b      	str	r3, [r7, #16]
}
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10a      	bne.n	800b716 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	60fb      	str	r3, [r7, #12]
}
 800b712:	bf00      	nop
 800b714:	e7fe      	b.n	800b714 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b716:	f000 fe7d 	bl	800c414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b71a:	4b1d      	ldr	r3, [pc, #116]	; (800b790 <xTaskCheckForTimeOut+0xbc>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	69ba      	ldr	r2, [r7, #24]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d102      	bne.n	800b73a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b734:	2300      	movs	r3, #0
 800b736:	61fb      	str	r3, [r7, #28]
 800b738:	e023      	b.n	800b782 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	4b15      	ldr	r3, [pc, #84]	; (800b794 <xTaskCheckForTimeOut+0xc0>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d007      	beq.n	800b756 <xTaskCheckForTimeOut+0x82>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d302      	bcc.n	800b756 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b750:	2301      	movs	r3, #1
 800b752:	61fb      	str	r3, [r7, #28]
 800b754:	e015      	b.n	800b782 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d20b      	bcs.n	800b778 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	1ad2      	subs	r2, r2, r3
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff ff9b 	bl	800b6a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	61fb      	str	r3, [r7, #28]
 800b776:	e004      	b.n	800b782 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b77e:	2301      	movs	r3, #1
 800b780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b782:	f000 fe77 	bl	800c474 <vPortExitCritical>

	return xReturn;
 800b786:	69fb      	ldr	r3, [r7, #28]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3720      	adds	r7, #32
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	20003470 	.word	0x20003470
 800b794:	20003484 	.word	0x20003484

0800b798 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b79c:	4b03      	ldr	r3, [pc, #12]	; (800b7ac <vTaskMissedYield+0x14>)
 800b79e:	2201      	movs	r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]
}
 800b7a2:	bf00      	nop
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	20003480 	.word	0x20003480

0800b7b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7b8:	f000 f852 	bl	800b860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7bc:	4b06      	ldr	r3, [pc, #24]	; (800b7d8 <prvIdleTask+0x28>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d9f9      	bls.n	800b7b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7c4:	4b05      	ldr	r3, [pc, #20]	; (800b7dc <prvIdleTask+0x2c>)
 800b7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7d4:	e7f0      	b.n	800b7b8 <prvIdleTask+0x8>
 800b7d6:	bf00      	nop
 800b7d8:	20002f9c 	.word	0x20002f9c
 800b7dc:	e000ed04 	.word	0xe000ed04

0800b7e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	607b      	str	r3, [r7, #4]
 800b7ea:	e00c      	b.n	800b806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4a12      	ldr	r2, [pc, #72]	; (800b840 <prvInitialiseTaskLists+0x60>)
 800b7f8:	4413      	add	r3, r2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe fc72 	bl	800a0e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	3301      	adds	r3, #1
 800b804:	607b      	str	r3, [r7, #4]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b37      	cmp	r3, #55	; 0x37
 800b80a:	d9ef      	bls.n	800b7ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b80c:	480d      	ldr	r0, [pc, #52]	; (800b844 <prvInitialiseTaskLists+0x64>)
 800b80e:	f7fe fc69 	bl	800a0e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b812:	480d      	ldr	r0, [pc, #52]	; (800b848 <prvInitialiseTaskLists+0x68>)
 800b814:	f7fe fc66 	bl	800a0e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b818:	480c      	ldr	r0, [pc, #48]	; (800b84c <prvInitialiseTaskLists+0x6c>)
 800b81a:	f7fe fc63 	bl	800a0e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b81e:	480c      	ldr	r0, [pc, #48]	; (800b850 <prvInitialiseTaskLists+0x70>)
 800b820:	f7fe fc60 	bl	800a0e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b824:	480b      	ldr	r0, [pc, #44]	; (800b854 <prvInitialiseTaskLists+0x74>)
 800b826:	f7fe fc5d 	bl	800a0e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b82a:	4b0b      	ldr	r3, [pc, #44]	; (800b858 <prvInitialiseTaskLists+0x78>)
 800b82c:	4a05      	ldr	r2, [pc, #20]	; (800b844 <prvInitialiseTaskLists+0x64>)
 800b82e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b830:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <prvInitialiseTaskLists+0x7c>)
 800b832:	4a05      	ldr	r2, [pc, #20]	; (800b848 <prvInitialiseTaskLists+0x68>)
 800b834:	601a      	str	r2, [r3, #0]
}
 800b836:	bf00      	nop
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20002f9c 	.word	0x20002f9c
 800b844:	200033fc 	.word	0x200033fc
 800b848:	20003410 	.word	0x20003410
 800b84c:	2000342c 	.word	0x2000342c
 800b850:	20003440 	.word	0x20003440
 800b854:	20003458 	.word	0x20003458
 800b858:	20003424 	.word	0x20003424
 800b85c:	20003428 	.word	0x20003428

0800b860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b866:	e019      	b.n	800b89c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b868:	f000 fdd4 	bl	800c414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b86c:	4b10      	ldr	r3, [pc, #64]	; (800b8b0 <prvCheckTasksWaitingTermination+0x50>)
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3304      	adds	r3, #4
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fe fcbd 	bl	800a1f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b87e:	4b0d      	ldr	r3, [pc, #52]	; (800b8b4 <prvCheckTasksWaitingTermination+0x54>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3b01      	subs	r3, #1
 800b884:	4a0b      	ldr	r2, [pc, #44]	; (800b8b4 <prvCheckTasksWaitingTermination+0x54>)
 800b886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b888:	4b0b      	ldr	r3, [pc, #44]	; (800b8b8 <prvCheckTasksWaitingTermination+0x58>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	4a0a      	ldr	r2, [pc, #40]	; (800b8b8 <prvCheckTasksWaitingTermination+0x58>)
 800b890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b892:	f000 fdef 	bl	800c474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f810 	bl	800b8bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b89c:	4b06      	ldr	r3, [pc, #24]	; (800b8b8 <prvCheckTasksWaitingTermination+0x58>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1e1      	bne.n	800b868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20003440 	.word	0x20003440
 800b8b4:	2000346c 	.word	0x2000346c
 800b8b8:	20003454 	.word	0x20003454

0800b8bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d108      	bne.n	800b8e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 ff8c 	bl	800c7f0 <vPortFree>
				vPortFree( pxTCB );
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 ff89 	bl	800c7f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8de:	e018      	b.n	800b912 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d103      	bne.n	800b8f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 ff80 	bl	800c7f0 <vPortFree>
	}
 800b8f0:	e00f      	b.n	800b912 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d00a      	beq.n	800b912 <prvDeleteTCB+0x56>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	60fb      	str	r3, [r7, #12]
}
 800b90e:	bf00      	nop
 800b910:	e7fe      	b.n	800b910 <prvDeleteTCB+0x54>
	}
 800b912:	bf00      	nop
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b922:	4b0c      	ldr	r3, [pc, #48]	; (800b954 <prvResetNextTaskUnblockTime+0x38>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d104      	bne.n	800b936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b92c:	4b0a      	ldr	r3, [pc, #40]	; (800b958 <prvResetNextTaskUnblockTime+0x3c>)
 800b92e:	f04f 32ff 	mov.w	r2, #4294967295
 800b932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b934:	e008      	b.n	800b948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b936:	4b07      	ldr	r3, [pc, #28]	; (800b954 <prvResetNextTaskUnblockTime+0x38>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	4a04      	ldr	r2, [pc, #16]	; (800b958 <prvResetNextTaskUnblockTime+0x3c>)
 800b946:	6013      	str	r3, [r2, #0]
}
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	20003424 	.word	0x20003424
 800b958:	2000348c 	.word	0x2000348c

0800b95c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b962:	4b0b      	ldr	r3, [pc, #44]	; (800b990 <xTaskGetSchedulerState+0x34>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d102      	bne.n	800b970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b96a:	2301      	movs	r3, #1
 800b96c:	607b      	str	r3, [r7, #4]
 800b96e:	e008      	b.n	800b982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b970:	4b08      	ldr	r3, [pc, #32]	; (800b994 <xTaskGetSchedulerState+0x38>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d102      	bne.n	800b97e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b978:	2302      	movs	r3, #2
 800b97a:	607b      	str	r3, [r7, #4]
 800b97c:	e001      	b.n	800b982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b97e:	2300      	movs	r3, #0
 800b980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b982:	687b      	ldr	r3, [r7, #4]
	}
 800b984:	4618      	mov	r0, r3
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20003478 	.word	0x20003478
 800b994:	20003494 	.word	0x20003494

0800b998 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d056      	beq.n	800ba5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9ae:	4b2e      	ldr	r3, [pc, #184]	; (800ba68 <xTaskPriorityDisinherit+0xd0>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d00a      	beq.n	800b9ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	60fb      	str	r3, [r7, #12]
}
 800b9ca:	bf00      	nop
 800b9cc:	e7fe      	b.n	800b9cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10a      	bne.n	800b9ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	60bb      	str	r3, [r7, #8]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f0:	1e5a      	subs	r2, r3, #1
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d02c      	beq.n	800ba5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d128      	bne.n	800ba5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fe fbf2 	bl	800a1f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2c:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <xTaskPriorityDisinherit+0xd4>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d903      	bls.n	800ba3c <xTaskPriorityDisinherit+0xa4>
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	4a0c      	ldr	r2, [pc, #48]	; (800ba6c <xTaskPriorityDisinherit+0xd4>)
 800ba3a:	6013      	str	r3, [r2, #0]
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba40:	4613      	mov	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	4a09      	ldr	r2, [pc, #36]	; (800ba70 <xTaskPriorityDisinherit+0xd8>)
 800ba4a:	441a      	add	r2, r3
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4619      	mov	r1, r3
 800ba52:	4610      	mov	r0, r2
 800ba54:	f7fe fb73 	bl	800a13e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba5c:	697b      	ldr	r3, [r7, #20]
	}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3718      	adds	r7, #24
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	20002f98 	.word	0x20002f98
 800ba6c:	20003474 	.word	0x20003474
 800ba70:	20002f9c 	.word	0x20002f9c

0800ba74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba7e:	4b21      	ldr	r3, [pc, #132]	; (800bb04 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba84:	4b20      	ldr	r3, [pc, #128]	; (800bb08 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe fbb4 	bl	800a1f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba96:	d10a      	bne.n	800baae <prvAddCurrentTaskToDelayedList+0x3a>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d007      	beq.n	800baae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba9e:	4b1a      	ldr	r3, [pc, #104]	; (800bb08 <prvAddCurrentTaskToDelayedList+0x94>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3304      	adds	r3, #4
 800baa4:	4619      	mov	r1, r3
 800baa6:	4819      	ldr	r0, [pc, #100]	; (800bb0c <prvAddCurrentTaskToDelayedList+0x98>)
 800baa8:	f7fe fb49 	bl	800a13e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800baac:	e026      	b.n	800bafc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4413      	add	r3, r2
 800bab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bab6:	4b14      	ldr	r3, [pc, #80]	; (800bb08 <prvAddCurrentTaskToDelayedList+0x94>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d209      	bcs.n	800bada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bac6:	4b12      	ldr	r3, [pc, #72]	; (800bb10 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <prvAddCurrentTaskToDelayedList+0x94>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3304      	adds	r3, #4
 800bad0:	4619      	mov	r1, r3
 800bad2:	4610      	mov	r0, r2
 800bad4:	f7fe fb57 	bl	800a186 <vListInsert>
}
 800bad8:	e010      	b.n	800bafc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bada:	4b0e      	ldr	r3, [pc, #56]	; (800bb14 <prvAddCurrentTaskToDelayedList+0xa0>)
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	4b0a      	ldr	r3, [pc, #40]	; (800bb08 <prvAddCurrentTaskToDelayedList+0x94>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3304      	adds	r3, #4
 800bae4:	4619      	mov	r1, r3
 800bae6:	4610      	mov	r0, r2
 800bae8:	f7fe fb4d 	bl	800a186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800baec:	4b0a      	ldr	r3, [pc, #40]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xa4>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d202      	bcs.n	800bafc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800baf6:	4a08      	ldr	r2, [pc, #32]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xa4>)
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	6013      	str	r3, [r2, #0]
}
 800bafc:	bf00      	nop
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	20003470 	.word	0x20003470
 800bb08:	20002f98 	.word	0x20002f98
 800bb0c:	20003458 	.word	0x20003458
 800bb10:	20003428 	.word	0x20003428
 800bb14:	20003424 	.word	0x20003424
 800bb18:	2000348c 	.word	0x2000348c

0800bb1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08a      	sub	sp, #40	; 0x28
 800bb20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb26:	f000 fb07 	bl	800c138 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb2a:	4b1c      	ldr	r3, [pc, #112]	; (800bb9c <xTimerCreateTimerTask+0x80>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d021      	beq.n	800bb76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb36:	2300      	movs	r3, #0
 800bb38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb3a:	1d3a      	adds	r2, r7, #4
 800bb3c:	f107 0108 	add.w	r1, r7, #8
 800bb40:	f107 030c 	add.w	r3, r7, #12
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fe fab3 	bl	800a0b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb4a:	6879      	ldr	r1, [r7, #4]
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	9202      	str	r2, [sp, #8]
 800bb52:	9301      	str	r3, [sp, #4]
 800bb54:	2302      	movs	r3, #2
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	460a      	mov	r2, r1
 800bb5c:	4910      	ldr	r1, [pc, #64]	; (800bba0 <xTimerCreateTimerTask+0x84>)
 800bb5e:	4811      	ldr	r0, [pc, #68]	; (800bba4 <xTimerCreateTimerTask+0x88>)
 800bb60:	f7ff f860 	bl	800ac24 <xTaskCreateStatic>
 800bb64:	4603      	mov	r3, r0
 800bb66:	4a10      	ldr	r2, [pc, #64]	; (800bba8 <xTimerCreateTimerTask+0x8c>)
 800bb68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb6a:	4b0f      	ldr	r3, [pc, #60]	; (800bba8 <xTimerCreateTimerTask+0x8c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb72:	2301      	movs	r3, #1
 800bb74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10a      	bne.n	800bb92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb80:	f383 8811 	msr	BASEPRI, r3
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	613b      	str	r3, [r7, #16]
}
 800bb8e:	bf00      	nop
 800bb90:	e7fe      	b.n	800bb90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb92:	697b      	ldr	r3, [r7, #20]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	200034c8 	.word	0x200034c8
 800bba0:	0800d860 	.word	0x0800d860
 800bba4:	0800bce1 	.word	0x0800bce1
 800bba8:	200034cc 	.word	0x200034cc

0800bbac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b08a      	sub	sp, #40	; 0x28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10a      	bne.n	800bbda <xTimerGenericCommand+0x2e>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	623b      	str	r3, [r7, #32]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bbda:	4b1a      	ldr	r3, [pc, #104]	; (800bc44 <xTimerGenericCommand+0x98>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d02a      	beq.n	800bc38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2b05      	cmp	r3, #5
 800bbf2:	dc18      	bgt.n	800bc26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbf4:	f7ff feb2 	bl	800b95c <xTaskGetSchedulerState>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d109      	bne.n	800bc12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbfe:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <xTimerGenericCommand+0x98>)
 800bc00:	6818      	ldr	r0, [r3, #0]
 800bc02:	f107 0110 	add.w	r1, r7, #16
 800bc06:	2300      	movs	r3, #0
 800bc08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc0a:	f7fe fc23 	bl	800a454 <xQueueGenericSend>
 800bc0e:	6278      	str	r0, [r7, #36]	; 0x24
 800bc10:	e012      	b.n	800bc38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc12:	4b0c      	ldr	r3, [pc, #48]	; (800bc44 <xTimerGenericCommand+0x98>)
 800bc14:	6818      	ldr	r0, [r3, #0]
 800bc16:	f107 0110 	add.w	r1, r7, #16
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f7fe fc19 	bl	800a454 <xQueueGenericSend>
 800bc22:	6278      	str	r0, [r7, #36]	; 0x24
 800bc24:	e008      	b.n	800bc38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc26:	4b07      	ldr	r3, [pc, #28]	; (800bc44 <xTimerGenericCommand+0x98>)
 800bc28:	6818      	ldr	r0, [r3, #0]
 800bc2a:	f107 0110 	add.w	r1, r7, #16
 800bc2e:	2300      	movs	r3, #0
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	f7fe fd0d 	bl	800a650 <xQueueGenericSendFromISR>
 800bc36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3728      	adds	r7, #40	; 0x28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	200034c8 	.word	0x200034c8

0800bc48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af02      	add	r7, sp, #8
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc52:	4b22      	ldr	r3, [pc, #136]	; (800bcdc <prvProcessExpiredTimer+0x94>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe fac9 	bl	800a1f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc6c:	f003 0304 	and.w	r3, r3, #4
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d022      	beq.n	800bcba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	699a      	ldr	r2, [r3, #24]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	18d1      	adds	r1, r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	6978      	ldr	r0, [r7, #20]
 800bc82:	f000 f8d1 	bl	800be28 <prvInsertTimerInActiveList>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d01f      	beq.n	800bccc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	2300      	movs	r3, #0
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	2100      	movs	r1, #0
 800bc96:	6978      	ldr	r0, [r7, #20]
 800bc98:	f7ff ff88 	bl	800bbac <xTimerGenericCommand>
 800bc9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d113      	bne.n	800bccc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	60fb      	str	r3, [r7, #12]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcc0:	f023 0301 	bic.w	r3, r3, #1
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	6978      	ldr	r0, [r7, #20]
 800bcd2:	4798      	blx	r3
}
 800bcd4:	bf00      	nop
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	200034c0 	.word	0x200034c0

0800bce0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bce8:	f107 0308 	add.w	r3, r7, #8
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 f857 	bl	800bda0 <prvGetNextExpireTime>
 800bcf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 f803 	bl	800bd04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcfe:	f000 f8d5 	bl	800beac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd02:	e7f1      	b.n	800bce8 <prvTimerTask+0x8>

0800bd04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd0e:	f7ff fa43 	bl	800b198 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd12:	f107 0308 	add.w	r3, r7, #8
 800bd16:	4618      	mov	r0, r3
 800bd18:	f000 f866 	bl	800bde8 <prvSampleTimeNow>
 800bd1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d130      	bne.n	800bd86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10a      	bne.n	800bd40 <prvProcessTimerOrBlockTask+0x3c>
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d806      	bhi.n	800bd40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd32:	f7ff fa3f 	bl	800b1b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd36:	68f9      	ldr	r1, [r7, #12]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7ff ff85 	bl	800bc48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd3e:	e024      	b.n	800bd8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d008      	beq.n	800bd58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd46:	4b13      	ldr	r3, [pc, #76]	; (800bd94 <prvProcessTimerOrBlockTask+0x90>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <prvProcessTimerOrBlockTask+0x50>
 800bd50:	2301      	movs	r3, #1
 800bd52:	e000      	b.n	800bd56 <prvProcessTimerOrBlockTask+0x52>
 800bd54:	2300      	movs	r3, #0
 800bd56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd58:	4b0f      	ldr	r3, [pc, #60]	; (800bd98 <prvProcessTimerOrBlockTask+0x94>)
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	4619      	mov	r1, r3
 800bd66:	f7fe ff29 	bl	800abbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd6a:	f7ff fa23 	bl	800b1b4 <xTaskResumeAll>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd74:	4b09      	ldr	r3, [pc, #36]	; (800bd9c <prvProcessTimerOrBlockTask+0x98>)
 800bd76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	f3bf 8f6f 	isb	sy
}
 800bd84:	e001      	b.n	800bd8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd86:	f7ff fa15 	bl	800b1b4 <xTaskResumeAll>
}
 800bd8a:	bf00      	nop
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	200034c4 	.word	0x200034c4
 800bd98:	200034c8 	.word	0x200034c8
 800bd9c:	e000ed04 	.word	0xe000ed04

0800bda0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bda8:	4b0e      	ldr	r3, [pc, #56]	; (800bde4 <prvGetNextExpireTime+0x44>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <prvGetNextExpireTime+0x16>
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	e000      	b.n	800bdb8 <prvGetNextExpireTime+0x18>
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d105      	bne.n	800bdd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdc4:	4b07      	ldr	r3, [pc, #28]	; (800bde4 <prvGetNextExpireTime+0x44>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	e001      	b.n	800bdd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	200034c0 	.word	0x200034c0

0800bde8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bdf0:	f7ff fa7e 	bl	800b2f0 <xTaskGetTickCount>
 800bdf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdf6:	4b0b      	ldr	r3, [pc, #44]	; (800be24 <prvSampleTimeNow+0x3c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d205      	bcs.n	800be0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be00:	f000 f936 	bl	800c070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	601a      	str	r2, [r3, #0]
 800be0a:	e002      	b.n	800be12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be12:	4a04      	ldr	r2, [pc, #16]	; (800be24 <prvSampleTimeNow+0x3c>)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be18:	68fb      	ldr	r3, [r7, #12]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	200034d0 	.word	0x200034d0

0800be28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	607a      	str	r2, [r7, #4]
 800be34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d812      	bhi.n	800be74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	1ad2      	subs	r2, r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d302      	bcc.n	800be62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be5c:	2301      	movs	r3, #1
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	e01b      	b.n	800be9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be62:	4b10      	ldr	r3, [pc, #64]	; (800bea4 <prvInsertTimerInActiveList+0x7c>)
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	3304      	adds	r3, #4
 800be6a:	4619      	mov	r1, r3
 800be6c:	4610      	mov	r0, r2
 800be6e:	f7fe f98a 	bl	800a186 <vListInsert>
 800be72:	e012      	b.n	800be9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d206      	bcs.n	800be8a <prvInsertTimerInActiveList+0x62>
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d302      	bcc.n	800be8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be84:	2301      	movs	r3, #1
 800be86:	617b      	str	r3, [r7, #20]
 800be88:	e007      	b.n	800be9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be8a:	4b07      	ldr	r3, [pc, #28]	; (800bea8 <prvInsertTimerInActiveList+0x80>)
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3304      	adds	r3, #4
 800be92:	4619      	mov	r1, r3
 800be94:	4610      	mov	r0, r2
 800be96:	f7fe f976 	bl	800a186 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be9a:	697b      	ldr	r3, [r7, #20]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	200034c4 	.word	0x200034c4
 800bea8:	200034c0 	.word	0x200034c0

0800beac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08e      	sub	sp, #56	; 0x38
 800beb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800beb2:	e0ca      	b.n	800c04a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	da18      	bge.n	800beec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800beba:	1d3b      	adds	r3, r7, #4
 800bebc:	3304      	adds	r3, #4
 800bebe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10a      	bne.n	800bedc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	61fb      	str	r3, [r7, #28]
}
 800bed8:	bf00      	nop
 800beda:	e7fe      	b.n	800beda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bee2:	6850      	ldr	r0, [r2, #4]
 800bee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bee6:	6892      	ldr	r2, [r2, #8]
 800bee8:	4611      	mov	r1, r2
 800beea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f2c0 80aa 	blt.w	800c048 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d004      	beq.n	800bf0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf02:	3304      	adds	r3, #4
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fe f977 	bl	800a1f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7ff ff6b 	bl	800bde8 <prvSampleTimeNow>
 800bf12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b09      	cmp	r3, #9
 800bf18:	f200 8097 	bhi.w	800c04a <prvProcessReceivedCommands+0x19e>
 800bf1c:	a201      	add	r2, pc, #4	; (adr r2, 800bf24 <prvProcessReceivedCommands+0x78>)
 800bf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf22:	bf00      	nop
 800bf24:	0800bf4d 	.word	0x0800bf4d
 800bf28:	0800bf4d 	.word	0x0800bf4d
 800bf2c:	0800bf4d 	.word	0x0800bf4d
 800bf30:	0800bfc1 	.word	0x0800bfc1
 800bf34:	0800bfd5 	.word	0x0800bfd5
 800bf38:	0800c01f 	.word	0x0800c01f
 800bf3c:	0800bf4d 	.word	0x0800bf4d
 800bf40:	0800bf4d 	.word	0x0800bf4d
 800bf44:	0800bfc1 	.word	0x0800bfc1
 800bf48:	0800bfd5 	.word	0x0800bfd5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf52:	f043 0301 	orr.w	r3, r3, #1
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	18d1      	adds	r1, r2, r3
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf6c:	f7ff ff5c 	bl	800be28 <prvInsertTimerInActiveList>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d069      	beq.n	800c04a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf84:	f003 0304 	and.w	r3, r3, #4
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d05e      	beq.n	800c04a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf90:	699b      	ldr	r3, [r3, #24]
 800bf92:	441a      	add	r2, r3
 800bf94:	2300      	movs	r3, #0
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	2300      	movs	r3, #0
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf9e:	f7ff fe05 	bl	800bbac <xTimerGenericCommand>
 800bfa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d14f      	bne.n	800c04a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	61bb      	str	r3, [r7, #24]
}
 800bfbc:	bf00      	nop
 800bfbe:	e7fe      	b.n	800bfbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfc6:	f023 0301 	bic.w	r3, r3, #1
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bfd2:	e03a      	b.n	800c04a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfda:	f043 0301 	orr.w	r3, r3, #1
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10a      	bne.n	800c00a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	617b      	str	r3, [r7, #20]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	699a      	ldr	r2, [r3, #24]
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	18d1      	adds	r1, r2, r3
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c018:	f7ff ff06 	bl	800be28 <prvInsertTimerInActiveList>
					break;
 800c01c:	e015      	b.n	800c04a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c024:	f003 0302 	and.w	r3, r3, #2
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d103      	bne.n	800c034 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c02c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c02e:	f000 fbdf 	bl	800c7f0 <vPortFree>
 800c032:	e00a      	b.n	800c04a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c03a:	f023 0301 	bic.w	r3, r3, #1
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c046:	e000      	b.n	800c04a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c048:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c04a:	4b08      	ldr	r3, [pc, #32]	; (800c06c <prvProcessReceivedCommands+0x1c0>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	1d39      	adds	r1, r7, #4
 800c050:	2200      	movs	r2, #0
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe fb98 	bl	800a788 <xQueueReceive>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f47f af2a 	bne.w	800beb4 <prvProcessReceivedCommands+0x8>
	}
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	3730      	adds	r7, #48	; 0x30
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	200034c8 	.word	0x200034c8

0800c070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c076:	e048      	b.n	800c10a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c078:	4b2d      	ldr	r3, [pc, #180]	; (800c130 <prvSwitchTimerLists+0xc0>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c082:	4b2b      	ldr	r3, [pc, #172]	; (800c130 <prvSwitchTimerLists+0xc0>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3304      	adds	r3, #4
 800c090:	4618      	mov	r0, r3
 800c092:	f7fe f8b1 	bl	800a1f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0a4:	f003 0304 	and.w	r3, r3, #4
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d02e      	beq.n	800c10a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d90e      	bls.n	800c0dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0ca:	4b19      	ldr	r3, [pc, #100]	; (800c130 <prvSwitchTimerLists+0xc0>)
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	f7fe f856 	bl	800a186 <vListInsert>
 800c0da:	e016      	b.n	800c10a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f7ff fd60 	bl	800bbac <xTimerGenericCommand>
 800c0ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	603b      	str	r3, [r7, #0]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c10a:	4b09      	ldr	r3, [pc, #36]	; (800c130 <prvSwitchTimerLists+0xc0>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1b1      	bne.n	800c078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c114:	4b06      	ldr	r3, [pc, #24]	; (800c130 <prvSwitchTimerLists+0xc0>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c11a:	4b06      	ldr	r3, [pc, #24]	; (800c134 <prvSwitchTimerLists+0xc4>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a04      	ldr	r2, [pc, #16]	; (800c130 <prvSwitchTimerLists+0xc0>)
 800c120:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c122:	4a04      	ldr	r2, [pc, #16]	; (800c134 <prvSwitchTimerLists+0xc4>)
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	6013      	str	r3, [r2, #0]
}
 800c128:	bf00      	nop
 800c12a:	3718      	adds	r7, #24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	200034c0 	.word	0x200034c0
 800c134:	200034c4 	.word	0x200034c4

0800c138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c13e:	f000 f969 	bl	800c414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c142:	4b15      	ldr	r3, [pc, #84]	; (800c198 <prvCheckForValidListAndQueue+0x60>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d120      	bne.n	800c18c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c14a:	4814      	ldr	r0, [pc, #80]	; (800c19c <prvCheckForValidListAndQueue+0x64>)
 800c14c:	f7fd ffca 	bl	800a0e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c150:	4813      	ldr	r0, [pc, #76]	; (800c1a0 <prvCheckForValidListAndQueue+0x68>)
 800c152:	f7fd ffc7 	bl	800a0e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c156:	4b13      	ldr	r3, [pc, #76]	; (800c1a4 <prvCheckForValidListAndQueue+0x6c>)
 800c158:	4a10      	ldr	r2, [pc, #64]	; (800c19c <prvCheckForValidListAndQueue+0x64>)
 800c15a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c15c:	4b12      	ldr	r3, [pc, #72]	; (800c1a8 <prvCheckForValidListAndQueue+0x70>)
 800c15e:	4a10      	ldr	r2, [pc, #64]	; (800c1a0 <prvCheckForValidListAndQueue+0x68>)
 800c160:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c162:	2300      	movs	r3, #0
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	4b11      	ldr	r3, [pc, #68]	; (800c1ac <prvCheckForValidListAndQueue+0x74>)
 800c168:	4a11      	ldr	r2, [pc, #68]	; (800c1b0 <prvCheckForValidListAndQueue+0x78>)
 800c16a:	2110      	movs	r1, #16
 800c16c:	200a      	movs	r0, #10
 800c16e:	f7fe f8d5 	bl	800a31c <xQueueGenericCreateStatic>
 800c172:	4603      	mov	r3, r0
 800c174:	4a08      	ldr	r2, [pc, #32]	; (800c198 <prvCheckForValidListAndQueue+0x60>)
 800c176:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c178:	4b07      	ldr	r3, [pc, #28]	; (800c198 <prvCheckForValidListAndQueue+0x60>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d005      	beq.n	800c18c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c180:	4b05      	ldr	r3, [pc, #20]	; (800c198 <prvCheckForValidListAndQueue+0x60>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	490b      	ldr	r1, [pc, #44]	; (800c1b4 <prvCheckForValidListAndQueue+0x7c>)
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fcee 	bl	800ab68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c18c:	f000 f972 	bl	800c474 <vPortExitCritical>
}
 800c190:	bf00      	nop
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	200034c8 	.word	0x200034c8
 800c19c:	20003498 	.word	0x20003498
 800c1a0:	200034ac 	.word	0x200034ac
 800c1a4:	200034c0 	.word	0x200034c0
 800c1a8:	200034c4 	.word	0x200034c4
 800c1ac:	20003574 	.word	0x20003574
 800c1b0:	200034d4 	.word	0x200034d4
 800c1b4:	0800d868 	.word	0x0800d868

0800c1b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	3b04      	subs	r3, #4
 800c1c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3b04      	subs	r3, #4
 800c1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	f023 0201 	bic.w	r2, r3, #1
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3b04      	subs	r3, #4
 800c1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1e8:	4a0c      	ldr	r2, [pc, #48]	; (800c21c <pxPortInitialiseStack+0x64>)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3b14      	subs	r3, #20
 800c1f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3b04      	subs	r3, #4
 800c1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f06f 0202 	mvn.w	r2, #2
 800c206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	3b20      	subs	r3, #32
 800c20c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c20e:	68fb      	ldr	r3, [r7, #12]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	0800c221 	.word	0x0800c221

0800c220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c22a:	4b12      	ldr	r3, [pc, #72]	; (800c274 <prvTaskExitError+0x54>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c232:	d00a      	beq.n	800c24a <prvTaskExitError+0x2a>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	60fb      	str	r3, [r7, #12]
}
 800c246:	bf00      	nop
 800c248:	e7fe      	b.n	800c248 <prvTaskExitError+0x28>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	60bb      	str	r3, [r7, #8]
}
 800c25c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c25e:	bf00      	nop
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0fc      	beq.n	800c260 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c266:	bf00      	nop
 800c268:	bf00      	nop
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	20000020 	.word	0x20000020
	...

0800c280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <pxCurrentTCBConst2>)
 800c282:	6819      	ldr	r1, [r3, #0]
 800c284:	6808      	ldr	r0, [r1, #0]
 800c286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	f380 8809 	msr	PSP, r0
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f04f 0000 	mov.w	r0, #0
 800c296:	f380 8811 	msr	BASEPRI, r0
 800c29a:	4770      	bx	lr
 800c29c:	f3af 8000 	nop.w

0800c2a0 <pxCurrentTCBConst2>:
 800c2a0:	20002f98 	.word	0x20002f98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop

0800c2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2a8:	4808      	ldr	r0, [pc, #32]	; (800c2cc <prvPortStartFirstTask+0x24>)
 800c2aa:	6800      	ldr	r0, [r0, #0]
 800c2ac:	6800      	ldr	r0, [r0, #0]
 800c2ae:	f380 8808 	msr	MSP, r0
 800c2b2:	f04f 0000 	mov.w	r0, #0
 800c2b6:	f380 8814 	msr	CONTROL, r0
 800c2ba:	b662      	cpsie	i
 800c2bc:	b661      	cpsie	f
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	df00      	svc	0
 800c2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2ca:	bf00      	nop
 800c2cc:	e000ed08 	.word	0xe000ed08

0800c2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c2d6:	4b46      	ldr	r3, [pc, #280]	; (800c3f0 <xPortStartScheduler+0x120>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a46      	ldr	r2, [pc, #280]	; (800c3f4 <xPortStartScheduler+0x124>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d10a      	bne.n	800c2f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	613b      	str	r3, [r7, #16]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2f6:	4b3e      	ldr	r3, [pc, #248]	; (800c3f0 <xPortStartScheduler+0x120>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a3f      	ldr	r2, [pc, #252]	; (800c3f8 <xPortStartScheduler+0x128>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d10a      	bne.n	800c316 <xPortStartScheduler+0x46>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	60fb      	str	r3, [r7, #12]
}
 800c312:	bf00      	nop
 800c314:	e7fe      	b.n	800c314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c316:	4b39      	ldr	r3, [pc, #228]	; (800c3fc <xPortStartScheduler+0x12c>)
 800c318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	22ff      	movs	r2, #255	; 0xff
 800c326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c330:	78fb      	ldrb	r3, [r7, #3]
 800c332:	b2db      	uxtb	r3, r3
 800c334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	4b31      	ldr	r3, [pc, #196]	; (800c400 <xPortStartScheduler+0x130>)
 800c33c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c33e:	4b31      	ldr	r3, [pc, #196]	; (800c404 <xPortStartScheduler+0x134>)
 800c340:	2207      	movs	r2, #7
 800c342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c344:	e009      	b.n	800c35a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c346:	4b2f      	ldr	r3, [pc, #188]	; (800c404 <xPortStartScheduler+0x134>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	4a2d      	ldr	r2, [pc, #180]	; (800c404 <xPortStartScheduler+0x134>)
 800c34e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c350:	78fb      	ldrb	r3, [r7, #3]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	b2db      	uxtb	r3, r3
 800c358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c35a:	78fb      	ldrb	r3, [r7, #3]
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c362:	2b80      	cmp	r3, #128	; 0x80
 800c364:	d0ef      	beq.n	800c346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c366:	4b27      	ldr	r3, [pc, #156]	; (800c404 <xPortStartScheduler+0x134>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f1c3 0307 	rsb	r3, r3, #7
 800c36e:	2b04      	cmp	r3, #4
 800c370:	d00a      	beq.n	800c388 <xPortStartScheduler+0xb8>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	60bb      	str	r3, [r7, #8]
}
 800c384:	bf00      	nop
 800c386:	e7fe      	b.n	800c386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c388:	4b1e      	ldr	r3, [pc, #120]	; (800c404 <xPortStartScheduler+0x134>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	021b      	lsls	r3, r3, #8
 800c38e:	4a1d      	ldr	r2, [pc, #116]	; (800c404 <xPortStartScheduler+0x134>)
 800c390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c392:	4b1c      	ldr	r3, [pc, #112]	; (800c404 <xPortStartScheduler+0x134>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c39a:	4a1a      	ldr	r2, [pc, #104]	; (800c404 <xPortStartScheduler+0x134>)
 800c39c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3a6:	4b18      	ldr	r3, [pc, #96]	; (800c408 <xPortStartScheduler+0x138>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a17      	ldr	r2, [pc, #92]	; (800c408 <xPortStartScheduler+0x138>)
 800c3ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3b2:	4b15      	ldr	r3, [pc, #84]	; (800c408 <xPortStartScheduler+0x138>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a14      	ldr	r2, [pc, #80]	; (800c408 <xPortStartScheduler+0x138>)
 800c3b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3be:	f000 f8dd 	bl	800c57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3c2:	4b12      	ldr	r3, [pc, #72]	; (800c40c <xPortStartScheduler+0x13c>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3c8:	f000 f8fc 	bl	800c5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3cc:	4b10      	ldr	r3, [pc, #64]	; (800c410 <xPortStartScheduler+0x140>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a0f      	ldr	r2, [pc, #60]	; (800c410 <xPortStartScheduler+0x140>)
 800c3d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c3d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3d8:	f7ff ff66 	bl	800c2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3dc:	f7ff f852 	bl	800b484 <vTaskSwitchContext>
	prvTaskExitError();
 800c3e0:	f7ff ff1e 	bl	800c220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	e000ed00 	.word	0xe000ed00
 800c3f4:	410fc271 	.word	0x410fc271
 800c3f8:	410fc270 	.word	0x410fc270
 800c3fc:	e000e400 	.word	0xe000e400
 800c400:	200035c4 	.word	0x200035c4
 800c404:	200035c8 	.word	0x200035c8
 800c408:	e000ed20 	.word	0xe000ed20
 800c40c:	20000020 	.word	0x20000020
 800c410:	e000ef34 	.word	0xe000ef34

0800c414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	607b      	str	r3, [r7, #4]
}
 800c42c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c42e:	4b0f      	ldr	r3, [pc, #60]	; (800c46c <vPortEnterCritical+0x58>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3301      	adds	r3, #1
 800c434:	4a0d      	ldr	r2, [pc, #52]	; (800c46c <vPortEnterCritical+0x58>)
 800c436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c438:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <vPortEnterCritical+0x58>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d10f      	bne.n	800c460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <vPortEnterCritical+0x5c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00a      	beq.n	800c460 <vPortEnterCritical+0x4c>
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	603b      	str	r3, [r7, #0]
}
 800c45c:	bf00      	nop
 800c45e:	e7fe      	b.n	800c45e <vPortEnterCritical+0x4a>
	}
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	20000020 	.word	0x20000020
 800c470:	e000ed04 	.word	0xe000ed04

0800c474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c47a:	4b12      	ldr	r3, [pc, #72]	; (800c4c4 <vPortExitCritical+0x50>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10a      	bne.n	800c498 <vPortExitCritical+0x24>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	607b      	str	r3, [r7, #4]
}
 800c494:	bf00      	nop
 800c496:	e7fe      	b.n	800c496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c498:	4b0a      	ldr	r3, [pc, #40]	; (800c4c4 <vPortExitCritical+0x50>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3b01      	subs	r3, #1
 800c49e:	4a09      	ldr	r2, [pc, #36]	; (800c4c4 <vPortExitCritical+0x50>)
 800c4a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4a2:	4b08      	ldr	r3, [pc, #32]	; (800c4c4 <vPortExitCritical+0x50>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d105      	bne.n	800c4b6 <vPortExitCritical+0x42>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	f383 8811 	msr	BASEPRI, r3
}
 800c4b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4b6:	bf00      	nop
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	20000020 	.word	0x20000020
	...

0800c4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4d0:	f3ef 8009 	mrs	r0, PSP
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	4b15      	ldr	r3, [pc, #84]	; (800c530 <pxCurrentTCBConst>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	f01e 0f10 	tst.w	lr, #16
 800c4e0:	bf08      	it	eq
 800c4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	6010      	str	r0, [r2, #0]
 800c4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4f4:	f380 8811 	msr	BASEPRI, r0
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f7fe ffc0 	bl	800b484 <vTaskSwitchContext>
 800c504:	f04f 0000 	mov.w	r0, #0
 800c508:	f380 8811 	msr	BASEPRI, r0
 800c50c:	bc09      	pop	{r0, r3}
 800c50e:	6819      	ldr	r1, [r3, #0]
 800c510:	6808      	ldr	r0, [r1, #0]
 800c512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c516:	f01e 0f10 	tst.w	lr, #16
 800c51a:	bf08      	it	eq
 800c51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c520:	f380 8809 	msr	PSP, r0
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	f3af 8000 	nop.w

0800c530 <pxCurrentTCBConst>:
 800c530:	20002f98 	.word	0x20002f98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c534:	bf00      	nop
 800c536:	bf00      	nop

0800c538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	607b      	str	r3, [r7, #4]
}
 800c550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c552:	f7fe fedd 	bl	800b310 <xTaskIncrementTick>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c55c:	4b06      	ldr	r3, [pc, #24]	; (800c578 <xPortSysTickHandler+0x40>)
 800c55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	2300      	movs	r3, #0
 800c566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f383 8811 	msr	BASEPRI, r3
}
 800c56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	e000ed04 	.word	0xe000ed04

0800c57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c57c:	b480      	push	{r7}
 800c57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <vPortSetupTimerInterrupt+0x34>)
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c586:	4b0b      	ldr	r3, [pc, #44]	; (800c5b4 <vPortSetupTimerInterrupt+0x38>)
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c58c:	4b0a      	ldr	r3, [pc, #40]	; (800c5b8 <vPortSetupTimerInterrupt+0x3c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <vPortSetupTimerInterrupt+0x40>)
 800c592:	fba2 2303 	umull	r2, r3, r2, r3
 800c596:	099b      	lsrs	r3, r3, #6
 800c598:	4a09      	ldr	r2, [pc, #36]	; (800c5c0 <vPortSetupTimerInterrupt+0x44>)
 800c59a:	3b01      	subs	r3, #1
 800c59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c59e:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <vPortSetupTimerInterrupt+0x34>)
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	601a      	str	r2, [r3, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	e000e010 	.word	0xe000e010
 800c5b4:	e000e018 	.word	0xe000e018
 800c5b8:	20000014 	.word	0x20000014
 800c5bc:	10624dd3 	.word	0x10624dd3
 800c5c0:	e000e014 	.word	0xe000e014

0800c5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c5d4 <vPortEnableVFP+0x10>
 800c5c8:	6801      	ldr	r1, [r0, #0]
 800c5ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c5ce:	6001      	str	r1, [r0, #0]
 800c5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5d2:	bf00      	nop
 800c5d4:	e000ed88 	.word	0xe000ed88

0800c5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5de:	f3ef 8305 	mrs	r3, IPSR
 800c5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2b0f      	cmp	r3, #15
 800c5e8:	d914      	bls.n	800c614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5ea:	4a17      	ldr	r2, [pc, #92]	; (800c648 <vPortValidateInterruptPriority+0x70>)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5f4:	4b15      	ldr	r3, [pc, #84]	; (800c64c <vPortValidateInterruptPriority+0x74>)
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	7afa      	ldrb	r2, [r7, #11]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d20a      	bcs.n	800c614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	607b      	str	r3, [r7, #4]
}
 800c610:	bf00      	nop
 800c612:	e7fe      	b.n	800c612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c614:	4b0e      	ldr	r3, [pc, #56]	; (800c650 <vPortValidateInterruptPriority+0x78>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c61c:	4b0d      	ldr	r3, [pc, #52]	; (800c654 <vPortValidateInterruptPriority+0x7c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d90a      	bls.n	800c63a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	603b      	str	r3, [r7, #0]
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <vPortValidateInterruptPriority+0x60>
	}
 800c63a:	bf00      	nop
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	e000e3f0 	.word	0xe000e3f0
 800c64c:	200035c4 	.word	0x200035c4
 800c650:	e000ed0c 	.word	0xe000ed0c
 800c654:	200035c8 	.word	0x200035c8

0800c658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	; 0x28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c660:	2300      	movs	r3, #0
 800c662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c664:	f7fe fd98 	bl	800b198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c668:	4b5b      	ldr	r3, [pc, #364]	; (800c7d8 <pvPortMalloc+0x180>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c670:	f000 f920 	bl	800c8b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c674:	4b59      	ldr	r3, [pc, #356]	; (800c7dc <pvPortMalloc+0x184>)
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4013      	ands	r3, r2
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f040 8093 	bne.w	800c7a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01d      	beq.n	800c6c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c688:	2208      	movs	r2, #8
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4413      	add	r3, r2
 800c68e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f003 0307 	and.w	r3, r3, #7
 800c696:	2b00      	cmp	r3, #0
 800c698:	d014      	beq.n	800c6c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f023 0307 	bic.w	r3, r3, #7
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f003 0307 	and.w	r3, r3, #7
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00a      	beq.n	800c6c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	617b      	str	r3, [r7, #20]
}
 800c6c0:	bf00      	nop
 800c6c2:	e7fe      	b.n	800c6c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d06e      	beq.n	800c7a8 <pvPortMalloc+0x150>
 800c6ca:	4b45      	ldr	r3, [pc, #276]	; (800c7e0 <pvPortMalloc+0x188>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d869      	bhi.n	800c7a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6d4:	4b43      	ldr	r3, [pc, #268]	; (800c7e4 <pvPortMalloc+0x18c>)
 800c6d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6d8:	4b42      	ldr	r3, [pc, #264]	; (800c7e4 <pvPortMalloc+0x18c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6de:	e004      	b.n	800c6ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d903      	bls.n	800c6fc <pvPortMalloc+0xa4>
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1f1      	bne.n	800c6e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6fc:	4b36      	ldr	r3, [pc, #216]	; (800c7d8 <pvPortMalloc+0x180>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c702:	429a      	cmp	r2, r3
 800c704:	d050      	beq.n	800c7a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2208      	movs	r2, #8
 800c70c:	4413      	add	r3, r2
 800c70e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	6a3b      	ldr	r3, [r7, #32]
 800c716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	1ad2      	subs	r2, r2, r3
 800c720:	2308      	movs	r3, #8
 800c722:	005b      	lsls	r3, r3, #1
 800c724:	429a      	cmp	r2, r3
 800c726:	d91f      	bls.n	800c768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4413      	add	r3, r2
 800c72e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	f003 0307 	and.w	r3, r3, #7
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00a      	beq.n	800c750 <pvPortMalloc+0xf8>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	613b      	str	r3, [r7, #16]
}
 800c74c:	bf00      	nop
 800c74e:	e7fe      	b.n	800c74e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	1ad2      	subs	r2, r2, r3
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c762:	69b8      	ldr	r0, [r7, #24]
 800c764:	f000 f908 	bl	800c978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c768:	4b1d      	ldr	r3, [pc, #116]	; (800c7e0 <pvPortMalloc+0x188>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	4a1b      	ldr	r2, [pc, #108]	; (800c7e0 <pvPortMalloc+0x188>)
 800c774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c776:	4b1a      	ldr	r3, [pc, #104]	; (800c7e0 <pvPortMalloc+0x188>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	4b1b      	ldr	r3, [pc, #108]	; (800c7e8 <pvPortMalloc+0x190>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d203      	bcs.n	800c78a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c782:	4b17      	ldr	r3, [pc, #92]	; (800c7e0 <pvPortMalloc+0x188>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a18      	ldr	r2, [pc, #96]	; (800c7e8 <pvPortMalloc+0x190>)
 800c788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	4b13      	ldr	r3, [pc, #76]	; (800c7dc <pvPortMalloc+0x184>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	431a      	orrs	r2, r3
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	2200      	movs	r2, #0
 800c79c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c79e:	4b13      	ldr	r3, [pc, #76]	; (800c7ec <pvPortMalloc+0x194>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	4a11      	ldr	r2, [pc, #68]	; (800c7ec <pvPortMalloc+0x194>)
 800c7a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7a8:	f7fe fd04 	bl	800b1b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	f003 0307 	and.w	r3, r3, #7
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00a      	beq.n	800c7cc <pvPortMalloc+0x174>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	60fb      	str	r3, [r7, #12]
}
 800c7c8:	bf00      	nop
 800c7ca:	e7fe      	b.n	800c7ca <pvPortMalloc+0x172>
	return pvReturn;
 800c7cc:	69fb      	ldr	r3, [r7, #28]
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3728      	adds	r7, #40	; 0x28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	200071d4 	.word	0x200071d4
 800c7dc:	200071e8 	.word	0x200071e8
 800c7e0:	200071d8 	.word	0x200071d8
 800c7e4:	200071cc 	.word	0x200071cc
 800c7e8:	200071dc 	.word	0x200071dc
 800c7ec:	200071e0 	.word	0x200071e0

0800c7f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d04d      	beq.n	800c89e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c802:	2308      	movs	r3, #8
 800c804:	425b      	negs	r3, r3
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	4413      	add	r3, r2
 800c80a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	4b24      	ldr	r3, [pc, #144]	; (800c8a8 <vPortFree+0xb8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4013      	ands	r3, r2
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10a      	bne.n	800c834 <vPortFree+0x44>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	60fb      	str	r3, [r7, #12]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00a      	beq.n	800c852 <vPortFree+0x62>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	60bb      	str	r3, [r7, #8]
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	4b14      	ldr	r3, [pc, #80]	; (800c8a8 <vPortFree+0xb8>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4013      	ands	r3, r2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01e      	beq.n	800c89e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d11a      	bne.n	800c89e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	4b0e      	ldr	r3, [pc, #56]	; (800c8a8 <vPortFree+0xb8>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	43db      	mvns	r3, r3
 800c872:	401a      	ands	r2, r3
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c878:	f7fe fc8e 	bl	800b198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	4b0a      	ldr	r3, [pc, #40]	; (800c8ac <vPortFree+0xbc>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4413      	add	r3, r2
 800c886:	4a09      	ldr	r2, [pc, #36]	; (800c8ac <vPortFree+0xbc>)
 800c888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c88a:	6938      	ldr	r0, [r7, #16]
 800c88c:	f000 f874 	bl	800c978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c890:	4b07      	ldr	r3, [pc, #28]	; (800c8b0 <vPortFree+0xc0>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3301      	adds	r3, #1
 800c896:	4a06      	ldr	r2, [pc, #24]	; (800c8b0 <vPortFree+0xc0>)
 800c898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c89a:	f7fe fc8b 	bl	800b1b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c89e:	bf00      	nop
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	200071e8 	.word	0x200071e8
 800c8ac:	200071d8 	.word	0x200071d8
 800c8b0:	200071e4 	.word	0x200071e4

0800c8b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c8be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8c0:	4b27      	ldr	r3, [pc, #156]	; (800c960 <prvHeapInit+0xac>)
 800c8c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f003 0307 	and.w	r3, r3, #7
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00c      	beq.n	800c8e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3307      	adds	r3, #7
 800c8d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f023 0307 	bic.w	r3, r3, #7
 800c8da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	4a1f      	ldr	r2, [pc, #124]	; (800c960 <prvHeapInit+0xac>)
 800c8e4:	4413      	add	r3, r2
 800c8e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8ec:	4a1d      	ldr	r2, [pc, #116]	; (800c964 <prvHeapInit+0xb0>)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8f2:	4b1c      	ldr	r3, [pc, #112]	; (800c964 <prvHeapInit+0xb0>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c900:	2208      	movs	r2, #8
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	1a9b      	subs	r3, r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f023 0307 	bic.w	r3, r3, #7
 800c90e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	4a15      	ldr	r2, [pc, #84]	; (800c968 <prvHeapInit+0xb4>)
 800c914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c916:	4b14      	ldr	r3, [pc, #80]	; (800c968 <prvHeapInit+0xb4>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2200      	movs	r2, #0
 800c91c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c91e:	4b12      	ldr	r3, [pc, #72]	; (800c968 <prvHeapInit+0xb4>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2200      	movs	r2, #0
 800c924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	1ad2      	subs	r2, r2, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c934:	4b0c      	ldr	r3, [pc, #48]	; (800c968 <prvHeapInit+0xb4>)
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	4a0a      	ldr	r2, [pc, #40]	; (800c96c <prvHeapInit+0xb8>)
 800c942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	4a09      	ldr	r2, [pc, #36]	; (800c970 <prvHeapInit+0xbc>)
 800c94a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c94c:	4b09      	ldr	r3, [pc, #36]	; (800c974 <prvHeapInit+0xc0>)
 800c94e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c952:	601a      	str	r2, [r3, #0]
}
 800c954:	bf00      	nop
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr
 800c960:	200035cc 	.word	0x200035cc
 800c964:	200071cc 	.word	0x200071cc
 800c968:	200071d4 	.word	0x200071d4
 800c96c:	200071dc 	.word	0x200071dc
 800c970:	200071d8 	.word	0x200071d8
 800c974:	200071e8 	.word	0x200071e8

0800c978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c980:	4b28      	ldr	r3, [pc, #160]	; (800ca24 <prvInsertBlockIntoFreeList+0xac>)
 800c982:	60fb      	str	r3, [r7, #12]
 800c984:	e002      	b.n	800c98c <prvInsertBlockIntoFreeList+0x14>
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	60fb      	str	r3, [r7, #12]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	429a      	cmp	r2, r3
 800c994:	d8f7      	bhi.n	800c986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d108      	bne.n	800c9ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	685a      	ldr	r2, [r3, #4]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	441a      	add	r2, r3
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	441a      	add	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d118      	bne.n	800ca00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	4b15      	ldr	r3, [pc, #84]	; (800ca28 <prvInsertBlockIntoFreeList+0xb0>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d00d      	beq.n	800c9f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	685a      	ldr	r2, [r3, #4]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	441a      	add	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	e008      	b.n	800ca08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ca28 <prvInsertBlockIntoFreeList+0xb0>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	e003      	b.n	800ca08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d002      	beq.n	800ca16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca16:	bf00      	nop
 800ca18:	3714      	adds	r7, #20
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	200071cc 	.word	0x200071cc
 800ca28:	200071d4 	.word	0x200071d4

0800ca2c <__errno>:
 800ca2c:	4b01      	ldr	r3, [pc, #4]	; (800ca34 <__errno+0x8>)
 800ca2e:	6818      	ldr	r0, [r3, #0]
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20000024 	.word	0x20000024

0800ca38 <__libc_init_array>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	4d0d      	ldr	r5, [pc, #52]	; (800ca70 <__libc_init_array+0x38>)
 800ca3c:	4c0d      	ldr	r4, [pc, #52]	; (800ca74 <__libc_init_array+0x3c>)
 800ca3e:	1b64      	subs	r4, r4, r5
 800ca40:	10a4      	asrs	r4, r4, #2
 800ca42:	2600      	movs	r6, #0
 800ca44:	42a6      	cmp	r6, r4
 800ca46:	d109      	bne.n	800ca5c <__libc_init_array+0x24>
 800ca48:	4d0b      	ldr	r5, [pc, #44]	; (800ca78 <__libc_init_array+0x40>)
 800ca4a:	4c0c      	ldr	r4, [pc, #48]	; (800ca7c <__libc_init_array+0x44>)
 800ca4c:	f000 feb8 	bl	800d7c0 <_init>
 800ca50:	1b64      	subs	r4, r4, r5
 800ca52:	10a4      	asrs	r4, r4, #2
 800ca54:	2600      	movs	r6, #0
 800ca56:	42a6      	cmp	r6, r4
 800ca58:	d105      	bne.n	800ca66 <__libc_init_array+0x2e>
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca60:	4798      	blx	r3
 800ca62:	3601      	adds	r6, #1
 800ca64:	e7ee      	b.n	800ca44 <__libc_init_array+0xc>
 800ca66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca6a:	4798      	blx	r3
 800ca6c:	3601      	adds	r6, #1
 800ca6e:	e7f2      	b.n	800ca56 <__libc_init_array+0x1e>
 800ca70:	0800e3e4 	.word	0x0800e3e4
 800ca74:	0800e3e4 	.word	0x0800e3e4
 800ca78:	0800e3e4 	.word	0x0800e3e4
 800ca7c:	0800e3e8 	.word	0x0800e3e8

0800ca80 <memcpy>:
 800ca80:	440a      	add	r2, r1
 800ca82:	4291      	cmp	r1, r2
 800ca84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca88:	d100      	bne.n	800ca8c <memcpy+0xc>
 800ca8a:	4770      	bx	lr
 800ca8c:	b510      	push	{r4, lr}
 800ca8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca96:	4291      	cmp	r1, r2
 800ca98:	d1f9      	bne.n	800ca8e <memcpy+0xe>
 800ca9a:	bd10      	pop	{r4, pc}

0800ca9c <memset>:
 800ca9c:	4402      	add	r2, r0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d100      	bne.n	800caa6 <memset+0xa>
 800caa4:	4770      	bx	lr
 800caa6:	f803 1b01 	strb.w	r1, [r3], #1
 800caaa:	e7f9      	b.n	800caa0 <memset+0x4>

0800caac <siprintf>:
 800caac:	b40e      	push	{r1, r2, r3}
 800caae:	b500      	push	{lr}
 800cab0:	b09c      	sub	sp, #112	; 0x70
 800cab2:	ab1d      	add	r3, sp, #116	; 0x74
 800cab4:	9002      	str	r0, [sp, #8]
 800cab6:	9006      	str	r0, [sp, #24]
 800cab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cabc:	4809      	ldr	r0, [pc, #36]	; (800cae4 <siprintf+0x38>)
 800cabe:	9107      	str	r1, [sp, #28]
 800cac0:	9104      	str	r1, [sp, #16]
 800cac2:	4909      	ldr	r1, [pc, #36]	; (800cae8 <siprintf+0x3c>)
 800cac4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac8:	9105      	str	r1, [sp, #20]
 800caca:	6800      	ldr	r0, [r0, #0]
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	a902      	add	r1, sp, #8
 800cad0:	f000 f868 	bl	800cba4 <_svfiprintf_r>
 800cad4:	9b02      	ldr	r3, [sp, #8]
 800cad6:	2200      	movs	r2, #0
 800cad8:	701a      	strb	r2, [r3, #0]
 800cada:	b01c      	add	sp, #112	; 0x70
 800cadc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cae0:	b003      	add	sp, #12
 800cae2:	4770      	bx	lr
 800cae4:	20000024 	.word	0x20000024
 800cae8:	ffff0208 	.word	0xffff0208

0800caec <__ssputs_r>:
 800caec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf0:	688e      	ldr	r6, [r1, #8]
 800caf2:	429e      	cmp	r6, r3
 800caf4:	4682      	mov	sl, r0
 800caf6:	460c      	mov	r4, r1
 800caf8:	4690      	mov	r8, r2
 800cafa:	461f      	mov	r7, r3
 800cafc:	d838      	bhi.n	800cb70 <__ssputs_r+0x84>
 800cafe:	898a      	ldrh	r2, [r1, #12]
 800cb00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb04:	d032      	beq.n	800cb6c <__ssputs_r+0x80>
 800cb06:	6825      	ldr	r5, [r4, #0]
 800cb08:	6909      	ldr	r1, [r1, #16]
 800cb0a:	eba5 0901 	sub.w	r9, r5, r1
 800cb0e:	6965      	ldr	r5, [r4, #20]
 800cb10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb18:	3301      	adds	r3, #1
 800cb1a:	444b      	add	r3, r9
 800cb1c:	106d      	asrs	r5, r5, #1
 800cb1e:	429d      	cmp	r5, r3
 800cb20:	bf38      	it	cc
 800cb22:	461d      	movcc	r5, r3
 800cb24:	0553      	lsls	r3, r2, #21
 800cb26:	d531      	bpl.n	800cb8c <__ssputs_r+0xa0>
 800cb28:	4629      	mov	r1, r5
 800cb2a:	f000 fb55 	bl	800d1d8 <_malloc_r>
 800cb2e:	4606      	mov	r6, r0
 800cb30:	b950      	cbnz	r0, 800cb48 <__ssputs_r+0x5c>
 800cb32:	230c      	movs	r3, #12
 800cb34:	f8ca 3000 	str.w	r3, [sl]
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb3e:	81a3      	strh	r3, [r4, #12]
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb48:	6921      	ldr	r1, [r4, #16]
 800cb4a:	464a      	mov	r2, r9
 800cb4c:	f7ff ff98 	bl	800ca80 <memcpy>
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5a:	81a3      	strh	r3, [r4, #12]
 800cb5c:	6126      	str	r6, [r4, #16]
 800cb5e:	6165      	str	r5, [r4, #20]
 800cb60:	444e      	add	r6, r9
 800cb62:	eba5 0509 	sub.w	r5, r5, r9
 800cb66:	6026      	str	r6, [r4, #0]
 800cb68:	60a5      	str	r5, [r4, #8]
 800cb6a:	463e      	mov	r6, r7
 800cb6c:	42be      	cmp	r6, r7
 800cb6e:	d900      	bls.n	800cb72 <__ssputs_r+0x86>
 800cb70:	463e      	mov	r6, r7
 800cb72:	6820      	ldr	r0, [r4, #0]
 800cb74:	4632      	mov	r2, r6
 800cb76:	4641      	mov	r1, r8
 800cb78:	f000 faa8 	bl	800d0cc <memmove>
 800cb7c:	68a3      	ldr	r3, [r4, #8]
 800cb7e:	1b9b      	subs	r3, r3, r6
 800cb80:	60a3      	str	r3, [r4, #8]
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	4433      	add	r3, r6
 800cb86:	6023      	str	r3, [r4, #0]
 800cb88:	2000      	movs	r0, #0
 800cb8a:	e7db      	b.n	800cb44 <__ssputs_r+0x58>
 800cb8c:	462a      	mov	r2, r5
 800cb8e:	f000 fb97 	bl	800d2c0 <_realloc_r>
 800cb92:	4606      	mov	r6, r0
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d1e1      	bne.n	800cb5c <__ssputs_r+0x70>
 800cb98:	6921      	ldr	r1, [r4, #16]
 800cb9a:	4650      	mov	r0, sl
 800cb9c:	f000 fab0 	bl	800d100 <_free_r>
 800cba0:	e7c7      	b.n	800cb32 <__ssputs_r+0x46>
	...

0800cba4 <_svfiprintf_r>:
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	4698      	mov	r8, r3
 800cbaa:	898b      	ldrh	r3, [r1, #12]
 800cbac:	061b      	lsls	r3, r3, #24
 800cbae:	b09d      	sub	sp, #116	; 0x74
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	d50e      	bpl.n	800cbd6 <_svfiprintf_r+0x32>
 800cbb8:	690b      	ldr	r3, [r1, #16]
 800cbba:	b963      	cbnz	r3, 800cbd6 <_svfiprintf_r+0x32>
 800cbbc:	2140      	movs	r1, #64	; 0x40
 800cbbe:	f000 fb0b 	bl	800d1d8 <_malloc_r>
 800cbc2:	6028      	str	r0, [r5, #0]
 800cbc4:	6128      	str	r0, [r5, #16]
 800cbc6:	b920      	cbnz	r0, 800cbd2 <_svfiprintf_r+0x2e>
 800cbc8:	230c      	movs	r3, #12
 800cbca:	603b      	str	r3, [r7, #0]
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd0:	e0d1      	b.n	800cd76 <_svfiprintf_r+0x1d2>
 800cbd2:	2340      	movs	r3, #64	; 0x40
 800cbd4:	616b      	str	r3, [r5, #20]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9309      	str	r3, [sp, #36]	; 0x24
 800cbda:	2320      	movs	r3, #32
 800cbdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbe0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbe4:	2330      	movs	r3, #48	; 0x30
 800cbe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd90 <_svfiprintf_r+0x1ec>
 800cbea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbee:	f04f 0901 	mov.w	r9, #1
 800cbf2:	4623      	mov	r3, r4
 800cbf4:	469a      	mov	sl, r3
 800cbf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbfa:	b10a      	cbz	r2, 800cc00 <_svfiprintf_r+0x5c>
 800cbfc:	2a25      	cmp	r2, #37	; 0x25
 800cbfe:	d1f9      	bne.n	800cbf4 <_svfiprintf_r+0x50>
 800cc00:	ebba 0b04 	subs.w	fp, sl, r4
 800cc04:	d00b      	beq.n	800cc1e <_svfiprintf_r+0x7a>
 800cc06:	465b      	mov	r3, fp
 800cc08:	4622      	mov	r2, r4
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	4638      	mov	r0, r7
 800cc0e:	f7ff ff6d 	bl	800caec <__ssputs_r>
 800cc12:	3001      	adds	r0, #1
 800cc14:	f000 80aa 	beq.w	800cd6c <_svfiprintf_r+0x1c8>
 800cc18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc1a:	445a      	add	r2, fp
 800cc1c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc1e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f000 80a2 	beq.w	800cd6c <_svfiprintf_r+0x1c8>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc32:	f10a 0a01 	add.w	sl, sl, #1
 800cc36:	9304      	str	r3, [sp, #16]
 800cc38:	9307      	str	r3, [sp, #28]
 800cc3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc3e:	931a      	str	r3, [sp, #104]	; 0x68
 800cc40:	4654      	mov	r4, sl
 800cc42:	2205      	movs	r2, #5
 800cc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc48:	4851      	ldr	r0, [pc, #324]	; (800cd90 <_svfiprintf_r+0x1ec>)
 800cc4a:	f7f3 fac1 	bl	80001d0 <memchr>
 800cc4e:	9a04      	ldr	r2, [sp, #16]
 800cc50:	b9d8      	cbnz	r0, 800cc8a <_svfiprintf_r+0xe6>
 800cc52:	06d0      	lsls	r0, r2, #27
 800cc54:	bf44      	itt	mi
 800cc56:	2320      	movmi	r3, #32
 800cc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc5c:	0711      	lsls	r1, r2, #28
 800cc5e:	bf44      	itt	mi
 800cc60:	232b      	movmi	r3, #43	; 0x2b
 800cc62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc66:	f89a 3000 	ldrb.w	r3, [sl]
 800cc6a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc6c:	d015      	beq.n	800cc9a <_svfiprintf_r+0xf6>
 800cc6e:	9a07      	ldr	r2, [sp, #28]
 800cc70:	4654      	mov	r4, sl
 800cc72:	2000      	movs	r0, #0
 800cc74:	f04f 0c0a 	mov.w	ip, #10
 800cc78:	4621      	mov	r1, r4
 800cc7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc7e:	3b30      	subs	r3, #48	; 0x30
 800cc80:	2b09      	cmp	r3, #9
 800cc82:	d94e      	bls.n	800cd22 <_svfiprintf_r+0x17e>
 800cc84:	b1b0      	cbz	r0, 800ccb4 <_svfiprintf_r+0x110>
 800cc86:	9207      	str	r2, [sp, #28]
 800cc88:	e014      	b.n	800ccb4 <_svfiprintf_r+0x110>
 800cc8a:	eba0 0308 	sub.w	r3, r0, r8
 800cc8e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc92:	4313      	orrs	r3, r2
 800cc94:	9304      	str	r3, [sp, #16]
 800cc96:	46a2      	mov	sl, r4
 800cc98:	e7d2      	b.n	800cc40 <_svfiprintf_r+0x9c>
 800cc9a:	9b03      	ldr	r3, [sp, #12]
 800cc9c:	1d19      	adds	r1, r3, #4
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	9103      	str	r1, [sp, #12]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	bfbb      	ittet	lt
 800cca6:	425b      	neglt	r3, r3
 800cca8:	f042 0202 	orrlt.w	r2, r2, #2
 800ccac:	9307      	strge	r3, [sp, #28]
 800ccae:	9307      	strlt	r3, [sp, #28]
 800ccb0:	bfb8      	it	lt
 800ccb2:	9204      	strlt	r2, [sp, #16]
 800ccb4:	7823      	ldrb	r3, [r4, #0]
 800ccb6:	2b2e      	cmp	r3, #46	; 0x2e
 800ccb8:	d10c      	bne.n	800ccd4 <_svfiprintf_r+0x130>
 800ccba:	7863      	ldrb	r3, [r4, #1]
 800ccbc:	2b2a      	cmp	r3, #42	; 0x2a
 800ccbe:	d135      	bne.n	800cd2c <_svfiprintf_r+0x188>
 800ccc0:	9b03      	ldr	r3, [sp, #12]
 800ccc2:	1d1a      	adds	r2, r3, #4
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	9203      	str	r2, [sp, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	bfb8      	it	lt
 800cccc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccd0:	3402      	adds	r4, #2
 800ccd2:	9305      	str	r3, [sp, #20]
 800ccd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cda0 <_svfiprintf_r+0x1fc>
 800ccd8:	7821      	ldrb	r1, [r4, #0]
 800ccda:	2203      	movs	r2, #3
 800ccdc:	4650      	mov	r0, sl
 800ccde:	f7f3 fa77 	bl	80001d0 <memchr>
 800cce2:	b140      	cbz	r0, 800ccf6 <_svfiprintf_r+0x152>
 800cce4:	2340      	movs	r3, #64	; 0x40
 800cce6:	eba0 000a 	sub.w	r0, r0, sl
 800ccea:	fa03 f000 	lsl.w	r0, r3, r0
 800ccee:	9b04      	ldr	r3, [sp, #16]
 800ccf0:	4303      	orrs	r3, r0
 800ccf2:	3401      	adds	r4, #1
 800ccf4:	9304      	str	r3, [sp, #16]
 800ccf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfa:	4826      	ldr	r0, [pc, #152]	; (800cd94 <_svfiprintf_r+0x1f0>)
 800ccfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd00:	2206      	movs	r2, #6
 800cd02:	f7f3 fa65 	bl	80001d0 <memchr>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d038      	beq.n	800cd7c <_svfiprintf_r+0x1d8>
 800cd0a:	4b23      	ldr	r3, [pc, #140]	; (800cd98 <_svfiprintf_r+0x1f4>)
 800cd0c:	bb1b      	cbnz	r3, 800cd56 <_svfiprintf_r+0x1b2>
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	3307      	adds	r3, #7
 800cd12:	f023 0307 	bic.w	r3, r3, #7
 800cd16:	3308      	adds	r3, #8
 800cd18:	9303      	str	r3, [sp, #12]
 800cd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd1c:	4433      	add	r3, r6
 800cd1e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd20:	e767      	b.n	800cbf2 <_svfiprintf_r+0x4e>
 800cd22:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd26:	460c      	mov	r4, r1
 800cd28:	2001      	movs	r0, #1
 800cd2a:	e7a5      	b.n	800cc78 <_svfiprintf_r+0xd4>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	3401      	adds	r4, #1
 800cd30:	9305      	str	r3, [sp, #20]
 800cd32:	4619      	mov	r1, r3
 800cd34:	f04f 0c0a 	mov.w	ip, #10
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd3e:	3a30      	subs	r2, #48	; 0x30
 800cd40:	2a09      	cmp	r2, #9
 800cd42:	d903      	bls.n	800cd4c <_svfiprintf_r+0x1a8>
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d0c5      	beq.n	800ccd4 <_svfiprintf_r+0x130>
 800cd48:	9105      	str	r1, [sp, #20]
 800cd4a:	e7c3      	b.n	800ccd4 <_svfiprintf_r+0x130>
 800cd4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd50:	4604      	mov	r4, r0
 800cd52:	2301      	movs	r3, #1
 800cd54:	e7f0      	b.n	800cd38 <_svfiprintf_r+0x194>
 800cd56:	ab03      	add	r3, sp, #12
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	462a      	mov	r2, r5
 800cd5c:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <_svfiprintf_r+0x1f8>)
 800cd5e:	a904      	add	r1, sp, #16
 800cd60:	4638      	mov	r0, r7
 800cd62:	f3af 8000 	nop.w
 800cd66:	1c42      	adds	r2, r0, #1
 800cd68:	4606      	mov	r6, r0
 800cd6a:	d1d6      	bne.n	800cd1a <_svfiprintf_r+0x176>
 800cd6c:	89ab      	ldrh	r3, [r5, #12]
 800cd6e:	065b      	lsls	r3, r3, #25
 800cd70:	f53f af2c 	bmi.w	800cbcc <_svfiprintf_r+0x28>
 800cd74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd76:	b01d      	add	sp, #116	; 0x74
 800cd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7c:	ab03      	add	r3, sp, #12
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	462a      	mov	r2, r5
 800cd82:	4b06      	ldr	r3, [pc, #24]	; (800cd9c <_svfiprintf_r+0x1f8>)
 800cd84:	a904      	add	r1, sp, #16
 800cd86:	4638      	mov	r0, r7
 800cd88:	f000 f87a 	bl	800ce80 <_printf_i>
 800cd8c:	e7eb      	b.n	800cd66 <_svfiprintf_r+0x1c2>
 800cd8e:	bf00      	nop
 800cd90:	0800e3a8 	.word	0x0800e3a8
 800cd94:	0800e3b2 	.word	0x0800e3b2
 800cd98:	00000000 	.word	0x00000000
 800cd9c:	0800caed 	.word	0x0800caed
 800cda0:	0800e3ae 	.word	0x0800e3ae

0800cda4 <_printf_common>:
 800cda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda8:	4616      	mov	r6, r2
 800cdaa:	4699      	mov	r9, r3
 800cdac:	688a      	ldr	r2, [r1, #8]
 800cdae:	690b      	ldr	r3, [r1, #16]
 800cdb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	bfb8      	it	lt
 800cdb8:	4613      	movlt	r3, r2
 800cdba:	6033      	str	r3, [r6, #0]
 800cdbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdc0:	4607      	mov	r7, r0
 800cdc2:	460c      	mov	r4, r1
 800cdc4:	b10a      	cbz	r2, 800cdca <_printf_common+0x26>
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	6033      	str	r3, [r6, #0]
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	0699      	lsls	r1, r3, #26
 800cdce:	bf42      	ittt	mi
 800cdd0:	6833      	ldrmi	r3, [r6, #0]
 800cdd2:	3302      	addmi	r3, #2
 800cdd4:	6033      	strmi	r3, [r6, #0]
 800cdd6:	6825      	ldr	r5, [r4, #0]
 800cdd8:	f015 0506 	ands.w	r5, r5, #6
 800cddc:	d106      	bne.n	800cdec <_printf_common+0x48>
 800cdde:	f104 0a19 	add.w	sl, r4, #25
 800cde2:	68e3      	ldr	r3, [r4, #12]
 800cde4:	6832      	ldr	r2, [r6, #0]
 800cde6:	1a9b      	subs	r3, r3, r2
 800cde8:	42ab      	cmp	r3, r5
 800cdea:	dc26      	bgt.n	800ce3a <_printf_common+0x96>
 800cdec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdf0:	1e13      	subs	r3, r2, #0
 800cdf2:	6822      	ldr	r2, [r4, #0]
 800cdf4:	bf18      	it	ne
 800cdf6:	2301      	movne	r3, #1
 800cdf8:	0692      	lsls	r2, r2, #26
 800cdfa:	d42b      	bmi.n	800ce54 <_printf_common+0xb0>
 800cdfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce00:	4649      	mov	r1, r9
 800ce02:	4638      	mov	r0, r7
 800ce04:	47c0      	blx	r8
 800ce06:	3001      	adds	r0, #1
 800ce08:	d01e      	beq.n	800ce48 <_printf_common+0xa4>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	68e5      	ldr	r5, [r4, #12]
 800ce0e:	6832      	ldr	r2, [r6, #0]
 800ce10:	f003 0306 	and.w	r3, r3, #6
 800ce14:	2b04      	cmp	r3, #4
 800ce16:	bf08      	it	eq
 800ce18:	1aad      	subeq	r5, r5, r2
 800ce1a:	68a3      	ldr	r3, [r4, #8]
 800ce1c:	6922      	ldr	r2, [r4, #16]
 800ce1e:	bf0c      	ite	eq
 800ce20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce24:	2500      	movne	r5, #0
 800ce26:	4293      	cmp	r3, r2
 800ce28:	bfc4      	itt	gt
 800ce2a:	1a9b      	subgt	r3, r3, r2
 800ce2c:	18ed      	addgt	r5, r5, r3
 800ce2e:	2600      	movs	r6, #0
 800ce30:	341a      	adds	r4, #26
 800ce32:	42b5      	cmp	r5, r6
 800ce34:	d11a      	bne.n	800ce6c <_printf_common+0xc8>
 800ce36:	2000      	movs	r0, #0
 800ce38:	e008      	b.n	800ce4c <_printf_common+0xa8>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	4652      	mov	r2, sl
 800ce3e:	4649      	mov	r1, r9
 800ce40:	4638      	mov	r0, r7
 800ce42:	47c0      	blx	r8
 800ce44:	3001      	adds	r0, #1
 800ce46:	d103      	bne.n	800ce50 <_printf_common+0xac>
 800ce48:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce50:	3501      	adds	r5, #1
 800ce52:	e7c6      	b.n	800cde2 <_printf_common+0x3e>
 800ce54:	18e1      	adds	r1, r4, r3
 800ce56:	1c5a      	adds	r2, r3, #1
 800ce58:	2030      	movs	r0, #48	; 0x30
 800ce5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce5e:	4422      	add	r2, r4
 800ce60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce68:	3302      	adds	r3, #2
 800ce6a:	e7c7      	b.n	800cdfc <_printf_common+0x58>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	4622      	mov	r2, r4
 800ce70:	4649      	mov	r1, r9
 800ce72:	4638      	mov	r0, r7
 800ce74:	47c0      	blx	r8
 800ce76:	3001      	adds	r0, #1
 800ce78:	d0e6      	beq.n	800ce48 <_printf_common+0xa4>
 800ce7a:	3601      	adds	r6, #1
 800ce7c:	e7d9      	b.n	800ce32 <_printf_common+0x8e>
	...

0800ce80 <_printf_i>:
 800ce80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce84:	7e0f      	ldrb	r7, [r1, #24]
 800ce86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce88:	2f78      	cmp	r7, #120	; 0x78
 800ce8a:	4691      	mov	r9, r2
 800ce8c:	4680      	mov	r8, r0
 800ce8e:	460c      	mov	r4, r1
 800ce90:	469a      	mov	sl, r3
 800ce92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce96:	d807      	bhi.n	800cea8 <_printf_i+0x28>
 800ce98:	2f62      	cmp	r7, #98	; 0x62
 800ce9a:	d80a      	bhi.n	800ceb2 <_printf_i+0x32>
 800ce9c:	2f00      	cmp	r7, #0
 800ce9e:	f000 80d8 	beq.w	800d052 <_printf_i+0x1d2>
 800cea2:	2f58      	cmp	r7, #88	; 0x58
 800cea4:	f000 80a3 	beq.w	800cfee <_printf_i+0x16e>
 800cea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ceac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ceb0:	e03a      	b.n	800cf28 <_printf_i+0xa8>
 800ceb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ceb6:	2b15      	cmp	r3, #21
 800ceb8:	d8f6      	bhi.n	800cea8 <_printf_i+0x28>
 800ceba:	a101      	add	r1, pc, #4	; (adr r1, 800cec0 <_printf_i+0x40>)
 800cebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cec0:	0800cf19 	.word	0x0800cf19
 800cec4:	0800cf2d 	.word	0x0800cf2d
 800cec8:	0800cea9 	.word	0x0800cea9
 800cecc:	0800cea9 	.word	0x0800cea9
 800ced0:	0800cea9 	.word	0x0800cea9
 800ced4:	0800cea9 	.word	0x0800cea9
 800ced8:	0800cf2d 	.word	0x0800cf2d
 800cedc:	0800cea9 	.word	0x0800cea9
 800cee0:	0800cea9 	.word	0x0800cea9
 800cee4:	0800cea9 	.word	0x0800cea9
 800cee8:	0800cea9 	.word	0x0800cea9
 800ceec:	0800d039 	.word	0x0800d039
 800cef0:	0800cf5d 	.word	0x0800cf5d
 800cef4:	0800d01b 	.word	0x0800d01b
 800cef8:	0800cea9 	.word	0x0800cea9
 800cefc:	0800cea9 	.word	0x0800cea9
 800cf00:	0800d05b 	.word	0x0800d05b
 800cf04:	0800cea9 	.word	0x0800cea9
 800cf08:	0800cf5d 	.word	0x0800cf5d
 800cf0c:	0800cea9 	.word	0x0800cea9
 800cf10:	0800cea9 	.word	0x0800cea9
 800cf14:	0800d023 	.word	0x0800d023
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	1d1a      	adds	r2, r3, #4
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	602a      	str	r2, [r5, #0]
 800cf20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e0a3      	b.n	800d074 <_printf_i+0x1f4>
 800cf2c:	6820      	ldr	r0, [r4, #0]
 800cf2e:	6829      	ldr	r1, [r5, #0]
 800cf30:	0606      	lsls	r6, r0, #24
 800cf32:	f101 0304 	add.w	r3, r1, #4
 800cf36:	d50a      	bpl.n	800cf4e <_printf_i+0xce>
 800cf38:	680e      	ldr	r6, [r1, #0]
 800cf3a:	602b      	str	r3, [r5, #0]
 800cf3c:	2e00      	cmp	r6, #0
 800cf3e:	da03      	bge.n	800cf48 <_printf_i+0xc8>
 800cf40:	232d      	movs	r3, #45	; 0x2d
 800cf42:	4276      	negs	r6, r6
 800cf44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf48:	485e      	ldr	r0, [pc, #376]	; (800d0c4 <_printf_i+0x244>)
 800cf4a:	230a      	movs	r3, #10
 800cf4c:	e019      	b.n	800cf82 <_printf_i+0x102>
 800cf4e:	680e      	ldr	r6, [r1, #0]
 800cf50:	602b      	str	r3, [r5, #0]
 800cf52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf56:	bf18      	it	ne
 800cf58:	b236      	sxthne	r6, r6
 800cf5a:	e7ef      	b.n	800cf3c <_printf_i+0xbc>
 800cf5c:	682b      	ldr	r3, [r5, #0]
 800cf5e:	6820      	ldr	r0, [r4, #0]
 800cf60:	1d19      	adds	r1, r3, #4
 800cf62:	6029      	str	r1, [r5, #0]
 800cf64:	0601      	lsls	r1, r0, #24
 800cf66:	d501      	bpl.n	800cf6c <_printf_i+0xec>
 800cf68:	681e      	ldr	r6, [r3, #0]
 800cf6a:	e002      	b.n	800cf72 <_printf_i+0xf2>
 800cf6c:	0646      	lsls	r6, r0, #25
 800cf6e:	d5fb      	bpl.n	800cf68 <_printf_i+0xe8>
 800cf70:	881e      	ldrh	r6, [r3, #0]
 800cf72:	4854      	ldr	r0, [pc, #336]	; (800d0c4 <_printf_i+0x244>)
 800cf74:	2f6f      	cmp	r7, #111	; 0x6f
 800cf76:	bf0c      	ite	eq
 800cf78:	2308      	moveq	r3, #8
 800cf7a:	230a      	movne	r3, #10
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf82:	6865      	ldr	r5, [r4, #4]
 800cf84:	60a5      	str	r5, [r4, #8]
 800cf86:	2d00      	cmp	r5, #0
 800cf88:	bfa2      	ittt	ge
 800cf8a:	6821      	ldrge	r1, [r4, #0]
 800cf8c:	f021 0104 	bicge.w	r1, r1, #4
 800cf90:	6021      	strge	r1, [r4, #0]
 800cf92:	b90e      	cbnz	r6, 800cf98 <_printf_i+0x118>
 800cf94:	2d00      	cmp	r5, #0
 800cf96:	d04d      	beq.n	800d034 <_printf_i+0x1b4>
 800cf98:	4615      	mov	r5, r2
 800cf9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf9e:	fb03 6711 	mls	r7, r3, r1, r6
 800cfa2:	5dc7      	ldrb	r7, [r0, r7]
 800cfa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cfa8:	4637      	mov	r7, r6
 800cfaa:	42bb      	cmp	r3, r7
 800cfac:	460e      	mov	r6, r1
 800cfae:	d9f4      	bls.n	800cf9a <_printf_i+0x11a>
 800cfb0:	2b08      	cmp	r3, #8
 800cfb2:	d10b      	bne.n	800cfcc <_printf_i+0x14c>
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	07de      	lsls	r6, r3, #31
 800cfb8:	d508      	bpl.n	800cfcc <_printf_i+0x14c>
 800cfba:	6923      	ldr	r3, [r4, #16]
 800cfbc:	6861      	ldr	r1, [r4, #4]
 800cfbe:	4299      	cmp	r1, r3
 800cfc0:	bfde      	ittt	le
 800cfc2:	2330      	movle	r3, #48	; 0x30
 800cfc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cfc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cfcc:	1b52      	subs	r2, r2, r5
 800cfce:	6122      	str	r2, [r4, #16]
 800cfd0:	f8cd a000 	str.w	sl, [sp]
 800cfd4:	464b      	mov	r3, r9
 800cfd6:	aa03      	add	r2, sp, #12
 800cfd8:	4621      	mov	r1, r4
 800cfda:	4640      	mov	r0, r8
 800cfdc:	f7ff fee2 	bl	800cda4 <_printf_common>
 800cfe0:	3001      	adds	r0, #1
 800cfe2:	d14c      	bne.n	800d07e <_printf_i+0x1fe>
 800cfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe8:	b004      	add	sp, #16
 800cfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfee:	4835      	ldr	r0, [pc, #212]	; (800d0c4 <_printf_i+0x244>)
 800cff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cff4:	6829      	ldr	r1, [r5, #0]
 800cff6:	6823      	ldr	r3, [r4, #0]
 800cff8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cffc:	6029      	str	r1, [r5, #0]
 800cffe:	061d      	lsls	r5, r3, #24
 800d000:	d514      	bpl.n	800d02c <_printf_i+0x1ac>
 800d002:	07df      	lsls	r7, r3, #31
 800d004:	bf44      	itt	mi
 800d006:	f043 0320 	orrmi.w	r3, r3, #32
 800d00a:	6023      	strmi	r3, [r4, #0]
 800d00c:	b91e      	cbnz	r6, 800d016 <_printf_i+0x196>
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	f023 0320 	bic.w	r3, r3, #32
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	2310      	movs	r3, #16
 800d018:	e7b0      	b.n	800cf7c <_printf_i+0xfc>
 800d01a:	6823      	ldr	r3, [r4, #0]
 800d01c:	f043 0320 	orr.w	r3, r3, #32
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	2378      	movs	r3, #120	; 0x78
 800d024:	4828      	ldr	r0, [pc, #160]	; (800d0c8 <_printf_i+0x248>)
 800d026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d02a:	e7e3      	b.n	800cff4 <_printf_i+0x174>
 800d02c:	0659      	lsls	r1, r3, #25
 800d02e:	bf48      	it	mi
 800d030:	b2b6      	uxthmi	r6, r6
 800d032:	e7e6      	b.n	800d002 <_printf_i+0x182>
 800d034:	4615      	mov	r5, r2
 800d036:	e7bb      	b.n	800cfb0 <_printf_i+0x130>
 800d038:	682b      	ldr	r3, [r5, #0]
 800d03a:	6826      	ldr	r6, [r4, #0]
 800d03c:	6961      	ldr	r1, [r4, #20]
 800d03e:	1d18      	adds	r0, r3, #4
 800d040:	6028      	str	r0, [r5, #0]
 800d042:	0635      	lsls	r5, r6, #24
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	d501      	bpl.n	800d04c <_printf_i+0x1cc>
 800d048:	6019      	str	r1, [r3, #0]
 800d04a:	e002      	b.n	800d052 <_printf_i+0x1d2>
 800d04c:	0670      	lsls	r0, r6, #25
 800d04e:	d5fb      	bpl.n	800d048 <_printf_i+0x1c8>
 800d050:	8019      	strh	r1, [r3, #0]
 800d052:	2300      	movs	r3, #0
 800d054:	6123      	str	r3, [r4, #16]
 800d056:	4615      	mov	r5, r2
 800d058:	e7ba      	b.n	800cfd0 <_printf_i+0x150>
 800d05a:	682b      	ldr	r3, [r5, #0]
 800d05c:	1d1a      	adds	r2, r3, #4
 800d05e:	602a      	str	r2, [r5, #0]
 800d060:	681d      	ldr	r5, [r3, #0]
 800d062:	6862      	ldr	r2, [r4, #4]
 800d064:	2100      	movs	r1, #0
 800d066:	4628      	mov	r0, r5
 800d068:	f7f3 f8b2 	bl	80001d0 <memchr>
 800d06c:	b108      	cbz	r0, 800d072 <_printf_i+0x1f2>
 800d06e:	1b40      	subs	r0, r0, r5
 800d070:	6060      	str	r0, [r4, #4]
 800d072:	6863      	ldr	r3, [r4, #4]
 800d074:	6123      	str	r3, [r4, #16]
 800d076:	2300      	movs	r3, #0
 800d078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d07c:	e7a8      	b.n	800cfd0 <_printf_i+0x150>
 800d07e:	6923      	ldr	r3, [r4, #16]
 800d080:	462a      	mov	r2, r5
 800d082:	4649      	mov	r1, r9
 800d084:	4640      	mov	r0, r8
 800d086:	47d0      	blx	sl
 800d088:	3001      	adds	r0, #1
 800d08a:	d0ab      	beq.n	800cfe4 <_printf_i+0x164>
 800d08c:	6823      	ldr	r3, [r4, #0]
 800d08e:	079b      	lsls	r3, r3, #30
 800d090:	d413      	bmi.n	800d0ba <_printf_i+0x23a>
 800d092:	68e0      	ldr	r0, [r4, #12]
 800d094:	9b03      	ldr	r3, [sp, #12]
 800d096:	4298      	cmp	r0, r3
 800d098:	bfb8      	it	lt
 800d09a:	4618      	movlt	r0, r3
 800d09c:	e7a4      	b.n	800cfe8 <_printf_i+0x168>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	4632      	mov	r2, r6
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	47d0      	blx	sl
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	d09b      	beq.n	800cfe4 <_printf_i+0x164>
 800d0ac:	3501      	adds	r5, #1
 800d0ae:	68e3      	ldr	r3, [r4, #12]
 800d0b0:	9903      	ldr	r1, [sp, #12]
 800d0b2:	1a5b      	subs	r3, r3, r1
 800d0b4:	42ab      	cmp	r3, r5
 800d0b6:	dcf2      	bgt.n	800d09e <_printf_i+0x21e>
 800d0b8:	e7eb      	b.n	800d092 <_printf_i+0x212>
 800d0ba:	2500      	movs	r5, #0
 800d0bc:	f104 0619 	add.w	r6, r4, #25
 800d0c0:	e7f5      	b.n	800d0ae <_printf_i+0x22e>
 800d0c2:	bf00      	nop
 800d0c4:	0800e3b9 	.word	0x0800e3b9
 800d0c8:	0800e3ca 	.word	0x0800e3ca

0800d0cc <memmove>:
 800d0cc:	4288      	cmp	r0, r1
 800d0ce:	b510      	push	{r4, lr}
 800d0d0:	eb01 0402 	add.w	r4, r1, r2
 800d0d4:	d902      	bls.n	800d0dc <memmove+0x10>
 800d0d6:	4284      	cmp	r4, r0
 800d0d8:	4623      	mov	r3, r4
 800d0da:	d807      	bhi.n	800d0ec <memmove+0x20>
 800d0dc:	1e43      	subs	r3, r0, #1
 800d0de:	42a1      	cmp	r1, r4
 800d0e0:	d008      	beq.n	800d0f4 <memmove+0x28>
 800d0e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0ea:	e7f8      	b.n	800d0de <memmove+0x12>
 800d0ec:	4402      	add	r2, r0
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	428a      	cmp	r2, r1
 800d0f2:	d100      	bne.n	800d0f6 <memmove+0x2a>
 800d0f4:	bd10      	pop	{r4, pc}
 800d0f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0fe:	e7f7      	b.n	800d0f0 <memmove+0x24>

0800d100 <_free_r>:
 800d100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d102:	2900      	cmp	r1, #0
 800d104:	d044      	beq.n	800d190 <_free_r+0x90>
 800d106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d10a:	9001      	str	r0, [sp, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f1a1 0404 	sub.w	r4, r1, #4
 800d112:	bfb8      	it	lt
 800d114:	18e4      	addlt	r4, r4, r3
 800d116:	f000 f913 	bl	800d340 <__malloc_lock>
 800d11a:	4a1e      	ldr	r2, [pc, #120]	; (800d194 <_free_r+0x94>)
 800d11c:	9801      	ldr	r0, [sp, #4]
 800d11e:	6813      	ldr	r3, [r2, #0]
 800d120:	b933      	cbnz	r3, 800d130 <_free_r+0x30>
 800d122:	6063      	str	r3, [r4, #4]
 800d124:	6014      	str	r4, [r2, #0]
 800d126:	b003      	add	sp, #12
 800d128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d12c:	f000 b90e 	b.w	800d34c <__malloc_unlock>
 800d130:	42a3      	cmp	r3, r4
 800d132:	d908      	bls.n	800d146 <_free_r+0x46>
 800d134:	6825      	ldr	r5, [r4, #0]
 800d136:	1961      	adds	r1, r4, r5
 800d138:	428b      	cmp	r3, r1
 800d13a:	bf01      	itttt	eq
 800d13c:	6819      	ldreq	r1, [r3, #0]
 800d13e:	685b      	ldreq	r3, [r3, #4]
 800d140:	1949      	addeq	r1, r1, r5
 800d142:	6021      	streq	r1, [r4, #0]
 800d144:	e7ed      	b.n	800d122 <_free_r+0x22>
 800d146:	461a      	mov	r2, r3
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	b10b      	cbz	r3, 800d150 <_free_r+0x50>
 800d14c:	42a3      	cmp	r3, r4
 800d14e:	d9fa      	bls.n	800d146 <_free_r+0x46>
 800d150:	6811      	ldr	r1, [r2, #0]
 800d152:	1855      	adds	r5, r2, r1
 800d154:	42a5      	cmp	r5, r4
 800d156:	d10b      	bne.n	800d170 <_free_r+0x70>
 800d158:	6824      	ldr	r4, [r4, #0]
 800d15a:	4421      	add	r1, r4
 800d15c:	1854      	adds	r4, r2, r1
 800d15e:	42a3      	cmp	r3, r4
 800d160:	6011      	str	r1, [r2, #0]
 800d162:	d1e0      	bne.n	800d126 <_free_r+0x26>
 800d164:	681c      	ldr	r4, [r3, #0]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	6053      	str	r3, [r2, #4]
 800d16a:	4421      	add	r1, r4
 800d16c:	6011      	str	r1, [r2, #0]
 800d16e:	e7da      	b.n	800d126 <_free_r+0x26>
 800d170:	d902      	bls.n	800d178 <_free_r+0x78>
 800d172:	230c      	movs	r3, #12
 800d174:	6003      	str	r3, [r0, #0]
 800d176:	e7d6      	b.n	800d126 <_free_r+0x26>
 800d178:	6825      	ldr	r5, [r4, #0]
 800d17a:	1961      	adds	r1, r4, r5
 800d17c:	428b      	cmp	r3, r1
 800d17e:	bf04      	itt	eq
 800d180:	6819      	ldreq	r1, [r3, #0]
 800d182:	685b      	ldreq	r3, [r3, #4]
 800d184:	6063      	str	r3, [r4, #4]
 800d186:	bf04      	itt	eq
 800d188:	1949      	addeq	r1, r1, r5
 800d18a:	6021      	streq	r1, [r4, #0]
 800d18c:	6054      	str	r4, [r2, #4]
 800d18e:	e7ca      	b.n	800d126 <_free_r+0x26>
 800d190:	b003      	add	sp, #12
 800d192:	bd30      	pop	{r4, r5, pc}
 800d194:	200071ec 	.word	0x200071ec

0800d198 <sbrk_aligned>:
 800d198:	b570      	push	{r4, r5, r6, lr}
 800d19a:	4e0e      	ldr	r6, [pc, #56]	; (800d1d4 <sbrk_aligned+0x3c>)
 800d19c:	460c      	mov	r4, r1
 800d19e:	6831      	ldr	r1, [r6, #0]
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	b911      	cbnz	r1, 800d1aa <sbrk_aligned+0x12>
 800d1a4:	f000 f8bc 	bl	800d320 <_sbrk_r>
 800d1a8:	6030      	str	r0, [r6, #0]
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f000 f8b7 	bl	800d320 <_sbrk_r>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	d00a      	beq.n	800d1cc <sbrk_aligned+0x34>
 800d1b6:	1cc4      	adds	r4, r0, #3
 800d1b8:	f024 0403 	bic.w	r4, r4, #3
 800d1bc:	42a0      	cmp	r0, r4
 800d1be:	d007      	beq.n	800d1d0 <sbrk_aligned+0x38>
 800d1c0:	1a21      	subs	r1, r4, r0
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f000 f8ac 	bl	800d320 <_sbrk_r>
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	d101      	bne.n	800d1d0 <sbrk_aligned+0x38>
 800d1cc:	f04f 34ff 	mov.w	r4, #4294967295
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	bd70      	pop	{r4, r5, r6, pc}
 800d1d4:	200071f0 	.word	0x200071f0

0800d1d8 <_malloc_r>:
 800d1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	1ccd      	adds	r5, r1, #3
 800d1de:	f025 0503 	bic.w	r5, r5, #3
 800d1e2:	3508      	adds	r5, #8
 800d1e4:	2d0c      	cmp	r5, #12
 800d1e6:	bf38      	it	cc
 800d1e8:	250c      	movcc	r5, #12
 800d1ea:	2d00      	cmp	r5, #0
 800d1ec:	4607      	mov	r7, r0
 800d1ee:	db01      	blt.n	800d1f4 <_malloc_r+0x1c>
 800d1f0:	42a9      	cmp	r1, r5
 800d1f2:	d905      	bls.n	800d200 <_malloc_r+0x28>
 800d1f4:	230c      	movs	r3, #12
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	2600      	movs	r6, #0
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d200:	4e2e      	ldr	r6, [pc, #184]	; (800d2bc <_malloc_r+0xe4>)
 800d202:	f000 f89d 	bl	800d340 <__malloc_lock>
 800d206:	6833      	ldr	r3, [r6, #0]
 800d208:	461c      	mov	r4, r3
 800d20a:	bb34      	cbnz	r4, 800d25a <_malloc_r+0x82>
 800d20c:	4629      	mov	r1, r5
 800d20e:	4638      	mov	r0, r7
 800d210:	f7ff ffc2 	bl	800d198 <sbrk_aligned>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	4604      	mov	r4, r0
 800d218:	d14d      	bne.n	800d2b6 <_malloc_r+0xde>
 800d21a:	6834      	ldr	r4, [r6, #0]
 800d21c:	4626      	mov	r6, r4
 800d21e:	2e00      	cmp	r6, #0
 800d220:	d140      	bne.n	800d2a4 <_malloc_r+0xcc>
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	4631      	mov	r1, r6
 800d226:	4638      	mov	r0, r7
 800d228:	eb04 0803 	add.w	r8, r4, r3
 800d22c:	f000 f878 	bl	800d320 <_sbrk_r>
 800d230:	4580      	cmp	r8, r0
 800d232:	d13a      	bne.n	800d2aa <_malloc_r+0xd2>
 800d234:	6821      	ldr	r1, [r4, #0]
 800d236:	3503      	adds	r5, #3
 800d238:	1a6d      	subs	r5, r5, r1
 800d23a:	f025 0503 	bic.w	r5, r5, #3
 800d23e:	3508      	adds	r5, #8
 800d240:	2d0c      	cmp	r5, #12
 800d242:	bf38      	it	cc
 800d244:	250c      	movcc	r5, #12
 800d246:	4629      	mov	r1, r5
 800d248:	4638      	mov	r0, r7
 800d24a:	f7ff ffa5 	bl	800d198 <sbrk_aligned>
 800d24e:	3001      	adds	r0, #1
 800d250:	d02b      	beq.n	800d2aa <_malloc_r+0xd2>
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	442b      	add	r3, r5
 800d256:	6023      	str	r3, [r4, #0]
 800d258:	e00e      	b.n	800d278 <_malloc_r+0xa0>
 800d25a:	6822      	ldr	r2, [r4, #0]
 800d25c:	1b52      	subs	r2, r2, r5
 800d25e:	d41e      	bmi.n	800d29e <_malloc_r+0xc6>
 800d260:	2a0b      	cmp	r2, #11
 800d262:	d916      	bls.n	800d292 <_malloc_r+0xba>
 800d264:	1961      	adds	r1, r4, r5
 800d266:	42a3      	cmp	r3, r4
 800d268:	6025      	str	r5, [r4, #0]
 800d26a:	bf18      	it	ne
 800d26c:	6059      	strne	r1, [r3, #4]
 800d26e:	6863      	ldr	r3, [r4, #4]
 800d270:	bf08      	it	eq
 800d272:	6031      	streq	r1, [r6, #0]
 800d274:	5162      	str	r2, [r4, r5]
 800d276:	604b      	str	r3, [r1, #4]
 800d278:	4638      	mov	r0, r7
 800d27a:	f104 060b 	add.w	r6, r4, #11
 800d27e:	f000 f865 	bl	800d34c <__malloc_unlock>
 800d282:	f026 0607 	bic.w	r6, r6, #7
 800d286:	1d23      	adds	r3, r4, #4
 800d288:	1af2      	subs	r2, r6, r3
 800d28a:	d0b6      	beq.n	800d1fa <_malloc_r+0x22>
 800d28c:	1b9b      	subs	r3, r3, r6
 800d28e:	50a3      	str	r3, [r4, r2]
 800d290:	e7b3      	b.n	800d1fa <_malloc_r+0x22>
 800d292:	6862      	ldr	r2, [r4, #4]
 800d294:	42a3      	cmp	r3, r4
 800d296:	bf0c      	ite	eq
 800d298:	6032      	streq	r2, [r6, #0]
 800d29a:	605a      	strne	r2, [r3, #4]
 800d29c:	e7ec      	b.n	800d278 <_malloc_r+0xa0>
 800d29e:	4623      	mov	r3, r4
 800d2a0:	6864      	ldr	r4, [r4, #4]
 800d2a2:	e7b2      	b.n	800d20a <_malloc_r+0x32>
 800d2a4:	4634      	mov	r4, r6
 800d2a6:	6876      	ldr	r6, [r6, #4]
 800d2a8:	e7b9      	b.n	800d21e <_malloc_r+0x46>
 800d2aa:	230c      	movs	r3, #12
 800d2ac:	603b      	str	r3, [r7, #0]
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	f000 f84c 	bl	800d34c <__malloc_unlock>
 800d2b4:	e7a1      	b.n	800d1fa <_malloc_r+0x22>
 800d2b6:	6025      	str	r5, [r4, #0]
 800d2b8:	e7de      	b.n	800d278 <_malloc_r+0xa0>
 800d2ba:	bf00      	nop
 800d2bc:	200071ec 	.word	0x200071ec

0800d2c0 <_realloc_r>:
 800d2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c4:	4680      	mov	r8, r0
 800d2c6:	4614      	mov	r4, r2
 800d2c8:	460e      	mov	r6, r1
 800d2ca:	b921      	cbnz	r1, 800d2d6 <_realloc_r+0x16>
 800d2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	f7ff bf81 	b.w	800d1d8 <_malloc_r>
 800d2d6:	b92a      	cbnz	r2, 800d2e4 <_realloc_r+0x24>
 800d2d8:	f7ff ff12 	bl	800d100 <_free_r>
 800d2dc:	4625      	mov	r5, r4
 800d2de:	4628      	mov	r0, r5
 800d2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e4:	f000 f838 	bl	800d358 <_malloc_usable_size_r>
 800d2e8:	4284      	cmp	r4, r0
 800d2ea:	4607      	mov	r7, r0
 800d2ec:	d802      	bhi.n	800d2f4 <_realloc_r+0x34>
 800d2ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d2f2:	d812      	bhi.n	800d31a <_realloc_r+0x5a>
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	f7ff ff6e 	bl	800d1d8 <_malloc_r>
 800d2fc:	4605      	mov	r5, r0
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d0ed      	beq.n	800d2de <_realloc_r+0x1e>
 800d302:	42bc      	cmp	r4, r7
 800d304:	4622      	mov	r2, r4
 800d306:	4631      	mov	r1, r6
 800d308:	bf28      	it	cs
 800d30a:	463a      	movcs	r2, r7
 800d30c:	f7ff fbb8 	bl	800ca80 <memcpy>
 800d310:	4631      	mov	r1, r6
 800d312:	4640      	mov	r0, r8
 800d314:	f7ff fef4 	bl	800d100 <_free_r>
 800d318:	e7e1      	b.n	800d2de <_realloc_r+0x1e>
 800d31a:	4635      	mov	r5, r6
 800d31c:	e7df      	b.n	800d2de <_realloc_r+0x1e>
	...

0800d320 <_sbrk_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4d06      	ldr	r5, [pc, #24]	; (800d33c <_sbrk_r+0x1c>)
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	f7f6 feea 	bl	8004104 <_sbrk>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_sbrk_r+0x1a>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_sbrk_r+0x1a>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	200071f4 	.word	0x200071f4

0800d340 <__malloc_lock>:
 800d340:	4801      	ldr	r0, [pc, #4]	; (800d348 <__malloc_lock+0x8>)
 800d342:	f000 b811 	b.w	800d368 <__retarget_lock_acquire_recursive>
 800d346:	bf00      	nop
 800d348:	200071f8 	.word	0x200071f8

0800d34c <__malloc_unlock>:
 800d34c:	4801      	ldr	r0, [pc, #4]	; (800d354 <__malloc_unlock+0x8>)
 800d34e:	f000 b80c 	b.w	800d36a <__retarget_lock_release_recursive>
 800d352:	bf00      	nop
 800d354:	200071f8 	.word	0x200071f8

0800d358 <_malloc_usable_size_r>:
 800d358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d35c:	1f18      	subs	r0, r3, #4
 800d35e:	2b00      	cmp	r3, #0
 800d360:	bfbc      	itt	lt
 800d362:	580b      	ldrlt	r3, [r1, r0]
 800d364:	18c0      	addlt	r0, r0, r3
 800d366:	4770      	bx	lr

0800d368 <__retarget_lock_acquire_recursive>:
 800d368:	4770      	bx	lr

0800d36a <__retarget_lock_release_recursive>:
 800d36a:	4770      	bx	lr

0800d36c <roundf>:
 800d36c:	ee10 0a10 	vmov	r0, s0
 800d370:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d374:	3a7f      	subs	r2, #127	; 0x7f
 800d376:	2a16      	cmp	r2, #22
 800d378:	dc15      	bgt.n	800d3a6 <roundf+0x3a>
 800d37a:	2a00      	cmp	r2, #0
 800d37c:	da08      	bge.n	800d390 <roundf+0x24>
 800d37e:	3201      	adds	r2, #1
 800d380:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d384:	d101      	bne.n	800d38a <roundf+0x1e>
 800d386:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d38a:	ee00 3a10 	vmov	s0, r3
 800d38e:	4770      	bx	lr
 800d390:	4907      	ldr	r1, [pc, #28]	; (800d3b0 <roundf+0x44>)
 800d392:	4111      	asrs	r1, r2
 800d394:	4208      	tst	r0, r1
 800d396:	d0fa      	beq.n	800d38e <roundf+0x22>
 800d398:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d39c:	4113      	asrs	r3, r2
 800d39e:	4403      	add	r3, r0
 800d3a0:	ea23 0301 	bic.w	r3, r3, r1
 800d3a4:	e7f1      	b.n	800d38a <roundf+0x1e>
 800d3a6:	2a80      	cmp	r2, #128	; 0x80
 800d3a8:	d1f1      	bne.n	800d38e <roundf+0x22>
 800d3aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d3ae:	4770      	bx	lr
 800d3b0:	007fffff 	.word	0x007fffff
 800d3b4:	00000000 	.word	0x00000000

0800d3b8 <log>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	ed2d 8b02 	vpush	{d8}
 800d3be:	ec55 4b10 	vmov	r4, r5, d0
 800d3c2:	f000 f839 	bl	800d438 <__ieee754_log>
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	462b      	mov	r3, r5
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	eeb0 8a40 	vmov.f32	s16, s0
 800d3d2:	eef0 8a60 	vmov.f32	s17, s1
 800d3d6:	f7f3 fba1 	bl	8000b1c <__aeabi_dcmpun>
 800d3da:	b998      	cbnz	r0, 800d404 <log+0x4c>
 800d3dc:	2200      	movs	r2, #0
 800d3de:	2300      	movs	r3, #0
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	f7f3 fb90 	bl	8000b08 <__aeabi_dcmpgt>
 800d3e8:	b960      	cbnz	r0, 800d404 <log+0x4c>
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	f7f3 fb61 	bl	8000ab8 <__aeabi_dcmpeq>
 800d3f6:	b160      	cbz	r0, 800d412 <log+0x5a>
 800d3f8:	f7ff fb18 	bl	800ca2c <__errno>
 800d3fc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800d428 <log+0x70>
 800d400:	2322      	movs	r3, #34	; 0x22
 800d402:	6003      	str	r3, [r0, #0]
 800d404:	eeb0 0a48 	vmov.f32	s0, s16
 800d408:	eef0 0a68 	vmov.f32	s1, s17
 800d40c:	ecbd 8b02 	vpop	{d8}
 800d410:	bd38      	pop	{r3, r4, r5, pc}
 800d412:	f7ff fb0b 	bl	800ca2c <__errno>
 800d416:	ecbd 8b02 	vpop	{d8}
 800d41a:	2321      	movs	r3, #33	; 0x21
 800d41c:	6003      	str	r3, [r0, #0]
 800d41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d422:	4803      	ldr	r0, [pc, #12]	; (800d430 <log+0x78>)
 800d424:	f000 b9c4 	b.w	800d7b0 <nan>
 800d428:	00000000 	.word	0x00000000
 800d42c:	fff00000 	.word	0xfff00000
 800d430:	0800e3ad 	.word	0x0800e3ad
 800d434:	00000000 	.word	0x00000000

0800d438 <__ieee754_log>:
 800d438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43c:	ec51 0b10 	vmov	r0, r1, d0
 800d440:	ed2d 8b04 	vpush	{d8-d9}
 800d444:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d448:	b083      	sub	sp, #12
 800d44a:	460d      	mov	r5, r1
 800d44c:	da29      	bge.n	800d4a2 <__ieee754_log+0x6a>
 800d44e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d452:	4303      	orrs	r3, r0
 800d454:	ee10 2a10 	vmov	r2, s0
 800d458:	d10c      	bne.n	800d474 <__ieee754_log+0x3c>
 800d45a:	49cf      	ldr	r1, [pc, #828]	; (800d798 <__ieee754_log+0x360>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	2300      	movs	r3, #0
 800d460:	2000      	movs	r0, #0
 800d462:	f7f3 f9eb 	bl	800083c <__aeabi_ddiv>
 800d466:	ec41 0b10 	vmov	d0, r0, r1
 800d46a:	b003      	add	sp, #12
 800d46c:	ecbd 8b04 	vpop	{d8-d9}
 800d470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d474:	2900      	cmp	r1, #0
 800d476:	da05      	bge.n	800d484 <__ieee754_log+0x4c>
 800d478:	460b      	mov	r3, r1
 800d47a:	f7f2 fefd 	bl	8000278 <__aeabi_dsub>
 800d47e:	2200      	movs	r2, #0
 800d480:	2300      	movs	r3, #0
 800d482:	e7ee      	b.n	800d462 <__ieee754_log+0x2a>
 800d484:	4bc5      	ldr	r3, [pc, #788]	; (800d79c <__ieee754_log+0x364>)
 800d486:	2200      	movs	r2, #0
 800d488:	f7f3 f8ae 	bl	80005e8 <__aeabi_dmul>
 800d48c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800d490:	460d      	mov	r5, r1
 800d492:	4ac3      	ldr	r2, [pc, #780]	; (800d7a0 <__ieee754_log+0x368>)
 800d494:	4295      	cmp	r5, r2
 800d496:	dd06      	ble.n	800d4a6 <__ieee754_log+0x6e>
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	f7f2 feee 	bl	800027c <__adddf3>
 800d4a0:	e7e1      	b.n	800d466 <__ieee754_log+0x2e>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e7f5      	b.n	800d492 <__ieee754_log+0x5a>
 800d4a6:	152c      	asrs	r4, r5, #20
 800d4a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d4ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d4b0:	441c      	add	r4, r3
 800d4b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800d4b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d4ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800d4c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800d4c6:	ea42 0105 	orr.w	r1, r2, r5
 800d4ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	4bb4      	ldr	r3, [pc, #720]	; (800d7a4 <__ieee754_log+0x36c>)
 800d4d2:	f7f2 fed1 	bl	8000278 <__aeabi_dsub>
 800d4d6:	1cab      	adds	r3, r5, #2
 800d4d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4dc:	2b02      	cmp	r3, #2
 800d4de:	4682      	mov	sl, r0
 800d4e0:	468b      	mov	fp, r1
 800d4e2:	f04f 0200 	mov.w	r2, #0
 800d4e6:	dc53      	bgt.n	800d590 <__ieee754_log+0x158>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	f7f3 fae5 	bl	8000ab8 <__aeabi_dcmpeq>
 800d4ee:	b1d0      	cbz	r0, 800d526 <__ieee754_log+0xee>
 800d4f0:	2c00      	cmp	r4, #0
 800d4f2:	f000 8122 	beq.w	800d73a <__ieee754_log+0x302>
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f7f3 f80c 	bl	8000514 <__aeabi_i2d>
 800d4fc:	a390      	add	r3, pc, #576	; (adr r3, 800d740 <__ieee754_log+0x308>)
 800d4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d502:	4606      	mov	r6, r0
 800d504:	460f      	mov	r7, r1
 800d506:	f7f3 f86f 	bl	80005e8 <__aeabi_dmul>
 800d50a:	a38f      	add	r3, pc, #572	; (adr r3, 800d748 <__ieee754_log+0x310>)
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	4604      	mov	r4, r0
 800d512:	460d      	mov	r5, r1
 800d514:	4630      	mov	r0, r6
 800d516:	4639      	mov	r1, r7
 800d518:	f7f3 f866 	bl	80005e8 <__aeabi_dmul>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	4620      	mov	r0, r4
 800d522:	4629      	mov	r1, r5
 800d524:	e7ba      	b.n	800d49c <__ieee754_log+0x64>
 800d526:	a38a      	add	r3, pc, #552	; (adr r3, 800d750 <__ieee754_log+0x318>)
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	4650      	mov	r0, sl
 800d52e:	4659      	mov	r1, fp
 800d530:	f7f3 f85a 	bl	80005e8 <__aeabi_dmul>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	2000      	movs	r0, #0
 800d53a:	499b      	ldr	r1, [pc, #620]	; (800d7a8 <__ieee754_log+0x370>)
 800d53c:	f7f2 fe9c 	bl	8000278 <__aeabi_dsub>
 800d540:	4652      	mov	r2, sl
 800d542:	4606      	mov	r6, r0
 800d544:	460f      	mov	r7, r1
 800d546:	465b      	mov	r3, fp
 800d548:	4650      	mov	r0, sl
 800d54a:	4659      	mov	r1, fp
 800d54c:	f7f3 f84c 	bl	80005e8 <__aeabi_dmul>
 800d550:	4602      	mov	r2, r0
 800d552:	460b      	mov	r3, r1
 800d554:	4630      	mov	r0, r6
 800d556:	4639      	mov	r1, r7
 800d558:	f7f3 f846 	bl	80005e8 <__aeabi_dmul>
 800d55c:	4606      	mov	r6, r0
 800d55e:	460f      	mov	r7, r1
 800d560:	b914      	cbnz	r4, 800d568 <__ieee754_log+0x130>
 800d562:	4632      	mov	r2, r6
 800d564:	463b      	mov	r3, r7
 800d566:	e0a2      	b.n	800d6ae <__ieee754_log+0x276>
 800d568:	4620      	mov	r0, r4
 800d56a:	f7f2 ffd3 	bl	8000514 <__aeabi_i2d>
 800d56e:	a374      	add	r3, pc, #464	; (adr r3, 800d740 <__ieee754_log+0x308>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	4680      	mov	r8, r0
 800d576:	4689      	mov	r9, r1
 800d578:	f7f3 f836 	bl	80005e8 <__aeabi_dmul>
 800d57c:	a372      	add	r3, pc, #456	; (adr r3, 800d748 <__ieee754_log+0x310>)
 800d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d582:	4604      	mov	r4, r0
 800d584:	460d      	mov	r5, r1
 800d586:	4640      	mov	r0, r8
 800d588:	4649      	mov	r1, r9
 800d58a:	f7f3 f82d 	bl	80005e8 <__aeabi_dmul>
 800d58e:	e0a7      	b.n	800d6e0 <__ieee754_log+0x2a8>
 800d590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d594:	f7f2 fe72 	bl	800027c <__adddf3>
 800d598:	4602      	mov	r2, r0
 800d59a:	460b      	mov	r3, r1
 800d59c:	4650      	mov	r0, sl
 800d59e:	4659      	mov	r1, fp
 800d5a0:	f7f3 f94c 	bl	800083c <__aeabi_ddiv>
 800d5a4:	ec41 0b18 	vmov	d8, r0, r1
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f7f2 ffb3 	bl	8000514 <__aeabi_i2d>
 800d5ae:	ec53 2b18 	vmov	r2, r3, d8
 800d5b2:	ec41 0b19 	vmov	d9, r0, r1
 800d5b6:	ec51 0b18 	vmov	r0, r1, d8
 800d5ba:	f7f3 f815 	bl	80005e8 <__aeabi_dmul>
 800d5be:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d5c2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d5c6:	9301      	str	r3, [sp, #4]
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4680      	mov	r8, r0
 800d5ce:	4689      	mov	r9, r1
 800d5d0:	f7f3 f80a 	bl	80005e8 <__aeabi_dmul>
 800d5d4:	a360      	add	r3, pc, #384	; (adr r3, 800d758 <__ieee754_log+0x320>)
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	4606      	mov	r6, r0
 800d5dc:	460f      	mov	r7, r1
 800d5de:	f7f3 f803 	bl	80005e8 <__aeabi_dmul>
 800d5e2:	a35f      	add	r3, pc, #380	; (adr r3, 800d760 <__ieee754_log+0x328>)
 800d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e8:	f7f2 fe48 	bl	800027c <__adddf3>
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	463b      	mov	r3, r7
 800d5f0:	f7f2 fffa 	bl	80005e8 <__aeabi_dmul>
 800d5f4:	a35c      	add	r3, pc, #368	; (adr r3, 800d768 <__ieee754_log+0x330>)
 800d5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fa:	f7f2 fe3f 	bl	800027c <__adddf3>
 800d5fe:	4632      	mov	r2, r6
 800d600:	463b      	mov	r3, r7
 800d602:	f7f2 fff1 	bl	80005e8 <__aeabi_dmul>
 800d606:	a35a      	add	r3, pc, #360	; (adr r3, 800d770 <__ieee754_log+0x338>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	f7f2 fe36 	bl	800027c <__adddf3>
 800d610:	4642      	mov	r2, r8
 800d612:	464b      	mov	r3, r9
 800d614:	f7f2 ffe8 	bl	80005e8 <__aeabi_dmul>
 800d618:	a357      	add	r3, pc, #348	; (adr r3, 800d778 <__ieee754_log+0x340>)
 800d61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61e:	4680      	mov	r8, r0
 800d620:	4689      	mov	r9, r1
 800d622:	4630      	mov	r0, r6
 800d624:	4639      	mov	r1, r7
 800d626:	f7f2 ffdf 	bl	80005e8 <__aeabi_dmul>
 800d62a:	a355      	add	r3, pc, #340	; (adr r3, 800d780 <__ieee754_log+0x348>)
 800d62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d630:	f7f2 fe24 	bl	800027c <__adddf3>
 800d634:	4632      	mov	r2, r6
 800d636:	463b      	mov	r3, r7
 800d638:	f7f2 ffd6 	bl	80005e8 <__aeabi_dmul>
 800d63c:	a352      	add	r3, pc, #328	; (adr r3, 800d788 <__ieee754_log+0x350>)
 800d63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d642:	f7f2 fe1b 	bl	800027c <__adddf3>
 800d646:	4632      	mov	r2, r6
 800d648:	463b      	mov	r3, r7
 800d64a:	f7f2 ffcd 	bl	80005e8 <__aeabi_dmul>
 800d64e:	460b      	mov	r3, r1
 800d650:	4602      	mov	r2, r0
 800d652:	4649      	mov	r1, r9
 800d654:	4640      	mov	r0, r8
 800d656:	f7f2 fe11 	bl	800027c <__adddf3>
 800d65a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d65e:	9b01      	ldr	r3, [sp, #4]
 800d660:	3551      	adds	r5, #81	; 0x51
 800d662:	431d      	orrs	r5, r3
 800d664:	2d00      	cmp	r5, #0
 800d666:	4680      	mov	r8, r0
 800d668:	4689      	mov	r9, r1
 800d66a:	dd48      	ble.n	800d6fe <__ieee754_log+0x2c6>
 800d66c:	4b4e      	ldr	r3, [pc, #312]	; (800d7a8 <__ieee754_log+0x370>)
 800d66e:	2200      	movs	r2, #0
 800d670:	4650      	mov	r0, sl
 800d672:	4659      	mov	r1, fp
 800d674:	f7f2 ffb8 	bl	80005e8 <__aeabi_dmul>
 800d678:	4652      	mov	r2, sl
 800d67a:	465b      	mov	r3, fp
 800d67c:	f7f2 ffb4 	bl	80005e8 <__aeabi_dmul>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	4606      	mov	r6, r0
 800d686:	460f      	mov	r7, r1
 800d688:	4640      	mov	r0, r8
 800d68a:	4649      	mov	r1, r9
 800d68c:	f7f2 fdf6 	bl	800027c <__adddf3>
 800d690:	ec53 2b18 	vmov	r2, r3, d8
 800d694:	f7f2 ffa8 	bl	80005e8 <__aeabi_dmul>
 800d698:	4680      	mov	r8, r0
 800d69a:	4689      	mov	r9, r1
 800d69c:	b964      	cbnz	r4, 800d6b8 <__ieee754_log+0x280>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	f7f2 fde7 	bl	8000278 <__aeabi_dsub>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4650      	mov	r0, sl
 800d6b0:	4659      	mov	r1, fp
 800d6b2:	f7f2 fde1 	bl	8000278 <__aeabi_dsub>
 800d6b6:	e6d6      	b.n	800d466 <__ieee754_log+0x2e>
 800d6b8:	a321      	add	r3, pc, #132	; (adr r3, 800d740 <__ieee754_log+0x308>)
 800d6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6be:	ec51 0b19 	vmov	r0, r1, d9
 800d6c2:	f7f2 ff91 	bl	80005e8 <__aeabi_dmul>
 800d6c6:	a320      	add	r3, pc, #128	; (adr r3, 800d748 <__ieee754_log+0x310>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	460d      	mov	r5, r1
 800d6d0:	ec51 0b19 	vmov	r0, r1, d9
 800d6d4:	f7f2 ff88 	bl	80005e8 <__aeabi_dmul>
 800d6d8:	4642      	mov	r2, r8
 800d6da:	464b      	mov	r3, r9
 800d6dc:	f7f2 fdce 	bl	800027c <__adddf3>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	f7f2 fdc6 	bl	8000278 <__aeabi_dsub>
 800d6ec:	4652      	mov	r2, sl
 800d6ee:	465b      	mov	r3, fp
 800d6f0:	f7f2 fdc2 	bl	8000278 <__aeabi_dsub>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	e7d9      	b.n	800d6b2 <__ieee754_log+0x27a>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	4650      	mov	r0, sl
 800d704:	4659      	mov	r1, fp
 800d706:	f7f2 fdb7 	bl	8000278 <__aeabi_dsub>
 800d70a:	ec53 2b18 	vmov	r2, r3, d8
 800d70e:	f7f2 ff6b 	bl	80005e8 <__aeabi_dmul>
 800d712:	4606      	mov	r6, r0
 800d714:	460f      	mov	r7, r1
 800d716:	2c00      	cmp	r4, #0
 800d718:	f43f af23 	beq.w	800d562 <__ieee754_log+0x12a>
 800d71c:	a308      	add	r3, pc, #32	; (adr r3, 800d740 <__ieee754_log+0x308>)
 800d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d722:	ec51 0b19 	vmov	r0, r1, d9
 800d726:	f7f2 ff5f 	bl	80005e8 <__aeabi_dmul>
 800d72a:	a307      	add	r3, pc, #28	; (adr r3, 800d748 <__ieee754_log+0x310>)
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	4604      	mov	r4, r0
 800d732:	460d      	mov	r5, r1
 800d734:	ec51 0b19 	vmov	r0, r1, d9
 800d738:	e727      	b.n	800d58a <__ieee754_log+0x152>
 800d73a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d790 <__ieee754_log+0x358>
 800d73e:	e694      	b.n	800d46a <__ieee754_log+0x32>
 800d740:	fee00000 	.word	0xfee00000
 800d744:	3fe62e42 	.word	0x3fe62e42
 800d748:	35793c76 	.word	0x35793c76
 800d74c:	3dea39ef 	.word	0x3dea39ef
 800d750:	55555555 	.word	0x55555555
 800d754:	3fd55555 	.word	0x3fd55555
 800d758:	df3e5244 	.word	0xdf3e5244
 800d75c:	3fc2f112 	.word	0x3fc2f112
 800d760:	96cb03de 	.word	0x96cb03de
 800d764:	3fc74664 	.word	0x3fc74664
 800d768:	94229359 	.word	0x94229359
 800d76c:	3fd24924 	.word	0x3fd24924
 800d770:	55555593 	.word	0x55555593
 800d774:	3fe55555 	.word	0x3fe55555
 800d778:	d078c69f 	.word	0xd078c69f
 800d77c:	3fc39a09 	.word	0x3fc39a09
 800d780:	1d8e78af 	.word	0x1d8e78af
 800d784:	3fcc71c5 	.word	0x3fcc71c5
 800d788:	9997fa04 	.word	0x9997fa04
 800d78c:	3fd99999 	.word	0x3fd99999
	...
 800d798:	c3500000 	.word	0xc3500000
 800d79c:	43500000 	.word	0x43500000
 800d7a0:	7fefffff 	.word	0x7fefffff
 800d7a4:	3ff00000 	.word	0x3ff00000
 800d7a8:	3fe00000 	.word	0x3fe00000
 800d7ac:	00000000 	.word	0x00000000

0800d7b0 <nan>:
 800d7b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d7b8 <nan+0x8>
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	00000000 	.word	0x00000000
 800d7bc:	7ff80000 	.word	0x7ff80000

0800d7c0 <_init>:
 800d7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c2:	bf00      	nop
 800d7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7c6:	bc08      	pop	{r3}
 800d7c8:	469e      	mov	lr, r3
 800d7ca:	4770      	bx	lr

0800d7cc <_fini>:
 800d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ce:	bf00      	nop
 800d7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7d2:	bc08      	pop	{r3}
 800d7d4:	469e      	mov	lr, r3
 800d7d6:	4770      	bx	lr
