
MDP_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f278  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f94  0800f408  0800f408  0001f408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801039c  0801039c  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801039c  0801039c  0002039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103a4  080103a4  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103a4  080103a4  000203a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103a8  080103a8  000203a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080103ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f0  2**0
                  CONTENTS
 10 .bss          0000517c  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000536c  2000536c  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef9e  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dac  00000000  00000000  0004f1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b30  00000000  00000000  00052f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019e0  00000000  00000000  00054aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000557b  00000000  00000000  00056480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e005  00000000  00000000  0005b9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e659e  00000000  00000000  00079a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ff9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000865c  00000000  00000000  0015fff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f3f0 	.word	0x0800f3f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800f3f0 	.word	0x0800f3f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <motorStop>:
int ir1_dist;
uint8_t us_dist = 0;
uint8_t us_dist_obst = 0;
int travel = 0;

void motorStop(){
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

	motorOnA = 0;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <motorStop+0x1c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
	motorOnB = 0;
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <motorStop+0x20>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]

}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200004f0 	.word	0x200004f0
 8000fac:	200004f4 	.word	0x200004f4

08000fb0 <motorAForward>:
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
}



void motorAForward(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <motorAForward+0x1c>)
 8000fba:	f003 fe5d 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <motorAForward+0x1c>)
 8000fc4:	f003 fe58 	bl	8004c78 <HAL_GPIO_WritePin>


}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <motorAReverse>:
void motorAReverse(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <motorAReverse+0x1c>)
 8000fda:	f003 fe4d 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4802      	ldr	r0, [pc, #8]	; (8000fec <motorAReverse+0x1c>)
 8000fe4:	f003 fe48 	bl	8004c78 <HAL_GPIO_WritePin>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40020000 	.word	0x40020000

08000ff0 <motorBForward>:
void motorBForward(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <motorBForward+0x1c>)
 8000ffa:	f003 fe3d 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2110      	movs	r1, #16
 8001002:	4802      	ldr	r0, [pc, #8]	; (800100c <motorBForward+0x1c>)
 8001004:	f003 fe38 	bl	8004c78 <HAL_GPIO_WritePin>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020000 	.word	0x40020000

08001010 <motorBReverse>:
void motorBReverse(){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	2120      	movs	r1, #32
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <motorBReverse+0x1c>)
 800101a:	f003 fe2d 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2110      	movs	r1, #16
 8001022:	4802      	ldr	r0, [pc, #8]	; (800102c <motorBReverse+0x1c>)
 8001024:	f003 fe28 	bl	8004c78 <HAL_GPIO_WritePin>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020000 	.word	0x40020000

08001030 <readByte>:
//
//
//}


void readByte(uint8_t addr, uint8_t* data){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af02      	add	r7, sp, #8
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <readByte+0x4c>)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr<<1, buff, 1, 10);
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <readByte+0x50>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	b299      	uxth	r1, r3
 800104c:	230a      	movs	r3, #10
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <readByte+0x4c>)
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <readByte+0x54>)
 8001056:	f003 ff6d 	bl	8004f34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr<<1, data, 2, 20);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <readByte+0x50>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	b299      	uxth	r1, r3
 8001064:	2314      	movs	r3, #20
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2302      	movs	r3, #2
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <readByte+0x54>)
 800106e:	f004 f85f 	bl	8005130 <HAL_I2C_Master_Receive>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200004dc 	.word	0x200004dc
 8001080:	20000004 	.word	0x20000004
 8001084:	200002b4 	.word	0x200002b4

08001088 <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <writeByte+0x3c>)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <writeByte+0x3c>)
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <writeByte+0x40>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b299      	uxth	r1, r3
 80010ae:	2314      	movs	r3, #20
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2302      	movs	r3, #2
 80010b4:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <writeByte+0x3c>)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <writeByte+0x44>)
 80010b8:	f003 ff3c 	bl	8004f34 <HAL_I2C_Master_Transmit>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200004dc 	.word	0x200004dc
 80010c8:	20000004 	.word	0x20000004
 80010cc:	200002b4 	.word	0x200002b4

080010d0 <gyroInit>:


}


void gyroInit(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 80010d4:	2100      	movs	r1, #0
 80010d6:	2006      	movs	r0, #6
 80010d8:	f7ff ffd6 	bl	8001088 <writeByte>
		osDelayUntil(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f008 f914 	bl	800930a <osDelayUntil>
		writeByte(0x03, 0x80);
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	2003      	movs	r0, #3
 80010e6:	f7ff ffcf 	bl	8001088 <writeByte>
		osDelayUntil(10);
 80010ea:	200a      	movs	r0, #10
 80010ec:	f008 f90d 	bl	800930a <osDelayUntil>
		writeByte(0x07, 0x07);
 80010f0:	2107      	movs	r1, #7
 80010f2:	2007      	movs	r0, #7
 80010f4:	f7ff ffc8 	bl	8001088 <writeByte>
		osDelayUntil(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f008 f906 	bl	800930a <osDelayUntil>
		writeByte(0x06, 0x01);
 80010fe:	2101      	movs	r1, #1
 8001100:	2006      	movs	r0, #6
 8001102:	f7ff ffc1 	bl	8001088 <writeByte>
		osDelayUntil(10);
 8001106:	200a      	movs	r0, #10
 8001108:	f008 f8ff 	bl	800930a <osDelayUntil>
		writeByte(0x7F, 0x20);
 800110c:	2120      	movs	r1, #32
 800110e:	207f      	movs	r0, #127	; 0x7f
 8001110:	f7ff ffba 	bl	8001088 <writeByte>
		osDelayUntil(10);
 8001114:	200a      	movs	r0, #10
 8001116:	f008 f8f8 	bl	800930a <osDelayUntil>
		writeByte(0x01, 0x2F);
 800111a:	212f      	movs	r1, #47	; 0x2f
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ffb3 	bl	8001088 <writeByte>
		osDelayUntil(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f008 f8f1 	bl	800930a <osDelayUntil>
		writeByte(0x0, 0x00);
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ffac 	bl	8001088 <writeByte>
		osDelayUntil(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f008 f8ea 	bl	800930a <osDelayUntil>
		writeByte(0x7F, 0x00);
 8001136:	2100      	movs	r1, #0
 8001138:	207f      	movs	r0, #127	; 0x7f
 800113a:	f7ff ffa5 	bl	8001088 <writeByte>
		osDelayUntil(10);
 800113e:	200a      	movs	r0, #10
 8001140:	f008 f8e3 	bl	800930a <osDelayUntil>
		writeByte(0x07, 0x00);
 8001144:	2100      	movs	r1, #0
 8001146:	2007      	movs	r0, #7
 8001148:	f7ff ff9e 	bl	8001088 <writeByte>
		osDelayUntil(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f008 f8dc 	bl	800930a <osDelayUntil>

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <motorForwardA>:





void motorForwardA(int target_distance, int condition){
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]

	// WITH IR STOPPING CONDITION

	dir = 1;
 8001162:	4b67      	ldr	r3, [pc, #412]	; (8001300 <motorForwardA+0x1a8>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
	htim1.Instance -> CCR4 = 148;
 8001168:	4b66      	ldr	r3, [pc, #408]	; (8001304 <motorForwardA+0x1ac>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2294      	movs	r2, #148	; 0x94
 800116e:	641a      	str	r2, [r3, #64]	; 0x40

	double encoder_count = 1560.0;
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b64      	ldr	r3, [pc, #400]	; (8001308 <motorForwardA+0x1b0>)
 8001176:	e9c7 2302 	strd	r2, r3, [r7, #8]

    total_angle = 0;
 800117a:	4964      	ldr	r1, [pc, #400]	; (800130c <motorForwardA+0x1b4>)
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c1 2300 	strd	r2, r3, [r1]
    if (target_distance==101)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b65      	cmp	r3, #101	; 0x65
 800118c:	d10c      	bne.n	80011a8 <motorForwardA+0x50>
    {
    	motorOnA = 4000*dir;
 800118e:	4b5c      	ldr	r3, [pc, #368]	; (8001300 <motorForwardA+0x1a8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	4a5d      	ldr	r2, [pc, #372]	; (8001310 <motorForwardA+0x1b8>)
 800119c:	6013      	str	r3, [r2, #0]
    	motorOnB = motorOnA;
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <motorForwardA+0x1b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a5c      	ldr	r2, [pc, #368]	; (8001314 <motorForwardA+0x1bc>)
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e00b      	b.n	80011c0 <motorForwardA+0x68>
    }
    else{
    	motorOnA = SPEED*dir;
 80011a8:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <motorForwardA+0x1c0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a54      	ldr	r2, [pc, #336]	; (8001300 <motorForwardA+0x1a8>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	4a56      	ldr	r2, [pc, #344]	; (8001310 <motorForwardA+0x1b8>)
 80011b6:	6013      	str	r3, [r2, #0]
    	motorOnB = motorOnA;
 80011b8:	4b55      	ldr	r3, [pc, #340]	; (8001310 <motorForwardA+0x1b8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a55      	ldr	r2, [pc, #340]	; (8001314 <motorForwardA+0x1bc>)
 80011be:	6013      	str	r3, [r2, #0]
				htim1.Instance -> CCR4 = pidVal;
				osDelayUntil(10);
				Aint += total_angle;*/


				if(((total_distancea+total_distanceb)) >= 2*((target_distance)/21.04f)*encoder_count || (us_dist < 32 || ir1_dist < 20)){
 80011c0:	4b56      	ldr	r3, [pc, #344]	; (800131c <motorForwardA+0x1c4>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b56      	ldr	r3, [pc, #344]	; (8001320 <motorForwardA+0x1c8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9aa 	bl	8000524 <__aeabi_i2d>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011de:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001324 <motorForwardA+0x1cc>
 80011e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ea:	ee17 0a90 	vmov	r0, s15
 80011ee:	f7ff f9ab 	bl	8000548 <__aeabi_f2d>
 80011f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011f6:	f7ff f9ff 	bl	80005f8 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4620      	mov	r0, r4
 8001200:	4629      	mov	r1, r5
 8001202:	f7ff fc7f 	bl	8000b04 <__aeabi_dcmpge>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <motorForwardA+0xc4>
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <motorForwardA+0x1d0>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b1f      	cmp	r3, #31
 8001212:	d903      	bls.n	800121c <motorForwardA+0xc4>
 8001214:	4b45      	ldr	r3, [pc, #276]	; (800132c <motorForwardA+0x1d4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b13      	cmp	r3, #19
 800121a:	dcd1      	bgt.n	80011c0 <motorForwardA+0x68>
					motorStop();
 800121c:	f7ff feb6 	bl	8000f8c <motorStop>
					if (condition==1){
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d154      	bne.n	80012d0 <motorForwardA+0x178>
						travel = 2*((target_distance)/21.04f)*encoder_count - ((total_distancea+total_distanceb));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001230:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001324 <motorForwardA+0x1cc>
 8001234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001238:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800123c:	ee17 0a90 	vmov	r0, s15
 8001240:	f7ff f982 	bl	8000548 <__aeabi_f2d>
 8001244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001248:	f7ff f9d6 	bl	80005f8 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4614      	mov	r4, r2
 8001252:	461d      	mov	r5, r3
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <motorForwardA+0x1c4>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <motorForwardA+0x1c8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f960 	bl	8000524 <__aeabi_i2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f80c 	bl	8000288 <__aeabi_dsub>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fc6e 	bl	8000b58 <__aeabi_d2iz>
 800127c:	4603      	mov	r3, r0
 800127e:	4a2c      	ldr	r2, [pc, #176]	; (8001330 <motorForwardA+0x1d8>)
 8001280:	6013      	str	r3, [r2, #0]
						travel = target_distance - ((travel/3120.0)*21.04);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff f94e 	bl	8000524 <__aeabi_i2d>
 8001288:	4604      	mov	r4, r0
 800128a:	460d      	mov	r5, r1
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <motorForwardA+0x1d8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f947 	bl	8000524 <__aeabi_i2d>
 8001296:	a316      	add	r3, pc, #88	; (adr r3, 80012f0 <motorForwardA+0x198>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fad6 	bl	800084c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	a313      	add	r3, pc, #76	; (adr r3, 80012f8 <motorForwardA+0x1a0>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f9a3 	bl	80005f8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7fe ffe5 	bl	8000288 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc47 	bl	8000b58 <__aeabi_d2iz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a18      	ldr	r2, [pc, #96]	; (8001330 <motorForwardA+0x1d8>)
 80012ce:	6013      	str	r3, [r2, #0]
					}
					break;
 80012d0:	bf00      	nop
									motorOnB = -1000*dir;
									osDelayUntil(10);
				}
				motorStop();
				*/
			total_distancea = 0;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <motorForwardA+0x1c4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
			total_distanceb = 0;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <motorForwardA+0x1c8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
			htim1.Instance -> CCR4 = 150;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <motorForwardA+0x1ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2296      	movs	r2, #150	; 0x96
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40a86000 	.word	0x40a86000
 80012f8:	70a3d70a 	.word	0x70a3d70a
 80012fc:	40350a3d 	.word	0x40350a3d
 8001300:	20000000 	.word	0x20000000
 8001304:	20000308 	.word	0x20000308
 8001308:	40986000 	.word	0x40986000
 800130c:	20000580 	.word	0x20000580
 8001310:	200004f0 	.word	0x200004f0
 8001314:	200004f4 	.word	0x200004f4
 8001318:	20000008 	.word	0x20000008
 800131c:	20000574 	.word	0x20000574
 8001320:	20000578 	.word	0x20000578
 8001324:	41a851ec 	.word	0x41a851ec
 8001328:	2000059c 	.word	0x2000059c
 800132c:	20000598 	.word	0x20000598
 8001330:	200005a0 	.word	0x200005a0
 8001334:	00000000 	.word	0x00000000

08001338 <motorForwardB>:


void motorForwardB(int target_distance, int dirA){
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]

	// NO IR STOPPING CONDITION

	dir = dirA;
 8001342:	4a87      	ldr	r2, [pc, #540]	; (8001560 <motorForwardB+0x228>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6013      	str	r3, [r2, #0]
	htim1.Instance -> CCR4 = 150;
 8001348:	4b86      	ldr	r3, [pc, #536]	; (8001564 <motorForwardB+0x22c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2296      	movs	r2, #150	; 0x96
 800134e:	641a      	str	r2, [r3, #64]	; 0x40

	double encoder_count = 0;
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if(dir == 1){
 800135c:	4b80      	ldr	r3, [pc, #512]	; (8001560 <motorForwardB+0x228>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d105      	bne.n	8001370 <motorForwardB+0x38>
		encoder_count = 1560.0;
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b7f      	ldr	r3, [pc, #508]	; (8001568 <motorForwardB+0x230>)
 800136a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800136e:	e009      	b.n	8001384 <motorForwardB+0x4c>
	} else if(dir == -1) {
 8001370:	4b7b      	ldr	r3, [pc, #492]	; (8001560 <motorForwardB+0x228>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d104      	bne.n	8001384 <motorForwardB+0x4c>
		encoder_count = 1560.0;
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b7a      	ldr	r3, [pc, #488]	; (8001568 <motorForwardB+0x230>)
 8001380:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}


    int pidVal;

    total_angle = 0;
 8001384:	4979      	ldr	r1, [pc, #484]	; (800156c <motorForwardB+0x234>)
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	e9c1 2300 	strd	r2, r3, [r1]
    double Aint = 0;
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if (target_distance==21){
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b15      	cmp	r3, #21
 80013a2:	d10c      	bne.n	80013be <motorForwardB+0x86>
    	motorOnA = 1500*dir;
 80013a4:	4b6e      	ldr	r3, [pc, #440]	; (8001560 <motorForwardB+0x228>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	4a6f      	ldr	r2, [pc, #444]	; (8001570 <motorForwardB+0x238>)
 80013b2:	6013      	str	r3, [r2, #0]
    	motorOnB = motorOnA;
 80013b4:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <motorForwardB+0x238>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a6e      	ldr	r2, [pc, #440]	; (8001574 <motorForwardB+0x23c>)
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e00d      	b.n	80013da <motorForwardB+0xa2>
    }
    else{
    	motorOnA = (SPEED + 500)*dir;
 80013be:	4b6e      	ldr	r3, [pc, #440]	; (8001578 <motorForwardB+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80013c6:	4a66      	ldr	r2, [pc, #408]	; (8001560 <motorForwardB+0x228>)
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	4a68      	ldr	r2, [pc, #416]	; (8001570 <motorForwardB+0x238>)
 80013d0:	6013      	str	r3, [r2, #0]
    	motorOnB = motorOnA;
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <motorForwardB+0x238>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a67      	ldr	r2, [pc, #412]	; (8001574 <motorForwardB+0x23c>)
 80013d8:	6013      	str	r3, [r2, #0]
    }


				while(1){
				osDelayUntil(10);
 80013da:	200a      	movs	r0, #10
 80013dc:	f007 ff95 	bl	800930a <osDelayUntil>
				if(dirA == 1){
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d12b      	bne.n	800143e <motorForwardB+0x106>
				pidVal = (int)(150 + (total_angle*10 + 0.00*Aint));
 80013e6:	4b61      	ldr	r3, [pc, #388]	; (800156c <motorForwardB+0x234>)
 80013e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b62      	ldr	r3, [pc, #392]	; (800157c <motorForwardB+0x244>)
 80013f2:	f7ff f901 	bl	80005f8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4614      	mov	r4, r2
 80013fc:	461d      	mov	r5, r3
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800140a:	f7ff f8f5 	bl	80005f8 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7fe ff39 	bl	800028c <__adddf3>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	a34d      	add	r3, pc, #308	; (adr r3, 8001558 <motorForwardB+0x220>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7fe ff30 	bl	800028c <__adddf3>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb90 	bl	8000b58 <__aeabi_d2iz>
 8001438:	4603      	mov	r3, r0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e02c      	b.n	8001498 <motorForwardB+0x160>


				} else if(dirA == -1) {
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d128      	bne.n	8001498 <motorForwardB+0x160>
					pidVal = (int)(150 - (total_angle*10 + 0.00*Aint));
 8001446:	4b49      	ldr	r3, [pc, #292]	; (800156c <motorForwardB+0x234>)
 8001448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	4b4a      	ldr	r3, [pc, #296]	; (800157c <motorForwardB+0x244>)
 8001452:	f7ff f8d1 	bl	80005f8 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4614      	mov	r4, r2
 800145c:	461d      	mov	r5, r3
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800146a:	f7ff f8c5 	bl	80005f8 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7fe ff09 	bl	800028c <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	a136      	add	r1, pc, #216	; (adr r1, 8001558 <motorForwardB+0x220>)
 8001480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001484:	f7fe ff00 	bl	8000288 <__aeabi_dsub>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb62 	bl	8000b58 <__aeabi_d2iz>
 8001494:	4603      	mov	r3, r0
 8001496:	617b      	str	r3, [r7, #20]

				}
				if(pidVal <= 140){
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b8c      	cmp	r3, #140	; 0x8c
 800149c:	dc01      	bgt.n	80014a2 <motorForwardB+0x16a>
					pidVal = 140;
 800149e:	238c      	movs	r3, #140	; 0x8c
 80014a0:	617b      	str	r3, [r7, #20]
				}

				if(pidVal >= 165){
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2ba4      	cmp	r3, #164	; 0xa4
 80014a6:	dd01      	ble.n	80014ac <motorForwardB+0x174>
					pidVal = 165;
 80014a8:	23a5      	movs	r3, #165	; 0xa5
 80014aa:	617b      	str	r3, [r7, #20]
				}
				htim1.Instance -> CCR4 = 150;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <motorForwardB+0x22c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2296      	movs	r2, #150	; 0x96
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
				osDelayUntil(10);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f007 ff28 	bl	800930a <osDelayUntil>
				htim1.Instance -> CCR4 = pidVal;
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <motorForwardB+0x22c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
				osDelayUntil(10);
 80014c2:	200a      	movs	r0, #10
 80014c4:	f007 ff21 	bl	800930a <osDelayUntil>
				Aint += total_angle;
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <motorForwardB+0x234>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014d2:	f7fe fedb 	bl	800028c <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	e9c7 2302 	strd	r2, r3, [r7, #8]


				if(((total_distancea+total_distanceb)) >= 2*((target_distance)/21.04f)*encoder_count){
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <motorForwardB+0x248>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <motorForwardB+0x24c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f81b 	bl	8000524 <__aeabi_i2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001588 <motorForwardB+0x250>
 8001500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001504:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001508:	ee17 0a90 	vmov	r0, s15
 800150c:	f7ff f81c 	bl	8000548 <__aeabi_f2d>
 8001510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001514:	f7ff f870 	bl	80005f8 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4620      	mov	r0, r4
 800151e:	4629      	mov	r1, r5
 8001520:	f7ff faf0 	bl	8000b04 <__aeabi_dcmpge>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <motorForwardB+0x1f8>
					motorStop();
 800152a:	f7ff fd2f 	bl	8000f8c <motorStop>
					break;
 800152e:	e000      	b.n	8001532 <motorForwardB+0x1fa>
				osDelayUntil(10);
 8001530:	e753      	b.n	80013da <motorForwardB+0xa2>
				/*while(total_distancea + total_distanceb > 2*(target_distance/21.04)*encoder_count){
									motorOnA = -1000*dir;
									motorOnB = -1000*dir;
									osDelayUntil(10);
				}*/
				motorStop();
 8001532:	f7ff fd2b 	bl	8000f8c <motorStop>
				total_distancea = 0;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <motorForwardB+0x248>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
				total_distanceb = 0;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <motorForwardB+0x24c>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
				htim1.Instance -> CCR4 = 150;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <motorForwardB+0x22c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2296      	movs	r2, #150	; 0x96
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bdb0      	pop	{r4, r5, r7, pc}
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	00000000 	.word	0x00000000
 800155c:	4062c000 	.word	0x4062c000
 8001560:	20000000 	.word	0x20000000
 8001564:	20000308 	.word	0x20000308
 8001568:	40986000 	.word	0x40986000
 800156c:	20000580 	.word	0x20000580
 8001570:	200004f0 	.word	0x200004f0
 8001574:	200004f4 	.word	0x200004f4
 8001578:	20000008 	.word	0x20000008
 800157c:	40240000 	.word	0x40240000
 8001580:	20000574 	.word	0x20000574
 8001584:	20000578 	.word	0x20000578
 8001588:	41a851ec 	.word	0x41a851ec

0800158c <motorRight>:


void motorRight(int target_angle){
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]


		htim1.Instance -> CCR4 = 255;
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <motorRight+0x94>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	22ff      	movs	r2, #255	; 0xff
 800159a:	641a      	str	r2, [r3, #64]	; 0x40
		//gyroStart();


		osDelay(500);
 800159c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a0:	f007 fe98 	bl	80092d4 <osDelay>
		//gyroStart();

		turnDir = -1;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <motorRight+0x98>)
 80015a6:	f04f 32ff 	mov.w	r2, #4294967295
 80015aa:	601a      	str	r2, [r3, #0]
		total_angle =  0;
 80015ac:	491e      	ldr	r1, [pc, #120]	; (8001628 <motorRight+0x9c>)
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c1 2300 	strd	r2, r3, [r1]
		motorOnA = turnSPEED;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <motorRight+0xa0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <motorRight+0xa4>)
 80015c0:	6013      	str	r3, [r2, #0]
		motorOnB = motorOnA;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <motorRight+0xa4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <motorRight+0xa8>)
 80015c8:	6013      	str	r3, [r2, #0]
		while(total_angle > -1*target_angle){
 80015ca:	e002      	b.n	80015d2 <motorRight+0x46>
			osDelayUntil(10);
 80015cc:	200a      	movs	r0, #10
 80015ce:	f007 fe9c 	bl	800930a <osDelayUntil>
		while(total_angle > -1*target_angle){
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	425b      	negs	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffa4 	bl	8000524 <__aeabi_i2d>
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <motorRight+0x9c>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff fa7b 	bl	8000adc <__aeabi_dcmplt>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1ef      	bne.n	80015cc <motorRight+0x40>
		}

		motorStop();
 80015ec:	f7ff fcce 	bl	8000f8c <motorStop>

		double Aint = 0;
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9c7 2302 	strd	r2, r3, [r7, #8]

			osDelayUntil(10);
		}
		motorStop();
		*/
		total_distancea = 0;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <motorRight+0xac>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
		total_distanceb = 0;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <motorRight+0xb0>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

		htim1.Instance -> CCR4 = 150;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <motorRight+0x94>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2296      	movs	r2, #150	; 0x96
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(200);
 8001610:	20c8      	movs	r0, #200	; 0xc8
 8001612:	f007 fe5f 	bl	80092d4 <osDelay>

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000308 	.word	0x20000308
 8001624:	20000590 	.word	0x20000590
 8001628:	20000580 	.word	0x20000580
 800162c:	2000000c 	.word	0x2000000c
 8001630:	200004f0 	.word	0x200004f0
 8001634:	200004f4 	.word	0x200004f4
 8001638:	20000574 	.word	0x20000574
 800163c:	20000578 	.word	0x20000578

08001640 <motorLeft>:

void motorLeft(int target_angle){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

		htim1.Instance -> CCR4 =  105;
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <motorLeft+0x8c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2269      	movs	r2, #105	; 0x69
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
		//gyroStart();

		osDelay(500);
 8001650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001654:	f007 fe3e 	bl	80092d4 <osDelay>
		//gyroStart();

        turnDir = 1;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <motorLeft+0x90>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
		total_angle = 0;
 800165e:	491d      	ldr	r1, [pc, #116]	; (80016d4 <motorLeft+0x94>)
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c1 2300 	strd	r2, r3, [r1]

		motorOnB = turnSPEED;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <motorLeft+0x98>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <motorLeft+0x9c>)
 8001672:	6013      	str	r3, [r2, #0]
		motorOnA = motorOnB;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <motorLeft+0x9c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <motorLeft+0xa0>)
 800167a:	6013      	str	r3, [r2, #0]
		double Aint = 0;
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	e9c7 2302 	strd	r2, r3, [r7, #8]

		while(total_angle < target_angle){
 8001688:	e002      	b.n	8001690 <motorLeft+0x50>
			osDelayUntil(10);
 800168a:	200a      	movs	r0, #10
 800168c:	f007 fe3d 	bl	800930a <osDelayUntil>
		while(total_angle < target_angle){
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7fe ff47 	bl	8000524 <__aeabi_i2d>
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <motorLeft+0x94>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7ff fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f1      	bne.n	800168a <motorLeft+0x4a>
		}

		motorStop();
 80016a6:	f7ff fc71 	bl	8000f8c <motorStop>
				}

				motorStop();
				*/

		total_distancea = 0;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <motorLeft+0xa4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
		total_distanceb = 0;
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <motorLeft+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]

		htim1.Instance -> CCR4 =  150;
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <motorLeft+0x8c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2296      	movs	r2, #150	; 0x96
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(200);
 80016be:	20c8      	movs	r0, #200	; 0xc8
 80016c0:	f007 fe08 	bl	80092d4 <osDelay>

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000308 	.word	0x20000308
 80016d0:	20000590 	.word	0x20000590
 80016d4:	20000580 	.word	0x20000580
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	200004f4 	.word	0x200004f4
 80016e0:	200004f0 	.word	0x200004f0
 80016e4:	20000574 	.word	0x20000574
 80016e8:	20000578 	.word	0x20000578

080016ec <motorRightB>:


void motorRightB(int target_angle){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]


		htim1.Instance -> CCR4 = 260;
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <motorRightB+0x94>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
		//gyroStart();


		osDelay(500);
 80016fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001702:	f007 fde7 	bl	80092d4 <osDelay>
		//gyroStart();

		turnDir = -1;
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <motorRightB+0x98>)
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	601a      	str	r2, [r3, #0]
		total_angle =  0;
 800170e:	491e      	ldr	r1, [pc, #120]	; (8001788 <motorRightB+0x9c>)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9c1 2300 	strd	r2, r3, [r1]
		motorOnA = 2500;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <motorRightB+0xa0>)
 800171e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001722:	601a      	str	r2, [r3, #0]
		motorOnB = 500;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <motorRightB+0xa4>)
 8001726:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800172a:	601a      	str	r2, [r3, #0]
//		motorOnA = 2400;
//		motorOnB = 400;

		while(total_angle > -1*target_angle){
 800172c:	e002      	b.n	8001734 <motorRightB+0x48>
			osDelayUntil(10);
 800172e:	200a      	movs	r0, #10
 8001730:	f007 fdeb 	bl	800930a <osDelayUntil>
		while(total_angle > -1*target_angle){
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	425b      	negs	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fef3 	bl	8000524 <__aeabi_i2d>
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <motorRightB+0x9c>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f9ca 	bl	8000adc <__aeabi_dcmplt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ef      	bne.n	800172e <motorRightB+0x42>
		}

		motorStop();
 800174e:	f7ff fc1d 	bl	8000f8c <motorStop>

		double Aint = 0;
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9c7 2302 	strd	r2, r3, [r7, #8]

			osDelayUntil(10);
		}
		motorStop();
		*/
		total_distancea = 0;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <motorRightB+0xa8>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
		total_distanceb = 0;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <motorRightB+0xac>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]

		htim1.Instance -> CCR4 = 150;
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <motorRightB+0x94>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2296      	movs	r2, #150	; 0x96
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(200);
 8001772:	20c8      	movs	r0, #200	; 0xc8
 8001774:	f007 fdae 	bl	80092d4 <osDelay>

}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000308 	.word	0x20000308
 8001784:	20000590 	.word	0x20000590
 8001788:	20000580 	.word	0x20000580
 800178c:	200004f0 	.word	0x200004f0
 8001790:	200004f4 	.word	0x200004f4
 8001794:	20000574 	.word	0x20000574
 8001798:	20000578 	.word	0x20000578

0800179c <motorLeftB>:

void motorLeftB(int target_angle){
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

		htim1.Instance -> CCR4 =  100;
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <motorLeftB+0x8c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2264      	movs	r2, #100	; 0x64
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40
		//gyroStart();

		osDelay(500);
 80017ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017b0:	f007 fd90 	bl	80092d4 <osDelay>
		//gyroStart();

        turnDir = 1;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <motorLeftB+0x90>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
		total_angle = 0;
 80017ba:	491d      	ldr	r1, [pc, #116]	; (8001830 <motorLeftB+0x94>)
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9c1 2300 	strd	r2, r3, [r1]

		motorOnB = 2500;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <motorLeftB+0x98>)
 80017ca:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80017ce:	601a      	str	r2, [r3, #0]
		motorOnA = 500;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <motorLeftB+0x9c>)
 80017d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017d6:	601a      	str	r2, [r3, #0]
//		motorOnA = 2400;
//		motorOnB = 400;

		double Aint = 0;
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9c7 2302 	strd	r2, r3, [r7, #8]

		while(total_angle < target_angle){
 80017e4:	e002      	b.n	80017ec <motorLeftB+0x50>
			osDelayUntil(10);
 80017e6:	200a      	movs	r0, #10
 80017e8:	f007 fd8f 	bl	800930a <osDelayUntil>
		while(total_angle < target_angle){
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7fe fe99 	bl	8000524 <__aeabi_i2d>
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <motorLeftB+0x94>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7ff f98e 	bl	8000b18 <__aeabi_dcmpgt>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f1      	bne.n	80017e6 <motorLeftB+0x4a>
		}

		motorStop();
 8001802:	f7ff fbc3 	bl	8000f8c <motorStop>
				}

				motorStop();
				*/

		total_distancea = 0;
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <motorLeftB+0xa0>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
		total_distanceb = 0;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <motorLeftB+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

		htim1.Instance -> CCR4 =  150;
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <motorLeftB+0x8c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2296      	movs	r2, #150	; 0x96
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(200);
 800181a:	20c8      	movs	r0, #200	; 0xc8
 800181c:	f007 fd5a 	bl	80092d4 <osDelay>

}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000308 	.word	0x20000308
 800182c:	20000590 	.word	0x20000590
 8001830:	20000580 	.word	0x20000580
 8001834:	200004f4 	.word	0x200004f4
 8001838:	200004f0 	.word	0x200004f0
 800183c:	20000574 	.word	0x20000574
 8001840:	20000578 	.word	0x20000578

08001844 <backRight>:


}


void backRight(int target_angle){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]


		htim1.Instance -> CCR4 = 260;
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <backRight+0x90>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
		//gyroStart();


		osDelay(500);
 8001856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800185a:	f007 fd3b 	bl	80092d4 <osDelay>
		//gyroStart();
		turnDir = 1;
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <backRight+0x94>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]
		total_angle = 0;
 8001864:	491d      	ldr	r1, [pc, #116]	; (80018dc <backRight+0x98>)
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9c1 2300 	strd	r2, r3, [r1]
		motorOnA = -1*turnSPEED;
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <backRight+0x9c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	425b      	negs	r3, r3
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <backRight+0xa0>)
 800187a:	6013      	str	r3, [r2, #0]
		motorOnB = motorOnA;
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <backRight+0xa0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <backRight+0xa4>)
 8001882:	6013      	str	r3, [r2, #0]
		double Aint = 0;
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		while(total_angle < target_angle){
 8001890:	e002      	b.n	8001898 <backRight+0x54>
					osDelayUntil(10);
 8001892:	200a      	movs	r0, #10
 8001894:	f007 fd39 	bl	800930a <osDelayUntil>
		while(total_angle < target_angle){
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7fe fe43 	bl	8000524 <__aeabi_i2d>
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <backRight+0x98>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7ff f938 	bl	8000b18 <__aeabi_dcmpgt>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f1      	bne.n	8001892 <backRight+0x4e>
				}

				motorStop();
 80018ae:	f7ff fb6d 	bl	8000f8c <motorStop>

					osDelayUntil(10);
				}
				motorStop();
				*/
				total_distancea = 0;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <backRight+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
				total_distanceb = 0;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <backRight+0xac>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

				htim1.Instance -> CCR4 = 150;
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <backRight+0x90>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2296      	movs	r2, #150	; 0x96
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(200);
 80018c6:	20c8      	movs	r0, #200	; 0xc8
 80018c8:	f007 fd04 	bl	80092d4 <osDelay>

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000308 	.word	0x20000308
 80018d8:	20000590 	.word	0x20000590
 80018dc:	20000580 	.word	0x20000580
 80018e0:	2000000c 	.word	0x2000000c
 80018e4:	200004f0 	.word	0x200004f0
 80018e8:	200004f4 	.word	0x200004f4
 80018ec:	20000574 	.word	0x20000574
 80018f0:	20000578 	.word	0x20000578

080018f4 <backLeft>:
void backLeft(int target_angle){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]


		htim1.Instance -> CCR4 =  100;
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <backLeft+0x94>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2264      	movs	r2, #100	; 0x64
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
		//gyroStart();

		osDelay(500);
 8001904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001908:	f007 fce4 	bl	80092d4 <osDelay>
		//gyroStart();

		turnDir = -1;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <backLeft+0x98>)
 800190e:	f04f 32ff 	mov.w	r2, #4294967295
 8001912:	601a      	str	r2, [r3, #0]
		total_angle = 0;
 8001914:	491e      	ldr	r1, [pc, #120]	; (8001990 <backLeft+0x9c>)
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9c1 2300 	strd	r2, r3, [r1]
		motorOnB = -1*turnSPEED;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <backLeft+0xa0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	425b      	negs	r3, r3
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <backLeft+0xa4>)
 800192a:	6013      	str	r3, [r2, #0]
		motorOnA = motorOnB;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <backLeft+0xa4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <backLeft+0xa8>)
 8001932:	6013      	str	r3, [r2, #0]
		double Aint = 0;
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		while(total_angle > -1*target_angle){
 8001940:	e002      	b.n	8001948 <backLeft+0x54>
					osDelayUntil(10);
 8001942:	200a      	movs	r0, #10
 8001944:	f007 fce1 	bl	800930a <osDelayUntil>
		while(total_angle > -1*target_angle){
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	425b      	negs	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fde9 	bl	8000524 <__aeabi_i2d>
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <backLeft+0x9c>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7ff f8c0 	bl	8000adc <__aeabi_dcmplt>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ef      	bne.n	8001942 <backLeft+0x4e>
				}

				motorStop();
 8001962:	f7ff fb13 	bl	8000f8c <motorStop>

					osDelayUntil(10);
				}
				motorStop();
				*/
				total_distancea = 0;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <backLeft+0xac>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
						total_distanceb = 0;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <backLeft+0xb0>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

				htim1.Instance -> CCR4 = 150;
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <backLeft+0x94>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2296      	movs	r2, #150	; 0x96
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(200);
 800197a:	20c8      	movs	r0, #200	; 0xc8
 800197c:	f007 fcaa 	bl	80092d4 <osDelay>

}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000308 	.word	0x20000308
 800198c:	20000590 	.word	0x20000590
 8001990:	20000580 	.word	0x20000580
 8001994:	2000000c 	.word	0x2000000c
 8001998:	200004f4 	.word	0x200004f4
 800199c:	200004f0 	.word	0x200004f0
 80019a0:	20000574 	.word	0x20000574
 80019a4:	20000578 	.word	0x20000578

080019a8 <motorBack>:



void motorBack(int target_distance){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

		htim1.Instance -> CCR4 = 150;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <motorBack+0x28>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2296      	movs	r2, #150	; 0x96
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
		osDelayUntil(200);
 80019b8:	20c8      	movs	r0, #200	; 0xc8
 80019ba:	f007 fca6 	bl	800930a <osDelayUntil>
		motorForwardB(target_distance, -1);
 80019be:	f04f 31ff 	mov.w	r1, #4294967295
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fcb8 	bl	8001338 <motorForwardB>

}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000308 	.word	0x20000308

080019d4 <motorBackA>:

void motorBackA(int target){
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

	int disto = 100;
 80019dc:	2364      	movs	r3, #100	; 0x64
 80019de:	61fb      	str	r3, [r7, #28]
	dir = -1;
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <motorBackA+0xe0>)
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295
 80019e6:	601a      	str	r2, [r3, #0]
	htim1.Instance -> CCR4 = 150;
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <motorBackA+0xe4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2296      	movs	r2, #150	; 0x96
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40
	osDelayUntil(200);
 80019f0:	20c8      	movs	r0, #200	; 0xc8
 80019f2:	f007 fc8a 	bl	800930a <osDelayUntil>
	double encoder_count = 1560.0;
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <motorBackA+0xe8>)
 80019fc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    total_angle = 0;
 8001a00:	492f      	ldr	r1, [pc, #188]	; (8001ac0 <motorBackA+0xec>)
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]
    double Aint = 0;
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9c7 2302 	strd	r2, r3, [r7, #8]
	motorOnA = 800*dir;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <motorBackA+0xe0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <motorBackA+0xf0>)
 8001a28:	6013      	str	r3, [r2, #0]
	motorOnB = motorOnA;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <motorBackA+0xf0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <motorBackA+0xf4>)
 8001a30:	6013      	str	r3, [r2, #0]
				htim1.Instance -> CCR4 = pidVal;
				osDelayUntil(10);
				Aint += total_angle;*/


				if(((total_distancea+total_distanceb)) >= 2*((disto)/21.04f)*encoder_count || (us_dist > target && ir1_dist > 15)){
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <motorBackA+0xf8>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <motorBackA+0xfc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd71 	bl	8000524 <__aeabi_i2d>
 8001a42:	4604      	mov	r4, r0
 8001a44:	460d      	mov	r5, r1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a50:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001ad4 <motorBackA+0x100>
 8001a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a5c:	ee17 0a90 	vmov	r0, s15
 8001a60:	f7fe fd72 	bl	8000548 <__aeabi_f2d>
 8001a64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a68:	f7fe fdc6 	bl	80005f8 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7ff f846 	bl	8000b04 <__aeabi_dcmpge>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <motorBackA+0xbe>
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <motorBackA+0x104>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4293      	cmp	r3, r2
 8001a88:	dad3      	bge.n	8001a32 <motorBackA+0x5e>
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <motorBackA+0x108>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b0f      	cmp	r3, #15
 8001a90:	ddcf      	ble.n	8001a32 <motorBackA+0x5e>
					motorStop();
 8001a92:	f7ff fa7b 	bl	8000f8c <motorStop>
					break;
 8001a96:	bf00      	nop
									motorOnB = -1000*dir;
									osDelayUntil(10);
				}
				motorStop();
				*/
				total_distancea = 0;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <motorBackA+0xf8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
				total_distanceb = 0;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <motorBackA+0xfc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
				htim1.Instance -> CCR4 = 150;
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <motorBackA+0xe4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2296      	movs	r2, #150	; 0x96
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000308 	.word	0x20000308
 8001abc:	40986000 	.word	0x40986000
 8001ac0:	20000580 	.word	0x20000580
 8001ac4:	200004f0 	.word	0x200004f0
 8001ac8:	200004f4 	.word	0x200004f4
 8001acc:	20000574 	.word	0x20000574
 8001ad0:	20000578 	.word	0x20000578
 8001ad4:	41a851ec 	.word	0x41a851ec
 8001ad8:	2000059c 	.word	0x2000059c
 8001adc:	20000598 	.word	0x20000598

08001ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ae4:	f001 fe68 	bl	80037b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae8:	f000 f88c 	bl	8001c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aec:	f000 fc14 	bl	8002318 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001af0:	f000 fb1c 	bl	800212c <MX_TIM8_Init>
  MX_TIM2_Init();
 8001af4:	f000 fa02 	bl	8001efc <MX_TIM2_Init>
  MX_TIM1_Init();
 8001af8:	f000 f962 	bl	8001dc0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001afc:	f000 fbc2 	bl	8002284 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001b00:	f000 fa50 	bl	8001fa4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b04:	f000 faa2 	bl	800204c <MX_TIM4_Init>
  MX_I2C1_Init();
 8001b08:	f000 f92c 	bl	8001d64 <MX_I2C1_Init>
  MX_DMA_Init();
 8001b0c:	f000 fbe4 	bl	80022d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b10:	f000 f8d6 	bl	8001cc0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 8001b14:	2100      	movs	r1, #0
 8001b16:	4825      	ldr	r0, [pc, #148]	; (8001bac <main+0xcc>)
 8001b18:	f004 ff8c 	bl	8006a34 <HAL_TIM_IC_Start>


  OLED_Init();
 8001b1c:	f00a fa9c 	bl	800c058 <OLED_Init>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b20:	213c      	movs	r1, #60	; 0x3c
 8001b22:	4823      	ldr	r0, [pc, #140]	; (8001bb0 <main+0xd0>)
 8001b24:	f005 f908 	bl	8006d38 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b28:	213c      	movs	r1, #60	; 0x3c
 8001b2a:	4822      	ldr	r0, [pc, #136]	; (8001bb4 <main+0xd4>)
 8001b2c:	f005 f904 	bl	8006d38 <HAL_TIM_Encoder_Start>

  			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001b30:	2100      	movs	r1, #0
 8001b32:	4821      	ldr	r0, [pc, #132]	; (8001bb8 <main+0xd8>)
 8001b34:	f004 fe5c 	bl	80067f0 <HAL_TIM_PWM_Start>

  			HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001b38:	2104      	movs	r1, #4
 8001b3a:	481f      	ldr	r0, [pc, #124]	; (8001bb8 <main+0xd8>)
 8001b3c:	f004 fe58 	bl	80067f0 <HAL_TIM_PWM_Start>

  			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001b40:	210c      	movs	r1, #12
 8001b42:	481e      	ldr	r0, [pc, #120]	; (8001bbc <main+0xdc>)
 8001b44:	f004 fe54 	bl	80067f0 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 4);
 8001b48:	2204      	movs	r2, #4
 8001b4a:	491d      	ldr	r1, [pc, #116]	; (8001bc0 <main+0xe0>)
 8001b4c:	481d      	ldr	r0, [pc, #116]	; (8001bc4 <main+0xe4>)
 8001b4e:	f006 fb0c 	bl	800816a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b52:	f007 fae3 	bl	800911c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <main+0xe8>)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	481c      	ldr	r0, [pc, #112]	; (8001bcc <main+0xec>)
 8001b5c:	f007 fb28 	bl	80091b0 <osThreadNew>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <main+0xf0>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8001b66:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <main+0xf4>)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <main+0xf8>)
 8001b6c:	f007 fb20 	bl	80091b0 <osThreadNew>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <main+0xfc>)
 8001b74:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motorTask, NULL, &MotorTask_attributes);
 8001b76:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <main+0x100>)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	481a      	ldr	r0, [pc, #104]	; (8001be4 <main+0x104>)
 8001b7c:	f007 fb18 	bl	80091b0 <osThreadNew>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <main+0x108>)
 8001b84:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(gyroTask, NULL, &GyroTask_attributes);
 8001b86:	4a19      	ldr	r2, [pc, #100]	; (8001bec <main+0x10c>)
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <main+0x110>)
 8001b8c:	f007 fb10 	bl	80091b0 <osThreadNew>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <main+0x114>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* creation of UltrasoundTask */
  UltrasoundTaskHandle = osThreadNew(ultrasoundTask, NULL, &UltrasoundTask_attributes);
 8001b96:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <main+0x118>)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4818      	ldr	r0, [pc, #96]	; (8001bfc <main+0x11c>)
 8001b9c:	f007 fb08 	bl	80091b0 <osThreadNew>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <main+0x120>)
 8001ba4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ba6:	f007 fadd 	bl	8009164 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <main+0xca>
 8001bac:	200003e0 	.word	0x200003e0
 8001bb0:	20000350 	.word	0x20000350
 8001bb4:	20000398 	.word	0x20000398
 8001bb8:	20000428 	.word	0x20000428
 8001bbc:	20000308 	.word	0x20000308
 8001bc0:	200004c8 	.word	0x200004c8
 8001bc4:	20000470 	.word	0x20000470
 8001bc8:	0800f48c 	.word	0x0800f48c
 8001bcc:	08002699 	.word	0x08002699
 8001bd0:	200004b4 	.word	0x200004b4
 8001bd4:	0800f4b0 	.word	0x0800f4b0
 8001bd8:	080027c1 	.word	0x080027c1
 8001bdc:	200004b8 	.word	0x200004b8
 8001be0:	0800f4d4 	.word	0x0800f4d4
 8001be4:	08002b35 	.word	0x08002b35
 8001be8:	200004bc 	.word	0x200004bc
 8001bec:	0800f4f8 	.word	0x0800f4f8
 8001bf0:	08002cd9 	.word	0x08002cd9
 8001bf4:	200004c0 	.word	0x200004c0
 8001bf8:	0800f51c 	.word	0x0800f51c
 8001bfc:	08002e85 	.word	0x08002e85
 8001c00:	200004c4 	.word	0x200004c4

08001c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b094      	sub	sp, #80	; 0x50
 8001c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	2230      	movs	r2, #48	; 0x30
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f00a fae4 	bl	800c1e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <SystemClock_Config+0xb4>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <SystemClock_Config+0xb4>)
 8001c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <SystemClock_Config+0xb4>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <SystemClock_Config+0xb8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <SystemClock_Config+0xb8>)
 8001c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <SystemClock_Config+0xb8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c60:	2302      	movs	r3, #2
 8001c62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c64:	2301      	movs	r3, #1
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c68:	2310      	movs	r3, #16
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 ffd7 	bl	8005c28 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c80:	f001 f918 	bl	8002eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c84:	230f      	movs	r3, #15
 8001c86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 fa39 	bl	8006118 <HAL_RCC_ClockConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001cac:	f001 f902 	bl	8002eb4 <Error_Handler>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3750      	adds	r7, #80	; 0x50
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <MX_ADC1_Init+0x9c>)
 8001cd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001d00:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <MX_ADC1_Init+0xa0>)
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d1e:	480e      	ldr	r0, [pc, #56]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001d20:	f001 fdb0 	bl	8003884 <HAL_ADC_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d2a:	f001 f8c3 	bl	8002eb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_ADC1_Init+0x98>)
 8001d40:	f001 ff82 	bl	8003c48 <HAL_ADC_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d4a:	f001 f8b3 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000020c 	.word	0x2000020c
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	0f000001 	.word	0x0f000001

08001d64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d6a:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <MX_I2C1_Init+0x54>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d70:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <MX_I2C1_Init+0x58>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001da2:	f002 ff83 	bl	8004cac <HAL_I2C_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dac:	f001 f882 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200002b4 	.word	0x200002b4
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	000186a0 	.word	0x000186a0

08001dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b096      	sub	sp, #88	; 0x58
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2220      	movs	r2, #32
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00a f9f1 	bl	800c1e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e00:	4a3d      	ldr	r2, [pc, #244]	; (8001ef8 <MX_TIM1_Init+0x138>)
 8001e02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001e04:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e06:	22a0      	movs	r2, #160	; 0xa0
 8001e08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001e10:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e1e:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e24:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e2a:	4832      	ldr	r0, [pc, #200]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e2c:	f004 fbc6 	bl	80065bc <HAL_TIM_Base_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e36:	f001 f83d 	bl	8002eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e44:	4619      	mov	r1, r3
 8001e46:	482b      	ldr	r0, [pc, #172]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e48:	f005 fa6a 	bl	8007320 <HAL_TIM_ConfigClockSource>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e52:	f001 f82f 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e56:	4827      	ldr	r0, [pc, #156]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e58:	f004 fc70 	bl	800673c <HAL_TIM_PWM_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e62:	f001 f827 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e72:	4619      	mov	r1, r3
 8001e74:	481f      	ldr	r0, [pc, #124]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001e76:	f005 ffb7 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e80:	f001 f818 	bl	8002eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e84:	2360      	movs	r3, #96	; 0x60
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e90:	2304      	movs	r3, #4
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	220c      	movs	r2, #12
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4813      	ldr	r0, [pc, #76]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001ea6:	f005 f979 	bl	800719c <HAL_TIM_PWM_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001eb0:	f001 f800 	bl	8002eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ecc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001ed8:	f006 f802 	bl	8007ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001ee2:	f000 ffe7 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ee6:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <MX_TIM1_Init+0x134>)
 8001ee8:	f001 fa10 	bl	800330c <HAL_TIM_MspPostInit>

}
 8001eec:	bf00      	nop
 8001eee:	3758      	adds	r7, #88	; 0x58
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000308 	.word	0x20000308
 8001ef8:	40010000 	.word	0x40010000

08001efc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f00a f968 	bl	800c1e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <MX_TIM2_Init+0xa4>)
 8001f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <MX_TIM2_Init+0xa4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <MX_TIM2_Init+0xa4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <MX_TIM2_Init+0xa4>)
 8001f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_TIM2_Init+0xa4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <MX_TIM2_Init+0xa4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f40:	2303      	movs	r3, #3
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f54:	2300      	movs	r3, #0
 8001f56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <MX_TIM2_Init+0xa4>)
 8001f6c:	f004 fe3e 	bl	8006bec <HAL_TIM_Encoder_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f76:	f000 ff9d 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <MX_TIM2_Init+0xa4>)
 8001f88:	f005 ff2e 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f92:	f000 ff8f 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3730      	adds	r7, #48	; 0x30
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000350 	.word	0x20000350

08001fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00a f914 	bl	800c1e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <MX_TIM3_Init+0xa0>)
 8001fc2:	4a21      	ldr	r2, [pc, #132]	; (8002048 <MX_TIM3_Init+0xa4>)
 8001fc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <MX_TIM3_Init+0xa0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <MX_TIM3_Init+0xa0>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <MX_TIM3_Init+0xa0>)
 8001fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_TIM3_Init+0xa0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <MX_TIM3_Init+0xa0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffe:	2301      	movs	r3, #1
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	4619      	mov	r1, r3
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <MX_TIM3_Init+0xa0>)
 8002012:	f004 fdeb 	bl	8006bec <HAL_TIM_Encoder_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800201c:	f000 ff4a 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_TIM3_Init+0xa0>)
 800202e:	f005 fedb 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002038:	f000 ff3c 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3730      	adds	r7, #48	; 0x30
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000398 	.word	0x20000398
 8002048:	40000400 	.word	0x40000400

0800204c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0318 	add.w	r3, r7, #24
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800206a:	463b      	mov	r3, r7
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <MX_TIM4_Init+0xd8>)
 8002078:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <MX_TIM4_Init+0xdc>)
 800207a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800207c:	4b29      	ldr	r3, [pc, #164]	; (8002124 <MX_TIM4_Init+0xd8>)
 800207e:	220f      	movs	r2, #15
 8002080:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <MX_TIM4_Init+0xd8>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <MX_TIM4_Init+0xd8>)
 800208a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800208e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <MX_TIM4_Init+0xd8>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b23      	ldr	r3, [pc, #140]	; (8002124 <MX_TIM4_Init+0xd8>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800209c:	4821      	ldr	r0, [pc, #132]	; (8002124 <MX_TIM4_Init+0xd8>)
 800209e:	f004 fa8d 	bl	80065bc <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80020a8:	f000 ff04 	bl	8002eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	4619      	mov	r1, r3
 80020b8:	481a      	ldr	r0, [pc, #104]	; (8002124 <MX_TIM4_Init+0xd8>)
 80020ba:	f005 f931 	bl	8007320 <HAL_TIM_ConfigClockSource>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80020c4:	f000 fef6 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80020c8:	4816      	ldr	r0, [pc, #88]	; (8002124 <MX_TIM4_Init+0xd8>)
 80020ca:	f004 fc59 	bl	8006980 <HAL_TIM_IC_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80020d4:	f000 feee 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4619      	mov	r1, r3
 80020e6:	480f      	ldr	r0, [pc, #60]	; (8002124 <MX_TIM4_Init+0xd8>)
 80020e8:	f005 fe7e 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80020f2:	f000 fedf 	bl	8002eb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020f6:	2300      	movs	r3, #0
 80020f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020fa:	2301      	movs	r3, #1
 80020fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002106:	463b      	mov	r3, r7
 8002108:	2200      	movs	r2, #0
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_TIM4_Init+0xd8>)
 800210e:	f004 ffa9 	bl	8007064 <HAL_TIM_IC_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002118:	f000 fecc 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200003e0 	.word	0x200003e0
 8002128:	40000800 	.word	0x40000800

0800212c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b096      	sub	sp, #88	; 0x58
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	615a      	str	r2, [r3, #20]
 800215c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2220      	movs	r2, #32
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f00a f83b 	bl	800c1e0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800216a:	4b44      	ldr	r3, [pc, #272]	; (800227c <MX_TIM8_Init+0x150>)
 800216c:	4a44      	ldr	r2, [pc, #272]	; (8002280 <MX_TIM8_Init+0x154>)
 800216e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002170:	4b42      	ldr	r3, [pc, #264]	; (800227c <MX_TIM8_Init+0x150>)
 8002172:	2200      	movs	r2, #0
 8002174:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002176:	4b41      	ldr	r3, [pc, #260]	; (800227c <MX_TIM8_Init+0x150>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <MX_TIM8_Init+0x150>)
 800217e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002182:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002184:	4b3d      	ldr	r3, [pc, #244]	; (800227c <MX_TIM8_Init+0x150>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800218a:	4b3c      	ldr	r3, [pc, #240]	; (800227c <MX_TIM8_Init+0x150>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b3a      	ldr	r3, [pc, #232]	; (800227c <MX_TIM8_Init+0x150>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002196:	4839      	ldr	r0, [pc, #228]	; (800227c <MX_TIM8_Init+0x150>)
 8002198:	f004 fa10 	bl	80065bc <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80021a2:	f000 fe87 	bl	8002eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021b0:	4619      	mov	r1, r3
 80021b2:	4832      	ldr	r0, [pc, #200]	; (800227c <MX_TIM8_Init+0x150>)
 80021b4:	f005 f8b4 	bl	8007320 <HAL_TIM_ConfigClockSource>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80021be:	f000 fe79 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021c2:	482e      	ldr	r0, [pc, #184]	; (800227c <MX_TIM8_Init+0x150>)
 80021c4:	f004 faba 	bl	800673c <HAL_TIM_PWM_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80021ce:	f000 fe71 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021de:	4619      	mov	r1, r3
 80021e0:	4826      	ldr	r0, [pc, #152]	; (800227c <MX_TIM8_Init+0x150>)
 80021e2:	f005 fe01 	bl	8007de8 <HAL_TIMEx_MasterConfigSynchronization>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80021ec:	f000 fe62 	bl	8002eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f0:	2360      	movs	r3, #96	; 0x60
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021fc:	2300      	movs	r3, #0
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	2200      	movs	r2, #0
 8002212:	4619      	mov	r1, r3
 8002214:	4819      	ldr	r0, [pc, #100]	; (800227c <MX_TIM8_Init+0x150>)
 8002216:	f004 ffc1 	bl	800719c <HAL_TIM_PWM_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002220:	f000 fe48 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002228:	2204      	movs	r2, #4
 800222a:	4619      	mov	r1, r3
 800222c:	4813      	ldr	r0, [pc, #76]	; (800227c <MX_TIM8_Init+0x150>)
 800222e:	f004 ffb5 	bl	800719c <HAL_TIM_PWM_ConfigChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002238:	f000 fe3c 	bl	8002eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002254:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4807      	ldr	r0, [pc, #28]	; (800227c <MX_TIM8_Init+0x150>)
 8002260:	f005 fe3e 	bl	8007ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800226a:	f000 fe23 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <MX_TIM8_Init+0x150>)
 8002270:	f001 f84c 	bl	800330c <HAL_TIM_MspPostInit>

}
 8002274:	bf00      	nop
 8002276:	3758      	adds	r7, #88	; 0x58
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000428 	.word	0x20000428
 8002280:	40010400 	.word	0x40010400

08002284 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MX_USART3_UART_Init+0x4c>)
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <MX_USART3_UART_Init+0x50>)
 800228c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <MX_USART3_UART_Init+0x4c>)
 8002290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002294:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_USART3_UART_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <MX_USART3_UART_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <MX_USART3_UART_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <MX_USART3_UART_Init+0x4c>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <MX_USART3_UART_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_USART3_UART_Init+0x4c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022ba:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_USART3_UART_Init+0x4c>)
 80022bc:	f005 fe76 	bl	8007fac <HAL_UART_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022c6:	f000 fdf5 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000470 	.word	0x20000470
 80022d4:	40004800 	.word	0x40004800

080022d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <MX_DMA_Init+0x3c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <MX_DMA_Init+0x3c>)
 80022e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <MX_DMA_Init+0x3c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2105      	movs	r1, #5
 80022fe:	2038      	movs	r0, #56	; 0x38
 8002300:	f001 ff78 	bl	80041f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002304:	2038      	movs	r0, #56	; 0x38
 8002306:	f001 ff91 	bl	800422c <HAL_NVIC_EnableIRQ>

}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800

08002318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	; 0x30
 800231c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	4b54      	ldr	r3, [pc, #336]	; (8002484 <MX_GPIO_Init+0x16c>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a53      	ldr	r2, [pc, #332]	; (8002484 <MX_GPIO_Init+0x16c>)
 8002338:	f043 0310 	orr.w	r3, r3, #16
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b51      	ldr	r3, [pc, #324]	; (8002484 <MX_GPIO_Init+0x16c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	4b4d      	ldr	r3, [pc, #308]	; (8002484 <MX_GPIO_Init+0x16c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <MX_GPIO_Init+0x16c>)
 8002354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <MX_GPIO_Init+0x16c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b46      	ldr	r3, [pc, #280]	; (8002484 <MX_GPIO_Init+0x16c>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a45      	ldr	r2, [pc, #276]	; (8002484 <MX_GPIO_Init+0x16c>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b43      	ldr	r3, [pc, #268]	; (8002484 <MX_GPIO_Init+0x16c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <MX_GPIO_Init+0x16c>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a3e      	ldr	r2, [pc, #248]	; (8002484 <MX_GPIO_Init+0x16c>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <MX_GPIO_Init+0x16c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <MX_GPIO_Init+0x16c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a37      	ldr	r2, [pc, #220]	; (8002484 <MX_GPIO_Init+0x16c>)
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <MX_GPIO_Init+0x16c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	4b31      	ldr	r3, [pc, #196]	; (8002484 <MX_GPIO_Init+0x16c>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a30      	ldr	r2, [pc, #192]	; (8002484 <MX_GPIO_Init+0x16c>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <MX_GPIO_Init+0x16c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80023d6:	2200      	movs	r2, #0
 80023d8:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 80023dc:	482a      	ldr	r0, [pc, #168]	; (8002488 <MX_GPIO_Init+0x170>)
 80023de:	f002 fc4b 	bl	8004c78 <HAL_GPIO_WritePin>
                          |LED3_Pin|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin
 80023e2:	2200      	movs	r2, #0
 80023e4:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80023e8:	4828      	ldr	r0, [pc, #160]	; (800248c <MX_GPIO_Init+0x174>)
 80023ea:	f002 fc45 	bl	8004c78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80023ee:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80023f2:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f4:	2301      	movs	r3, #1
 80023f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	4619      	mov	r1, r3
 8002406:	4820      	ldr	r0, [pc, #128]	; (8002488 <MX_GPIO_Init+0x170>)
 8002408:	f002 fa9a 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin
                           PA8 */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin
 800240c:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8002410:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241a:	2302      	movs	r3, #2
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 031c 	add.w	r3, r7, #28
 8002422:	4619      	mov	r1, r3
 8002424:	4819      	ldr	r0, [pc, #100]	; (800248c <MX_GPIO_Init+0x174>)
 8002426:	f002 fa8b 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800242a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800242e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002430:	2301      	movs	r3, #1
 8002432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	4619      	mov	r1, r3
 8002442:	4811      	ldr	r0, [pc, #68]	; (8002488 <MX_GPIO_Init+0x170>)
 8002444:	f002 fa7c 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRsensor_Pin */
  GPIO_InitStruct.Pin = IRsensor_Pin;
 8002448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRsensor_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	4619      	mov	r1, r3
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <MX_GPIO_Init+0x178>)
 800245e:	f002 fa6f 	bl	8004940 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8002462:	2320      	movs	r3, #32
 8002464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	4807      	ldr	r0, [pc, #28]	; (8002494 <MX_GPIO_Init+0x17c>)
 8002476:	f002 fa63 	bl	8004940 <HAL_GPIO_Init>

}
 800247a:	bf00      	nop
 800247c:	3730      	adds	r7, #48	; 0x30
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40021000 	.word	0x40021000
 800248c:	40020000 	.word	0x40020000
 8002490:	40020c00 	.word	0x40020c00
 8002494:	40020400 	.word	0x40020400

08002498 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOE

// Callback Function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7f1b      	ldrb	r3, [r3, #28]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	f040 8083 	bne.w	80025b0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80024aa:	4b45      	ldr	r3, [pc, #276]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11a      	bne.n	80024e8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80024b2:	2100      	movs	r1, #0
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f004 fffb 	bl	80074b0 <HAL_TIM_ReadCapturedValue>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4a41      	ldr	r2, [pc, #260]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80024be:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a1a      	ldr	r2, [r3, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 020a 	bic.w	r2, r2, #10
 80024d4:	621a      	str	r2, [r3, #32]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0202 	orr.w	r2, r2, #2
 80024e4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 80024e6:	e063      	b.n	80025b0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 80024e8:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d15f      	bne.n	80025b0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80024f0:	2100      	movs	r1, #0
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f004 ffdc 	bl	80074b0 <HAL_TIM_ReadCapturedValue>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4a33      	ldr	r2, [pc, #204]	; (80025c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80024fc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d907      	bls.n	8002522 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	4a2b      	ldr	r2, [pc, #172]	; (80025cc <HAL_TIM_IC_CaptureCallback+0x134>)
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e00f      	b.n	8002542 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8002522:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d909      	bls.n	8002542 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800253c:	33ff      	adds	r3, #255	; 0xff
 800253e:	4a23      	ldr	r2, [pc, #140]	; (80025cc <HAL_TIM_IC_CaptureCallback+0x134>)
 8002540:	6013      	str	r3, [r2, #0]
			us_dist = Difference * .034/2;
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_TIM_IC_CaptureCallback+0x134>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd ffdc 	bl	8000504 <__aeabi_ui2d>
 800254c:	a31a      	add	r3, pc, #104	; (adr r3, 80025b8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	f7fe f851 	bl	80005f8 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002566:	f7fe f971 	bl	800084c <__aeabi_ddiv>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb19 	bl	8000ba8 <__aeabi_d2uiz>
 8002576:	4603      	mov	r3, r0
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800257c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6a1a      	ldr	r2, [r3, #32]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 020a 	bic.w	r2, r2, #10
 8002592:	621a      	str	r2, [r3, #32]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a12      	ldr	r2, [r2, #32]
 800259e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0202 	bic.w	r2, r2, #2
 80025ae:	60da      	str	r2, [r3, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	b020c49c 	.word	0xb020c49c
 80025bc:	3fa16872 	.word	0x3fa16872
 80025c0:	200005b8 	.word	0x200005b8
 80025c4:	200005ac 	.word	0x200005ac
 80025c8:	200005b0 	.word	0x200005b0
 80025cc:	200005b4 	.word	0x200005b4
 80025d0:	2000059c 	.word	0x2000059c
 80025d4:	200003e0 	.word	0x200003e0

080025d8 <HCSR04_Read>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
}

void HCSR04_Read(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80025dc:	2201      	movs	r2, #1
 80025de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025e2:	480b      	ldr	r0, [pc, #44]	; (8002610 <HCSR04_Read+0x38>)
 80025e4:	f002 fb48 	bl	8004c78 <HAL_GPIO_WritePin>
	osDelay(1);  // wait for 10 us
 80025e8:	2001      	movs	r0, #1
 80025ea:	f006 fe73 	bl	80092d4 <osDelay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80025ee:	2200      	movs	r2, #0
 80025f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025f4:	4806      	ldr	r0, [pc, #24]	; (8002610 <HCSR04_Read+0x38>)
 80025f6:	f002 fb3f 	bl	8004c78 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1); // Enable Interrupt
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HCSR04_Read+0x3c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <HCSR04_Read+0x3c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0202 	orr.w	r2, r2, #2
 8002608:	60da      	str	r2, [r3, #12]
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	200003e0 	.word	0x200003e0

08002618 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);


	HAL_UART_Transmit(&huart3, (uint8_t *) &aRxBuffer[0], 4, 0xFFFF);
 8002620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002624:	2204      	movs	r2, #4
 8002626:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_UART_RxCpltCallback+0x68>)
 8002628:	4816      	ldr	r0, [pc, #88]	; (8002684 <HAL_UART_RxCpltCallback+0x6c>)
 800262a:	f005 fd0c 	bl	8008046 <HAL_UART_Transmit>

	if(flag == 0){
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_UART_RxCpltCallback+0x70>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11b      	bne.n	800266e <HAL_UART_RxCpltCallback+0x56>
		direction = (char) aRxBuffer[0];
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_UART_RxCpltCallback+0x68>)
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_UART_RxCpltCallback+0x74>)
 800263c:	701a      	strb	r2, [r3, #0]
		magnitude = (int)(aRxBuffer[1] - '0')*100 + (int)((char)aRxBuffer[2] - '0')*10 + (int)(aRxBuffer[3] - '0');
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_UART_RxCpltCallback+0x68>)
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	3b30      	subs	r3, #48	; 0x30
 8002644:	2264      	movs	r2, #100	; 0x64
 8002646:	fb02 f103 	mul.w	r1, r2, r3
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_UART_RxCpltCallback+0x68>)
 800264c:	789b      	ldrb	r3, [r3, #2]
 800264e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	18ca      	adds	r2, r1, r3
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_UART_RxCpltCallback+0x68>)
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	3b30      	subs	r3, #48	; 0x30
 8002662:	4413      	add	r3, r2
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_UART_RxCpltCallback+0x78>)
 8002666:	6013      	str	r3, [r2, #0]
		flag = 1;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_UART_RxCpltCallback+0x70>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 4);
 800266e:	2204      	movs	r2, #4
 8002670:	4903      	ldr	r1, [pc, #12]	; (8002680 <HAL_UART_RxCpltCallback+0x68>)
 8002672:	4804      	ldr	r0, [pc, #16]	; (8002684 <HAL_UART_RxCpltCallback+0x6c>)
 8002674:	f005 fd79 	bl	800816a <HAL_UART_Receive_IT>

}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200004c8 	.word	0x200004c8
 8002684:	20000470 	.word	0x20000470
 8002688:	200004f8 	.word	0x200004f8
 800268c:	200005a4 	.word	0x200005a4
 8002690:	200005a8 	.word	0x200005a8
 8002694:	00000000 	.word	0x00000000

08002698 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

	htim1.Instance -> CCR4 = 150;
 80026a0:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <StartDefaultTask+0xf8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2296      	movs	r2, #150	; 0x96
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

  for(;;)
  {

	  HCSR04_Read();
 80026a8:	f7ff ff96 	bl	80025d8 <HCSR04_Read>

	  HAL_ADC_Start(&hadc1);
 80026ac:	4839      	ldr	r0, [pc, #228]	; (8002794 <StartDefaultTask+0xfc>)
 80026ae:	f001 f92d 	bl	800390c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80026b2:	210a      	movs	r1, #10
 80026b4:	4837      	ldr	r0, [pc, #220]	; (8002794 <StartDefaultTask+0xfc>)
 80026b6:	f001 fa2e 	bl	8003b16 <HAL_ADC_PollForConversion>
	  ir1 = HAL_ADC_GetValue(&hadc1);
 80026ba:	4836      	ldr	r0, [pc, #216]	; (8002794 <StartDefaultTask+0xfc>)
 80026bc:	f001 fab6 	bl	8003c2c <HAL_ADC_GetValue>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4a35      	ldr	r2, [pc, #212]	; (8002798 <StartDefaultTask+0x100>)
 80026c4:	6013      	str	r3, [r2, #0]
	  ir1_dist = roundf(-14.16*log(ir1)+122.67);
 80026c6:	4b34      	ldr	r3, [pc, #208]	; (8002798 <StartDefaultTask+0x100>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff1a 	bl	8000504 <__aeabi_ui2d>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	ec43 2b10 	vmov	d0, r2, r3
 80026d8:	f00c fc86 	bl	800efe8 <log>
 80026dc:	ec51 0b10 	vmov	r0, r1, d0
 80026e0:	a327      	add	r3, pc, #156	; (adr r3, 8002780 <StartDefaultTask+0xe8>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd ff87 	bl	80005f8 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	a325      	add	r3, pc, #148	; (adr r3, 8002788 <StartDefaultTask+0xf0>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd fdc8 	bl	800028c <__adddf3>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe fa70 	bl	8000be8 <__aeabi_d2f>
 8002708:	4603      	mov	r3, r0
 800270a:	ee00 3a10 	vmov	s0, r3
 800270e:	f00c fc45 	bl	800ef9c <roundf>
 8002712:	eef0 7a40 	vmov.f32	s15, s0
 8002716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271a:	ee17 2a90 	vmov	r2, s15
 800271e:	4b1f      	ldr	r3, [pc, #124]	; (800279c <StartDefaultTask+0x104>)
 8002720:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8002722:	481c      	ldr	r0, [pc, #112]	; (8002794 <StartDefaultTask+0xfc>)
 8002724:	f001 f9c4 	bl	8003ab0 <HAL_ADC_Stop>

	  sprintf(hello,"IR Dist:%dcm",ir1_dist);
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <StartDefaultTask+0x104>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	491c      	ldr	r1, [pc, #112]	; (80027a0 <StartDefaultTask+0x108>)
 8002730:	481c      	ldr	r0, [pc, #112]	; (80027a4 <StartDefaultTask+0x10c>)
 8002732:	f00a f9c7 	bl	800cac4 <siprintf>
	  OLED_ShowString(10,20,hello);
 8002736:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <StartDefaultTask+0x10c>)
 8002738:	2114      	movs	r1, #20
 800273a:	200a      	movs	r0, #10
 800273c:	f009 fc5a 	bl	800bff4 <OLED_ShowString>

	  sprintf(yay, "US Dist:%dcm",us_dist);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <StartDefaultTask+0x110>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4919      	ldr	r1, [pc, #100]	; (80027ac <StartDefaultTask+0x114>)
 8002748:	4819      	ldr	r0, [pc, #100]	; (80027b0 <StartDefaultTask+0x118>)
 800274a:	f00a f9bb 	bl	800cac4 <siprintf>
	  OLED_ShowString(10,30,yay);
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <StartDefaultTask+0x118>)
 8002750:	211e      	movs	r1, #30
 8002752:	200a      	movs	r0, #10
 8002754:	f009 fc4e 	bl	800bff4 <OLED_ShowString>

	  sprintf(bye,"Travel:%dcm",travel);
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <StartDefaultTask+0x11c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4916      	ldr	r1, [pc, #88]	; (80027b8 <StartDefaultTask+0x120>)
 8002760:	4816      	ldr	r0, [pc, #88]	; (80027bc <StartDefaultTask+0x124>)
 8002762:	f00a f9af 	bl	800cac4 <siprintf>
	  OLED_ShowString(10,40,bye);
 8002766:	4a15      	ldr	r2, [pc, #84]	; (80027bc <StartDefaultTask+0x124>)
 8002768:	2128      	movs	r1, #40	; 0x28
 800276a:	200a      	movs	r0, #10
 800276c:	f009 fc42 	bl	800bff4 <OLED_ShowString>

	  OLED_Refresh_Gram();
 8002770:	f009 facc 	bl	800bd0c <OLED_Refresh_Gram>
	  osDelay(5);
 8002774:	2005      	movs	r0, #5
 8002776:	f006 fdad 	bl	80092d4 <osDelay>
  {
 800277a:	e795      	b.n	80026a8 <StartDefaultTask+0x10>
 800277c:	f3af 8000 	nop.w
 8002780:	851eb852 	.word	0x851eb852
 8002784:	c02c51eb 	.word	0xc02c51eb
 8002788:	47ae147b 	.word	0x47ae147b
 800278c:	405eaae1 	.word	0x405eaae1
 8002790:	20000308 	.word	0x20000308
 8002794:	2000020c 	.word	0x2000020c
 8002798:	20000594 	.word	0x20000594
 800279c:	20000598 	.word	0x20000598
 80027a0:	0800f448 	.word	0x0800f448
 80027a4:	200004fc 	.word	0x200004fc
 80027a8:	2000059c 	.word	0x2000059c
 80027ac:	0800f458 	.word	0x0800f458
 80027b0:	2000054c 	.word	0x2000054c
 80027b4:	200005a0 	.word	0x200005a0
 80027b8:	0800f468 	.word	0x0800f468
 80027bc:	20000524 	.word	0x20000524

080027c0 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	//motorLeft(90);

	while(1){

	if(flag){
 80027c8:	4bb5      	ldr	r3, [pc, #724]	; (8002aa0 <encoder_task+0x2e0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 81a4 	beq.w	8002b1a <encoder_task+0x35a>
//		gyroInit();
//		osDelay(100);
		if(direction == 'w'){
 80027d2:	4bb4      	ldr	r3, [pc, #720]	; (8002aa4 <encoder_task+0x2e4>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b77      	cmp	r3, #119	; 0x77
 80027d8:	d10c      	bne.n	80027f4 <encoder_task+0x34>
			global_angle = 0;
 80027da:	49b3      	ldr	r1, [pc, #716]	; (8002aa8 <encoder_task+0x2e8>)
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9c1 2300 	strd	r2, r3, [r1]
			motorForwardA(magnitude, 1);
 80027e8:	4bb0      	ldr	r3, [pc, #704]	; (8002aac <encoder_task+0x2ec>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fcb2 	bl	8001158 <motorForwardA>
		}

		if (direction == 'b'){
 80027f4:	4bab      	ldr	r3, [pc, #684]	; (8002aa4 <encoder_task+0x2e4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b62      	cmp	r3, #98	; 0x62
 80027fa:	d10b      	bne.n	8002814 <encoder_task+0x54>
			global_angle = 0;
 80027fc:	49aa      	ldr	r1, [pc, #680]	; (8002aa8 <encoder_task+0x2e8>)
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9c1 2300 	strd	r2, r3, [r1]
			motorBackA(magnitude);
 800280a:	4ba8      	ldr	r3, [pc, #672]	; (8002aac <encoder_task+0x2ec>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f8e0 	bl	80019d4 <motorBackA>
		}

		if(direction == 'f'){
 8002814:	4ba3      	ldr	r3, [pc, #652]	; (8002aa4 <encoder_task+0x2e4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b66      	cmp	r3, #102	; 0x66
 800281a:	d111      	bne.n	8002840 <encoder_task+0x80>
			global_angle = 0;
 800281c:	49a2      	ldr	r1, [pc, #648]	; (8002aa8 <encoder_task+0x2e8>)
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9c1 2300 	strd	r2, r3, [r1]
			motorForwardA(200,0);
 800282a:	2100      	movs	r1, #0
 800282c:	20c8      	movs	r0, #200	; 0xc8
 800282e:	f7fe fc93 	bl	8001158 <motorForwardA>
			osDelay(500);
 8002832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002836:	f006 fd4d 	bl	80092d4 <osDelay>
			motorBackA(22);
 800283a:	2016      	movs	r0, #22
 800283c:	f7ff f8ca 	bl	80019d4 <motorBackA>

		}

		if(direction == 's'){
 8002840:	4b98      	ldr	r3, [pc, #608]	; (8002aa4 <encoder_task+0x2e4>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b73      	cmp	r3, #115	; 0x73
 8002846:	d108      	bne.n	800285a <encoder_task+0x9a>
			dir = -1;
 8002848:	4b99      	ldr	r3, [pc, #612]	; (8002ab0 <encoder_task+0x2f0>)
 800284a:	f04f 32ff 	mov.w	r2, #4294967295
 800284e:	601a      	str	r2, [r3, #0]
         	motorBack(magnitude);
 8002850:	4b96      	ldr	r3, [pc, #600]	; (8002aac <encoder_task+0x2ec>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff f8a7 	bl	80019a8 <motorBack>
		}

		if(direction == 'a'){
 800285a:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <encoder_task+0x2e4>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b61      	cmp	r3, #97	; 0x61
 8002860:	d10b      	bne.n	800287a <encoder_task+0xba>
			global_angle = 0;
 8002862:	4991      	ldr	r1, [pc, #580]	; (8002aa8 <encoder_task+0x2e8>)
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9c1 2300 	strd	r2, r3, [r1]
			motorLeft(magnitude);
 8002870:	4b8e      	ldr	r3, [pc, #568]	; (8002aac <encoder_task+0x2ec>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fee3 	bl	8001640 <motorLeft>
		}

		if(direction == 'd'){
 800287a:	4b8a      	ldr	r3, [pc, #552]	; (8002aa4 <encoder_task+0x2e4>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d10b      	bne.n	800289a <encoder_task+0xda>
			global_angle = 0;
 8002882:	4989      	ldr	r1, [pc, #548]	; (8002aa8 <encoder_task+0x2e8>)
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9c1 2300 	strd	r2, r3, [r1]
			motorRight(magnitude);
 8002890:	4b86      	ldr	r3, [pc, #536]	; (8002aac <encoder_task+0x2ec>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fe79 	bl	800158c <motorRight>
		}

		if(direction == 'q'){
 800289a:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <encoder_task+0x2e4>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b71      	cmp	r3, #113	; 0x71
 80028a0:	d10b      	bne.n	80028ba <encoder_task+0xfa>
			global_angle = 0;
 80028a2:	4981      	ldr	r1, [pc, #516]	; (8002aa8 <encoder_task+0x2e8>)
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9c1 2300 	strd	r2, r3, [r1]
			motorLeftB(magnitude);
 80028b0:	4b7e      	ldr	r3, [pc, #504]	; (8002aac <encoder_task+0x2ec>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe ff71 	bl	800179c <motorLeftB>
		}

		if(direction == 'e'){
 80028ba:	4b7a      	ldr	r3, [pc, #488]	; (8002aa4 <encoder_task+0x2e4>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b65      	cmp	r3, #101	; 0x65
 80028c0:	d10b      	bne.n	80028da <encoder_task+0x11a>
			global_angle = 0;
 80028c2:	4979      	ldr	r1, [pc, #484]	; (8002aa8 <encoder_task+0x2e8>)
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9c1 2300 	strd	r2, r3, [r1]
			motorRightB(magnitude);
 80028d0:	4b76      	ldr	r3, [pc, #472]	; (8002aac <encoder_task+0x2ec>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe ff09 	bl	80016ec <motorRightB>
		}

		if(direction == 'j'){
 80028da:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <encoder_task+0x2e4>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b6a      	cmp	r3, #106	; 0x6a
 80028e0:	d12b      	bne.n	800293a <encoder_task+0x17a>
			// 1st obstacle left turn
			global_angle = 0;
 80028e2:	4971      	ldr	r1, [pc, #452]	; (8002aa8 <encoder_task+0x2e8>)
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9c1 2300 	strd	r2, r3, [r1]
			motorLeftB(55);
 80028f0:	2037      	movs	r0, #55	; 0x37
 80028f2:	f7fe ff53 	bl	800179c <motorLeftB>
			motorRight(119);
 80028f6:	2077      	movs	r0, #119	; 0x77
 80028f8:	f7fe fe48 	bl	800158c <motorRight>
			motorLeftB(28);
 80028fc:	201c      	movs	r0, #28
 80028fe:	f7fe ff4d 	bl	800179c <motorLeftB>
			backRight(28);
 8002902:	201c      	movs	r0, #28
 8002904:	f7fe ff9e 	bl	8001844 <backRight>
			motorForwardB(21,1);
 8002908:	2101      	movs	r1, #1
 800290a:	2015      	movs	r0, #21
 800290c:	f7fe fd14 	bl	8001338 <motorForwardB>
			osDelay(200);
 8002910:	20c8      	movs	r0, #200	; 0xc8
 8002912:	f006 fcdf 	bl	80092d4 <osDelay>
			motorBackA(25);
 8002916:	2019      	movs	r0, #25
 8002918:	f7ff f85c 	bl	80019d4 <motorBackA>
			osDelay(100);
 800291c:	2064      	movs	r0, #100	; 0x64
 800291e:	f006 fcd9 	bl	80092d4 <osDelay>
			us_dist_obst = us_dist;
 8002922:	4b64      	ldr	r3, [pc, #400]	; (8002ab4 <encoder_task+0x2f4>)
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <encoder_task+0x2f8>)
 8002928:	701a      	strb	r2, [r3, #0]
			if (us_dist_obst > 80)
 800292a:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <encoder_task+0x2f8>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b50      	cmp	r3, #80	; 0x50
 8002930:	d903      	bls.n	800293a <encoder_task+0x17a>
			{
				motorForwardB(31,1);
 8002932:	2101      	movs	r1, #1
 8002934:	201f      	movs	r0, #31
 8002936:	f7fe fcff 	bl	8001338 <motorForwardB>
			}
		}

		if(direction == 'k'){
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <encoder_task+0x2e4>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b6b      	cmp	r3, #107	; 0x6b
 8002940:	d12b      	bne.n	800299a <encoder_task+0x1da>
			// 1st obstacle right turn
			global_angle = 0;
 8002942:	4959      	ldr	r1, [pc, #356]	; (8002aa8 <encoder_task+0x2e8>)
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9c1 2300 	strd	r2, r3, [r1]
			motorRightB(54);
 8002950:	2036      	movs	r0, #54	; 0x36
 8002952:	f7fe fecb 	bl	80016ec <motorRightB>
			motorLeft(119);
 8002956:	2077      	movs	r0, #119	; 0x77
 8002958:	f7fe fe72 	bl	8001640 <motorLeft>
			motorRightB(25);
 800295c:	2019      	movs	r0, #25
 800295e:	f7fe fec5 	bl	80016ec <motorRightB>
			backLeft(29);
 8002962:	201d      	movs	r0, #29
 8002964:	f7fe ffc6 	bl	80018f4 <backLeft>
			motorForwardB(21,1);
 8002968:	2101      	movs	r1, #1
 800296a:	2015      	movs	r0, #21
 800296c:	f7fe fce4 	bl	8001338 <motorForwardB>
			osDelay(200);
 8002970:	20c8      	movs	r0, #200	; 0xc8
 8002972:	f006 fcaf 	bl	80092d4 <osDelay>
			motorBackA(25);
 8002976:	2019      	movs	r0, #25
 8002978:	f7ff f82c 	bl	80019d4 <motorBackA>
			osDelay(100);
 800297c:	2064      	movs	r0, #100	; 0x64
 800297e:	f006 fca9 	bl	80092d4 <osDelay>
			us_dist_obst = us_dist;
 8002982:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <encoder_task+0x2f4>)
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <encoder_task+0x2f8>)
 8002988:	701a      	strb	r2, [r3, #0]
			if (us_dist_obst > 80)
 800298a:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <encoder_task+0x2f8>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b50      	cmp	r3, #80	; 0x50
 8002990:	d903      	bls.n	800299a <encoder_task+0x1da>
			{
				motorForwardB(31,1);
 8002992:	2101      	movs	r1, #1
 8002994:	201f      	movs	r0, #31
 8002996:	f7fe fccf 	bl	8001338 <motorForwardB>
			}
		}

		if(direction == 'n'){
 800299a:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <encoder_task+0x2e4>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b6e      	cmp	r3, #110	; 0x6e
 80029a0:	d14c      	bne.n	8002a3c <encoder_task+0x27c>

			// 2nd obstacle left turn
			global_angle = 0;
 80029a2:	4941      	ldr	r1, [pc, #260]	; (8002aa8 <encoder_task+0x2e8>)
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9c1 2300 	strd	r2, r3, [r1]
			motorForwardA(200,1);
 80029b0:	2101      	movs	r1, #1
 80029b2:	20c8      	movs	r0, #200	; 0xc8
 80029b4:	f7fe fbd0 	bl	8001158 <motorForwardA>
			osDelay(100);
 80029b8:	2064      	movs	r0, #100	; 0x64
 80029ba:	f006 fc8b 	bl	80092d4 <osDelay>
			motorBackA(30);
 80029be:	201e      	movs	r0, #30
 80029c0:	f7ff f808 	bl	80019d4 <motorBackA>
			motorLeftB(88);
 80029c4:	2058      	movs	r0, #88	; 0x58
 80029c6:	f7fe fee9 	bl	800179c <motorLeftB>
			motorForwardA(10,0);
 80029ca:	2100      	movs	r1, #0
 80029cc:	200a      	movs	r0, #10
 80029ce:	f7fe fbc3 	bl	8001158 <motorForwardA>
//			motorForwardA(40,0);
//			osDelay(100);
//			motorBackA(37);
			//motorRightB(209);
			motorRight(195);
 80029d2:	20c3      	movs	r0, #195	; 0xc3
 80029d4:	f7fe fdda 	bl	800158c <motorRight>
			motorForwardB(55,1);
 80029d8:	2101      	movs	r1, #1
 80029da:	2037      	movs	r0, #55	; 0x37
 80029dc:	f7fe fcac 	bl	8001338 <motorForwardB>
			//motorForwardA(60,0);
			//motorBackA(40);
			motorRightB(92);
 80029e0:	205c      	movs	r0, #92	; 0x5c
 80029e2:	f7fe fe83 	bl	80016ec <motorRightB>
			if (us_dist_obst > 50)
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <encoder_task+0x2f8>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b32      	cmp	r3, #50	; 0x32
 80029ec:	d907      	bls.n	80029fe <encoder_task+0x23e>
			{
				motorForwardB(us_dist_obst+80,1);
 80029ee:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <encoder_task+0x2f8>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	3350      	adds	r3, #80	; 0x50
 80029f4:	2101      	movs	r1, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fc9e 	bl	8001338 <motorForwardB>
 80029fc:	e006      	b.n	8002a0c <encoder_task+0x24c>
			}
			else
			{
				motorForwardB(us_dist_obst+57,1);
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <encoder_task+0x2f8>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	3339      	adds	r3, #57	; 0x39
 8002a04:	2101      	movs	r1, #1
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fc96 	bl	8001338 <motorForwardB>
			}
			motorRightB(89);
 8002a0c:	2059      	movs	r0, #89	; 0x59
 8002a0e:	f7fe fe6d 	bl	80016ec <motorRightB>
			motorForwardB(10,1);
 8002a12:	2101      	movs	r1, #1
 8002a14:	200a      	movs	r0, #10
 8002a16:	f7fe fc8f 	bl	8001338 <motorForwardB>
			motorLeftB(89);
 8002a1a:	2059      	movs	r0, #89	; 0x59
 8002a1c:	f7fe febe 	bl	800179c <motorLeftB>
			motorForwardA(150,0);
 8002a20:	2100      	movs	r1, #0
 8002a22:	2096      	movs	r0, #150	; 0x96
 8002a24:	f7fe fb98 	bl	8001158 <motorForwardA>
			osDelay(100);
 8002a28:	2064      	movs	r0, #100	; 0x64
 8002a2a:	f006 fc53 	bl	80092d4 <osDelay>
			motorBackA(25);
 8002a2e:	2019      	movs	r0, #25
 8002a30:	f7fe ffd0 	bl	80019d4 <motorBackA>
			motorForwardB(11,1);
 8002a34:	2101      	movs	r1, #1
 8002a36:	200b      	movs	r0, #11
 8002a38:	f7fe fc7e 	bl	8001338 <motorForwardB>

		}

		if(direction == 'm'){
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <encoder_task+0x2e4>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b6d      	cmp	r3, #109	; 0x6d
 8002a42:	d15a      	bne.n	8002afa <encoder_task+0x33a>

			// 2nd obstacle right turn
			global_angle = 0;
 8002a44:	4918      	ldr	r1, [pc, #96]	; (8002aa8 <encoder_task+0x2e8>)
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9c1 2300 	strd	r2, r3, [r1]
			motorForwardA(150,1);
 8002a52:	2101      	movs	r1, #1
 8002a54:	2096      	movs	r0, #150	; 0x96
 8002a56:	f7fe fb7f 	bl	8001158 <motorForwardA>
			osDelay(100);
 8002a5a:	2064      	movs	r0, #100	; 0x64
 8002a5c:	f006 fc3a 	bl	80092d4 <osDelay>
			motorBackA(30);
 8002a60:	201e      	movs	r0, #30
 8002a62:	f7fe ffb7 	bl	80019d4 <motorBackA>
			motorRightB(90);
 8002a66:	205a      	movs	r0, #90	; 0x5a
 8002a68:	f7fe fe40 	bl	80016ec <motorRightB>
			motorForwardA(10,0);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	200a      	movs	r0, #10
 8002a70:	f7fe fb72 	bl	8001158 <motorForwardA>
//			motorForwardA(40,0);
//			osDelay(100);
//			motorBackA(35);
			//motorLeftB(209);
			motorLeft(206);
 8002a74:	20ce      	movs	r0, #206	; 0xce
 8002a76:	f7fe fde3 	bl	8001640 <motorLeft>
			motorForwardB(55,1);
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	2037      	movs	r0, #55	; 0x37
 8002a7e:	f7fe fc5b 	bl	8001338 <motorForwardB>
			//motorForwardA(60,0);
			//motorBackA(40);
			motorLeftB(88);
 8002a82:	2058      	movs	r0, #88	; 0x58
 8002a84:	f7fe fe8a 	bl	800179c <motorLeftB>
			if (us_dist_obst > 50)
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <encoder_task+0x2f8>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b32      	cmp	r3, #50	; 0x32
 8002a8e:	d915      	bls.n	8002abc <encoder_task+0x2fc>
			{
				motorForwardB(us_dist_obst+80,1);
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <encoder_task+0x2f8>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	3350      	adds	r3, #80	; 0x50
 8002a96:	2101      	movs	r1, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe fc4d 	bl	8001338 <motorForwardB>
 8002a9e:	e014      	b.n	8002aca <encoder_task+0x30a>
 8002aa0:	200004f8 	.word	0x200004f8
 8002aa4:	200005a4 	.word	0x200005a4
 8002aa8:	20000588 	.word	0x20000588
 8002aac:	200005a8 	.word	0x200005a8
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	2000059c 	.word	0x2000059c
 8002ab8:	2000059d 	.word	0x2000059d
			}
			else
			{
				motorForwardB(us_dist_obst+57,1);
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <encoder_task+0x364>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	3339      	adds	r3, #57	; 0x39
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fc37 	bl	8001338 <motorForwardB>
			}
			motorLeftB(87);
 8002aca:	2057      	movs	r0, #87	; 0x57
 8002acc:	f7fe fe66 	bl	800179c <motorLeftB>
			motorForwardB(10,1);
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f7fe fc30 	bl	8001338 <motorForwardB>
			motorRightB(90);
 8002ad8:	205a      	movs	r0, #90	; 0x5a
 8002ada:	f7fe fe07 	bl	80016ec <motorRightB>
			motorForwardA(150,0);
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2096      	movs	r0, #150	; 0x96
 8002ae2:	f7fe fb39 	bl	8001158 <motorForwardA>
			osDelay(100);
 8002ae6:	2064      	movs	r0, #100	; 0x64
 8002ae8:	f006 fbf4 	bl	80092d4 <osDelay>
			motorBackA(25);
 8002aec:	2019      	movs	r0, #25
 8002aee:	f7fe ff71 	bl	80019d4 <motorBackA>
			motorForwardB(11,1);
 8002af2:	2101      	movs	r1, #1
 8002af4:	200b      	movs	r0, #11
 8002af6:	f7fe fc1f 	bl	8001338 <motorForwardB>
//
//		if(direction == 't'){
//			progress = -1;
//		}

			magnitude = 0;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <encoder_task+0x368>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
			flag = 0;
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <encoder_task+0x36c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
			//direction = 'x';
			uint8_t ch = '$';
 8002b06:	2324      	movs	r3, #36	; 0x24
 8002b08:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF);
 8002b0a:	f107 010f 	add.w	r1, r7, #15
 8002b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b12:	2201      	movs	r2, #1
 8002b14:	4806      	ldr	r0, [pc, #24]	; (8002b30 <encoder_task+0x370>)
 8002b16:	f005 fa96 	bl	8008046 <HAL_UART_Transmit>
		}
	osDelayUntil(200);
 8002b1a:	20c8      	movs	r0, #200	; 0xc8
 8002b1c:	f006 fbf5 	bl	800930a <osDelayUntil>
	if(flag){
 8002b20:	e652      	b.n	80027c8 <encoder_task+0x8>
 8002b22:	bf00      	nop
 8002b24:	2000059d 	.word	0x2000059d
 8002b28:	200005a8 	.word	0x200005a8
 8002b2c:	200004f8 	.word	0x200004f8
 8002b30:	20000470 	.word	0x20000470

08002b34 <motorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motorTask */
void motorTask(void *argument)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b09a      	sub	sp, #104	; 0x68
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motorTask */



	int dirL;
	double prevErrorL = 0;
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double LInt = 0;
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	int dirR;
	double prevErrorR = 0;
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double RInt = 0;
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	int pwmA = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
	int pwmB = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	65bb      	str	r3, [r7, #88]	; 0x58



			int cnt2, diff;
			int cnt2b, diffb;
			cnt2 = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
			cnt2b = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	623b      	str	r3, [r7, #32]


			uint32_t tick = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GetTick() - tick >= 10){
 8002b80:	f000 fe50 	bl	8003824 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b09      	cmp	r3, #9
 8002b8c:	f240 808e 	bls.w	8002cac <motorTask+0x178>
		  cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002b90:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <motorTask+0x180>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
		  cnt2b =  __HAL_TIM_GET_COUNTER(&htim3);
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <motorTask+0x184>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	623b      	str	r3, [r7, #32]
	  		  	  		 if(cnt2 > 32000){
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002ba6:	dd06      	ble.n	8002bb6 <motorTask+0x82>
	  		  	  			 dirL = 1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	667b      	str	r3, [r7, #100]	; 0x64

	  		  	  			  diff = (65536 - cnt2);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb4:	e004      	b.n	8002bc0 <motorTask+0x8c>


	  		  	  			  } else {
	  		  	  				  dirL = -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	667b      	str	r3, [r7, #100]	; 0x64




	  		  	  			  	 diff = cnt2;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	657b      	str	r3, [r7, #84]	; 0x54

	  		  	  		  }


	  		  			  if(cnt2b > 32000){
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002bc6:	dd07      	ble.n	8002bd8 <motorTask+0xa4>
	  		  				  dirR = -1;
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bcc:	663b      	str	r3, [r7, #96]	; 0x60


	  		  			  	  	diffb = (65536 - cnt2b);
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002bd4:	653b      	str	r3, [r7, #80]	; 0x50
 8002bd6:	e003      	b.n	8002be0 <motorTask+0xac>
	  		  			  } else {
	  		  				  dirR = 1;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	663b      	str	r3, [r7, #96]	; 0x60



	  		  			  	  	diffb = cnt2b;
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	653b      	str	r3, [r7, #80]	; 0x50
	  		  			  }

                          if(dirR == dir){
 8002be0:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <motorTask+0x188>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d106      	bne.n	8002bf8 <motorTask+0xc4>
	  		  			  total_distanceb += diffb;
 8002bea:	4b35      	ldr	r3, [pc, #212]	; (8002cc0 <motorTask+0x18c>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4a33      	ldr	r2, [pc, #204]	; (8002cc0 <motorTask+0x18c>)
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e005      	b.n	8002c04 <motorTask+0xd0>
                          } else {
                        	  total_distanceb -= diffb;
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <motorTask+0x18c>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	4a2f      	ldr	r2, [pc, #188]	; (8002cc0 <motorTask+0x18c>)
 8002c02:	6013      	str	r3, [r2, #0]
                          }

                          if(dirL == dir){
 8002c04:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <motorTask+0x188>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d106      	bne.n	8002c1c <motorTask+0xe8>
	  		  			  total_distancea += diff;
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <motorTask+0x190>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c14:	4413      	add	r3, r2
 8002c16:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <motorTask+0x190>)
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e005      	b.n	8002c28 <motorTask+0xf4>
                          } else {
                        	  total_distancea -= diff;
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <motorTask+0x190>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <motorTask+0x190>)
 8002c26:	6013      	str	r3, [r2, #0]
                          }

	  		  			  //speedA = 60000*dirL*(diff/1320.0)/(double)(HAL_GetTick() - tick);
	  		  			  //speedB = 60000*dirR*(diffb/1320.0)/(double)(HAL_GetTick() - tick);
	  		  			  pwmA = motorOnA;
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <motorTask+0x194>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  			  pwmB = motorOnB;
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <motorTask+0x198>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	65bb      	str	r3, [r7, #88]	; 0x58

	  		  			  if(pwmA < 0) {
 8002c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	da05      	bge.n	8002c46 <motorTask+0x112>
	  		  				  motorAReverse();
 8002c3a:	f7fe f9c9 	bl	8000fd0 <motorAReverse>
	  		  				  pwmA = -1*pwmA;
 8002c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c40:	425b      	negs	r3, r3
 8002c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c44:	e001      	b.n	8002c4a <motorTask+0x116>
	  		  			  } else {
	  		  				  motorAForward();
 8002c46:	f7fe f9b3 	bl	8000fb0 <motorAForward>
	  		  			  }

	  		  			  if(pwmB < 0){
 8002c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da05      	bge.n	8002c5c <motorTask+0x128>
	  		  				  motorBReverse();
 8002c50:	f7fe f9de 	bl	8001010 <motorBReverse>
	  		  				  pwmB = -1*pwmB;
 8002c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c56:	425b      	negs	r3, r3
 8002c58:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c5a:	e001      	b.n	8002c60 <motorTask+0x12c>
	  		  			  } else {
	  		  				  motorBForward();
 8002c5c:	f7fe f9c8 	bl	8000ff0 <motorBForward>
	  		  			  }



	  		  			  if(pwmA >= 7000){
 8002c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c62:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002c66:	4293      	cmp	r3, r2
 8002c68:	dd02      	ble.n	8002c70 <motorTask+0x13c>
	  		  				  pwmA = 7000;
 8002c6a:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  			  }

	  		  			  if(pwmB >= 7000){
 8002c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c72:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002c76:	4293      	cmp	r3, r2
 8002c78:	dd02      	ble.n	8002c80 <motorTask+0x14c>
	  		  				  pwmB = 7000;
 8002c7a:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002c7e:	65bb      	str	r3, [r7, #88]	; 0x58
	  		  			  }



	  		  			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmA);
 8002c80:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <motorTask+0x19c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
	  		  			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmB);
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <motorTask+0x19c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38

	  		  			if(motorOnA == 0 && motorOnB == 0){
 8002c90:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <motorTask+0x194>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
	  		  				//total_distancea = 0;
	  		  				//total_distanceb = 0;
	  		  				//total_angle = 0;

	  		  			}
	  			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <motorTask+0x180>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
	  			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <motorTask+0x184>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
	  			tick = HAL_GetTick();
 8002ca6:	f000 fdbd 	bl	8003824 <HAL_GetTick>
 8002caa:	64f8      	str	r0, [r7, #76]	; 0x4c

	  }


	  osDelayUntil(10);
 8002cac:	200a      	movs	r0, #10
 8002cae:	f006 fb2c 	bl	800930a <osDelayUntil>
	  if(HAL_GetTick() - tick >= 10){
 8002cb2:	e765      	b.n	8002b80 <motorTask+0x4c>
 8002cb4:	20000350 	.word	0x20000350
 8002cb8:	20000398 	.word	0x20000398
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000578 	.word	0x20000578
 8002cc4:	20000574 	.word	0x20000574
 8002cc8:	200004f0 	.word	0x200004f0
 8002ccc:	200004f4 	.word	0x200004f4
 8002cd0:	20000428 	.word	0x20000428
 8002cd4:	00000000 	.word	0x00000000

08002cd8 <gyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gyroTask */
void gyroTask(void *argument)
{
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gyroTask */
  /* Infinite loop */
	uint8_t val[2] = {0,0};
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	83bb      	strh	r3, [r7, #28]

	char hello[20];
	int16_t angular_speed = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	847b      	strh	r3, [r7, #34]	; 0x22



	uint32_t tick = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
	gyroInit();
 8002cec:	f7fe f9f0 	bl	80010d0 <gyroInit>
	int dir;
	int16_t offset = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	843b      	strh	r3, [r7, #32]





	tick = HAL_GetTick();
 8002cf4:	f000 fd96 	bl	8003824 <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	; 0x24
	osDelayUntil(10);
 8002cfa:	200a      	movs	r0, #10
 8002cfc:	f006 fb05 	bl	800930a <osDelayUntil>

  for(;;)
  {


      osDelayUntil(10);
 8002d00:	200a      	movs	r0, #10
 8002d02:	f006 fb02 	bl	800930a <osDelayUntil>

      if(HAL_GetTick() - tick >= 100){
 8002d06:	f000 fd8d 	bl	8003824 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b63      	cmp	r3, #99	; 0x63
 8002d12:	d9f5      	bls.n	8002d00 <gyroTask+0x28>
	  readByte(0x37, val);
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	4619      	mov	r1, r3
 8002d1a:	2037      	movs	r0, #55	; 0x37
 8002d1c:	f7fe f988 	bl	8001030 <readByte>
	  //osDelayUntil(1);
	  //angular_speed = ((int16_t)((int8_t)val[0]))*256 +  (uint16_t)val[1];
	  angular_speed = (val[0] << 8) | val[1];
 8002d20:	7f3b      	ldrb	r3, [r7, #28]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	b21a      	sxth	r2, r3
 8002d26:	7f7b      	ldrb	r3, [r7, #29]
 8002d28:	b21b      	sxth	r3, r3
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	847b      	strh	r3, [r7, #34]	; 0x22




	  // Default Value = 0.5
	  total_angle +=(double)(angular_speed + 1.5)*((HAL_GetTick() - tick)/16400.0)*1.16;
 8002d2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fbf6 	bl	8000524 <__aeabi_i2d>
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <gyroTask+0x198>)
 8002d3e:	f7fd faa5 	bl	800028c <__adddf3>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4614      	mov	r4, r2
 8002d48:	461d      	mov	r5, r3
 8002d4a:	f000 fd6b 	bl	8003824 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fbd5 	bl	8000504 <__aeabi_ui2d>
 8002d5a:	a341      	add	r3, pc, #260	; (adr r3, 8002e60 <gyroTask+0x188>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fd74 	bl	800084c <__aeabi_ddiv>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	f7fd fc44 	bl	80005f8 <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	a33b      	add	r3, pc, #236	; (adr r3, 8002e68 <gyroTask+0x190>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	f7fd fc3b 	bl	80005f8 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <gyroTask+0x19c>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fa7c 	bl	800028c <__adddf3>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4936      	ldr	r1, [pc, #216]	; (8002e74 <gyroTask+0x19c>)
 8002d9a:	e9c1 2300 	strd	r2, r3, [r1]

	  global_angle += (double)(angular_speed + 1.5)*((HAL_GetTick() - tick)/16400.0)*1.16;
 8002d9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fbbe 	bl	8000524 <__aeabi_i2d>
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <gyroTask+0x198>)
 8002dae:	f7fd fa6d 	bl	800028c <__adddf3>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4614      	mov	r4, r2
 8002db8:	461d      	mov	r5, r3
 8002dba:	f000 fd33 	bl	8003824 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fb9d 	bl	8000504 <__aeabi_ui2d>
 8002dca:	a325      	add	r3, pc, #148	; (adr r3, 8002e60 <gyroTask+0x188>)
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f7fd fd3c 	bl	800084c <__aeabi_ddiv>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4629      	mov	r1, r5
 8002ddc:	f7fd fc0c 	bl	80005f8 <__aeabi_dmul>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	a31f      	add	r3, pc, #124	; (adr r3, 8002e68 <gyroTask+0x190>)
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f7fd fc03 	bl	80005f8 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <gyroTask+0x1a0>)
 8002dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e00:	f7fd fa44 	bl	800028c <__adddf3>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	491b      	ldr	r1, [pc, #108]	; (8002e78 <gyroTask+0x1a0>)
 8002e0a:	e9c1 2300 	strd	r2, r3, [r1]


	  //prevSpeed = angular_speed;
	  if(total_angle >= 720){
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <gyroTask+0x19c>)
 8002e10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <gyroTask+0x1a4>)
 8002e1a:	f7fd fe73 	bl	8000b04 <__aeabi_dcmpge>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d006      	beq.n	8002e32 <gyroTask+0x15a>
		  total_angle = 0;
 8002e24:	4913      	ldr	r1, [pc, #76]	; (8002e74 <gyroTask+0x19c>)
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  if(total_angle <= -720){
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <gyroTask+0x19c>)
 8002e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <gyroTask+0x1a8>)
 8002e3e:	f7fd fe57 	bl	8000af0 <__aeabi_dcmple>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <gyroTask+0x17e>
		  total_angle = 0;
 8002e48:	490a      	ldr	r1, [pc, #40]	; (8002e74 <gyroTask+0x19c>)
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9c1 2300 	strd	r2, r3, [r1]
	  }


	  tick = HAL_GetTick();
 8002e56:	f000 fce5 	bl	8003824 <HAL_GetTick>
 8002e5a:	6278      	str	r0, [r7, #36]	; 0x24
      osDelayUntil(10);
 8002e5c:	e750      	b.n	8002d00 <gyroTask+0x28>
 8002e5e:	bf00      	nop
 8002e60:	00000000 	.word	0x00000000
 8002e64:	40d00400 	.word	0x40d00400
 8002e68:	28f5c28f 	.word	0x28f5c28f
 8002e6c:	3ff28f5c 	.word	0x3ff28f5c
 8002e70:	3ff80000 	.word	0x3ff80000
 8002e74:	20000580 	.word	0x20000580
 8002e78:	20000588 	.word	0x20000588
 8002e7c:	40868000 	.word	0x40868000
 8002e80:	c0868000 	.word	0xc0868000

08002e84 <ultrasoundTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasoundTask */
void ultrasoundTask(void *argument)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasoundTask */
  /* Infinite loop */

	for(;;){
 8002e8c:	e7fe      	b.n	8002e8c <ultrasoundTask+0x8>
	...

08002e90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ea2:	f000 fcab 	bl	80037fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40001000 	.word	0x40001000

08002eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb8:	b672      	cpsid	i
}
 8002eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <Error_Handler+0x8>
	...

08002ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_MspInit+0x54>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <HAL_MspInit+0x54>)
 8002ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_MspInit+0x54>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_MspInit+0x54>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <HAL_MspInit+0x54>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_MspInit+0x54>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	210f      	movs	r1, #15
 8002f02:	f06f 0001 	mvn.w	r0, #1
 8002f06:	f001 f975 	bl	80041f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a3c      	ldr	r2, [pc, #240]	; (8003028 <HAL_ADC_MspInit+0x110>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d171      	bne.n	800301e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	; (800302c <HAL_ADC_MspInit+0x114>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a3a      	ldr	r2, [pc, #232]	; (800302c <HAL_ADC_MspInit+0x114>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <HAL_ADC_MspInit+0x114>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_ADC_MspInit+0x114>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a33      	ldr	r2, [pc, #204]	; (800302c <HAL_ADC_MspInit+0x114>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b31      	ldr	r3, [pc, #196]	; (800302c <HAL_ADC_MspInit+0x114>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_ADC_MspInit+0x114>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a2c      	ldr	r2, [pc, #176]	; (800302c <HAL_ADC_MspInit+0x114>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_ADC_MspInit+0x114>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f92:	2303      	movs	r3, #3
 8002f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4823      	ldr	r0, [pc, #140]	; (8003030 <HAL_ADC_MspInit+0x118>)
 8002fa2:	f001 fccd 	bl	8004940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002faa:	2303      	movs	r3, #3
 8002fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	481e      	ldr	r0, [pc, #120]	; (8003034 <HAL_ADC_MspInit+0x11c>)
 8002fba:	f001 fcc1 	bl	8004940 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_ADC_MspInit+0x124>)
 8002fc2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fdc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fe4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002fe8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003002:	480d      	ldr	r0, [pc, #52]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8003004:	f001 f920 	bl	8004248 <HAL_DMA_Init>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800300e:	f7ff ff51 	bl	8002eb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a08      	ldr	r2, [pc, #32]	; (8003038 <HAL_ADC_MspInit+0x120>)
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_ADC_MspInit+0x120>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40012000 	.word	0x40012000
 800302c:	40023800 	.word	0x40023800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020800 	.word	0x40020800
 8003038:	20000254 	.word	0x20000254
 800303c:	40026410 	.word	0x40026410

08003040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <HAL_I2C_MspInit+0x84>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d12c      	bne.n	80030bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_I2C_MspInit+0x88>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <HAL_I2C_MspInit+0x88>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_I2C_MspInit+0x88>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800307e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003084:	2312      	movs	r3, #18
 8003086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308c:	2303      	movs	r3, #3
 800308e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003090:	2304      	movs	r3, #4
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4619      	mov	r1, r3
 800309a:	480c      	ldr	r0, [pc, #48]	; (80030cc <HAL_I2C_MspInit+0x8c>)
 800309c:	f001 fc50 	bl	8004940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_I2C_MspInit+0x88>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <HAL_I2C_MspInit+0x88>)
 80030aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ae:	6413      	str	r3, [r2, #64]	; 0x40
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_I2C_MspInit+0x88>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030bc:	bf00      	nop
 80030be:	3728      	adds	r7, #40	; 0x28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40005400 	.word	0x40005400
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020400 	.word	0x40020400

080030d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	; 0x30
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a35      	ldr	r2, [pc, #212]	; (80031c4 <HAL_TIM_Base_MspInit+0xf4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d116      	bne.n	8003120 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a33      	ldr	r2, [pc, #204]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2105      	movs	r1, #5
 8003112:	2019      	movs	r0, #25
 8003114:	f001 f86e 	bl	80041f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003118:	2019      	movs	r0, #25
 800311a:	f001 f887 	bl	800422c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800311e:	e04d      	b.n	80031bc <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM4)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a29      	ldr	r2, [pc, #164]	; (80031cc <HAL_TIM_Base_MspInit+0xfc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d135      	bne.n	8003196 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 8003134:	f043 0304 	orr.w	r3, r3, #4
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 8003150:	f043 0308 	orr.w	r3, r3, #8
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8003162:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003174:	2302      	movs	r3, #2
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	4619      	mov	r1, r3
 800317e:	4814      	ldr	r0, [pc, #80]	; (80031d0 <HAL_TIM_Base_MspInit+0x100>)
 8003180:	f001 fbde 	bl	8004940 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003184:	2200      	movs	r2, #0
 8003186:	2105      	movs	r1, #5
 8003188:	201e      	movs	r0, #30
 800318a:	f001 f833 	bl	80041f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800318e:	201e      	movs	r0, #30
 8003190:	f001 f84c 	bl	800422c <HAL_NVIC_EnableIRQ>
}
 8003194:	e012      	b.n	80031bc <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <HAL_TIM_Base_MspInit+0x104>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d10d      	bne.n	80031bc <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	6453      	str	r3, [r2, #68]	; 0x44
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_TIM_Base_MspInit+0xf8>)
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	bf00      	nop
 80031be:	3730      	adds	r7, #48	; 0x30
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40020c00 	.word	0x40020c00
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f8:	d14b      	bne.n	8003292 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a3e      	ldr	r2, [pc, #248]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b3c      	ldr	r3, [pc, #240]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a37      	ldr	r2, [pc, #220]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b35      	ldr	r3, [pc, #212]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a30      	ldr	r2, [pc, #192]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800324e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325c:	2300      	movs	r3, #0
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003260:	2301      	movs	r3, #1
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003264:	f107 031c 	add.w	r3, r7, #28
 8003268:	4619      	mov	r1, r3
 800326a:	4825      	ldr	r0, [pc, #148]	; (8003300 <HAL_TIM_Encoder_MspInit+0x128>)
 800326c:	f001 fb68 	bl	8004940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003270:	2308      	movs	r3, #8
 8003272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003280:	2301      	movs	r3, #1
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	4619      	mov	r1, r3
 800328a:	481e      	ldr	r0, [pc, #120]	; (8003304 <HAL_TIM_Encoder_MspInit+0x12c>)
 800328c:	f001 fb58 	bl	8004940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003290:	e030      	b.n	80032f4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_TIM_Encoder_MspInit+0x130>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d12b      	bne.n	80032f4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	6413      	str	r3, [r2, #64]	; 0x40
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6313      	str	r3, [r2, #48]	; 0x30
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_TIM_Encoder_MspInit+0x124>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032d4:	23c0      	movs	r3, #192	; 0xc0
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d8:	2302      	movs	r3, #2
 80032da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032e4:	2302      	movs	r3, #2
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	f107 031c 	add.w	r3, r7, #28
 80032ec:	4619      	mov	r1, r3
 80032ee:	4804      	ldr	r0, [pc, #16]	; (8003300 <HAL_TIM_Encoder_MspInit+0x128>)
 80032f0:	f001 fb26 	bl	8004940 <HAL_GPIO_Init>
}
 80032f4:	bf00      	nop
 80032f6:	3730      	adds	r7, #48	; 0x30
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	40020000 	.word	0x40020000
 8003304:	40020400 	.word	0x40020400
 8003308:	40000400 	.word	0x40000400

0800330c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a24      	ldr	r2, [pc, #144]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d11f      	bne.n	800336e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <HAL_TIM_MspPostInit+0xb4>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <HAL_TIM_MspPostInit+0xb4>)
 8003338:	f043 0310 	orr.w	r3, r3, #16
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <HAL_TIM_MspPostInit+0xb4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800334a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800334e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800335c:	2301      	movs	r3, #1
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4619      	mov	r1, r3
 8003366:	4817      	ldr	r0, [pc, #92]	; (80033c4 <HAL_TIM_MspPostInit+0xb8>)
 8003368:	f001 faea 	bl	8004940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800336c:	e022      	b.n	80033b4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <HAL_TIM_MspPostInit+0xbc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d11d      	bne.n	80033b4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_TIM_MspPostInit+0xb4>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <HAL_TIM_MspPostInit+0xb4>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6313      	str	r3, [r2, #48]	; 0x30
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <HAL_TIM_MspPostInit+0xb4>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003394:	23c0      	movs	r3, #192	; 0xc0
 8003396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80033a4:	2303      	movs	r3, #3
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	4619      	mov	r1, r3
 80033ae:	4807      	ldr	r0, [pc, #28]	; (80033cc <HAL_TIM_MspPostInit+0xc0>)
 80033b0:	f001 fac6 	bl	8004940 <HAL_GPIO_Init>
}
 80033b4:	bf00      	nop
 80033b6:	3728      	adds	r7, #40	; 0x28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40010400 	.word	0x40010400
 80033cc:	40020800 	.word	0x40020800

080033d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_UART_MspInit+0x94>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d134      	bne.n	800345c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <HAL_UART_MspInit+0x98>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <HAL_UART_MspInit+0x98>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_UART_MspInit+0x98>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_UART_MspInit+0x98>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_UART_MspInit+0x98>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_UART_MspInit+0x98>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800342a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800342e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003438:	2303      	movs	r3, #3
 800343a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800343c:	2307      	movs	r3, #7
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	4619      	mov	r1, r3
 8003446:	4809      	ldr	r0, [pc, #36]	; (800346c <HAL_UART_MspInit+0x9c>)
 8003448:	f001 fa7a 	bl	8004940 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800344c:	2200      	movs	r2, #0
 800344e:	2105      	movs	r1, #5
 8003450:	2027      	movs	r0, #39	; 0x27
 8003452:	f000 fecf 	bl	80041f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003456:	2027      	movs	r0, #39	; 0x27
 8003458:	f000 fee8 	bl	800422c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40004800 	.word	0x40004800
 8003468:	40023800 	.word	0x40023800
 800346c:	40020800 	.word	0x40020800

08003470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	; 0x30
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003480:	2200      	movs	r2, #0
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	2036      	movs	r0, #54	; 0x36
 8003486:	f000 feb5 	bl	80041f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800348a:	2036      	movs	r0, #54	; 0x36
 800348c:	f000 fece 	bl	800422c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <HAL_InitTick+0xa4>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_InitTick+0xa4>)
 800349a:	f043 0310 	orr.w	r3, r3, #16
 800349e:	6413      	str	r3, [r2, #64]	; 0x40
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <HAL_InitTick+0xa4>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034ac:	f107 0210 	add.w	r2, r7, #16
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 f84e 	bl	8006558 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80034bc:	f003 f824 	bl	8006508 <HAL_RCC_GetPCLK1Freq>
 80034c0:	4603      	mov	r3, r0
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_InitTick+0xa8>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0c9b      	lsrs	r3, r3, #18
 80034d0:	3b01      	subs	r3, #1
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <HAL_InitTick+0xac>)
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_InitTick+0xb0>)
 80034d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_InitTick+0xac>)
 80034dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034e2:	4a0e      	ldr	r2, [pc, #56]	; (800351c <HAL_InitTick+0xac>)
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <HAL_InitTick+0xac>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_InitTick+0xac>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80034f4:	4809      	ldr	r0, [pc, #36]	; (800351c <HAL_InitTick+0xac>)
 80034f6:	f003 f861 	bl	80065bc <HAL_TIM_Base_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003500:	4806      	ldr	r0, [pc, #24]	; (800351c <HAL_InitTick+0xac>)
 8003502:	f003 f8ab 	bl	800665c <HAL_TIM_Base_Start_IT>
 8003506:	4603      	mov	r3, r0
 8003508:	e000      	b.n	800350c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
}
 800350c:	4618      	mov	r0, r3
 800350e:	3730      	adds	r7, #48	; 0x30
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	431bde83 	.word	0x431bde83
 800351c:	200005bc 	.word	0x200005bc
 8003520:	40001000 	.word	0x40001000

08003524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003528:	e7fe      	b.n	8003528 <NMI_Handler+0x4>

0800352a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800352e:	e7fe      	b.n	800352e <HardFault_Handler+0x4>

08003530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003534:	e7fe      	b.n	8003534 <MemManage_Handler+0x4>

08003536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800353a:	e7fe      	b.n	800353a <BusFault_Handler+0x4>

0800353c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003540:	e7fe      	b.n	8003540 <UsageFault_Handler+0x4>

08003542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003542:	b480      	push	{r7}
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003556:	f003 fc7d 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000308 	.word	0x20000308

08003564 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <TIM4_IRQHandler+0x10>)
 800356a:	f003 fc73 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200003e0 	.word	0x200003e0

08003578 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <USART3_IRQHandler+0x10>)
 800357e:	f004 fe25 	bl	80081cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000470 	.word	0x20000470

0800358c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <TIM6_DAC_IRQHandler+0x10>)
 8003592:	f003 fc5f 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200005bc 	.word	0x200005bc

080035a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <DMA2_Stream0_IRQHandler+0x10>)
 80035a6:	f000 ff8f 	bl	80044c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000254 	.word	0x20000254

080035b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
	return 1;
 80035b8:	2301      	movs	r3, #1
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_kill>:

int _kill(int pid, int sig)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035ce:	f008 fdcf 	bl	800c170 <__errno>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2216      	movs	r2, #22
 80035d6:	601a      	str	r2, [r3, #0]
	return -1;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_exit>:

void _exit (int status)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ffe7 	bl	80035c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035f6:	e7fe      	b.n	80035f6 <_exit+0x12>

080035f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	e00a      	b.n	8003620 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800360a:	f3af 8000 	nop.w
 800360e:	4601      	mov	r1, r0
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	60ba      	str	r2, [r7, #8]
 8003616:	b2ca      	uxtb	r2, r1
 8003618:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	3301      	adds	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	dbf0      	blt.n	800360a <_read+0x12>
	}

return len;
 8003628:	687b      	ldr	r3, [r7, #4]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b086      	sub	sp, #24
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e009      	b.n	8003658 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	60ba      	str	r2, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	3301      	adds	r3, #1
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	dbf1      	blt.n	8003644 <_write+0x12>
	}
	return len;
 8003660:	687b      	ldr	r3, [r7, #4]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <_close>:

int _close(int file)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
	return -1;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003692:	605a      	str	r2, [r3, #4]
	return 0;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <_isatty>:

int _isatty(int file)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
	return 1;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
	return 0;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <_sbrk+0x5c>)
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <_sbrk+0x60>)
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <_sbrk+0x64>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <_sbrk+0x64>)
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <_sbrk+0x68>)
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <_sbrk+0x64>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	429a      	cmp	r2, r3
 8003702:	d207      	bcs.n	8003714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003704:	f008 fd34 	bl	800c170 <__errno>
 8003708:	4603      	mov	r3, r0
 800370a:	220c      	movs	r2, #12
 800370c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	e009      	b.n	8003728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003714:	4b08      	ldr	r3, [pc, #32]	; (8003738 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <_sbrk+0x64>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <_sbrk+0x64>)
 8003724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20020000 	.word	0x20020000
 8003734:	00000400 	.word	0x00000400
 8003738:	20000604 	.word	0x20000604
 800373c:	20005370 	.word	0x20005370

08003740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <SystemInit+0x20>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	4a05      	ldr	r2, [pc, #20]	; (8003760 <SystemInit+0x20>)
 800374c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800379c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003768:	480d      	ldr	r0, [pc, #52]	; (80037a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800376a:	490e      	ldr	r1, [pc, #56]	; (80037a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800376c:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003770:	e002      	b.n	8003778 <LoopCopyDataInit>

08003772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003776:	3304      	adds	r3, #4

08003778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800377c:	d3f9      	bcc.n	8003772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800377e:	4a0b      	ldr	r2, [pc, #44]	; (80037ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003780:	4c0b      	ldr	r4, [pc, #44]	; (80037b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003784:	e001      	b.n	800378a <LoopFillZerobss>

08003786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003788:	3204      	adds	r2, #4

0800378a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800378c:	d3fb      	bcc.n	8003786 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800378e:	f7ff ffd7 	bl	8003740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003792:	f008 fcf3 	bl	800c17c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003796:	f7fe f9a3 	bl	8001ae0 <main>
  bx  lr    
 800379a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800379c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80037a8:	080103ac 	.word	0x080103ac
  ldr r2, =_sbss
 80037ac:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80037b0:	2000536c 	.word	0x2000536c

080037b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037b4:	e7fe      	b.n	80037b4 <ADC_IRQHandler>
	...

080037b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <HAL_Init+0x40>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <HAL_Init+0x40>)
 80037c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_Init+0x40>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <HAL_Init+0x40>)
 80037ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_Init+0x40>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <HAL_Init+0x40>)
 80037da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e0:	2003      	movs	r0, #3
 80037e2:	f000 fcfc 	bl	80041de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037e6:	200f      	movs	r0, #15
 80037e8:	f7ff fe42 	bl	8003470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037ec:	f7ff fb68 	bl	8002ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023c00 	.word	0x40023c00

080037fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_IncTick+0x20>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_IncTick+0x24>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4413      	add	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_IncTick+0x24>)
 800380e:	6013      	str	r3, [r2, #0]
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000018 	.word	0x20000018
 8003820:	20000608 	.word	0x20000608

08003824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return uwTick;
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <HAL_GetTick+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000608 	.word	0x20000608

0800383c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7ff ffee 	bl	8003824 <HAL_GetTick>
 8003848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d005      	beq.n	8003862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_Delay+0x44>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003862:	bf00      	nop
 8003864:	f7ff ffde 	bl	8003824 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d8f7      	bhi.n	8003864 <HAL_Delay+0x28>
  {
  }
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000018 	.word	0x20000018

08003884 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e033      	b.n	8003902 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fb38 	bl	8002f18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038ca:	f023 0302 	bic.w	r3, r3, #2
 80038ce:	f043 0202 	orr.w	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fad8 	bl	8003e8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f023 0303 	bic.w	r3, r3, #3
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
 80038f2:	e001      	b.n	80038f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_ADC_Start+0x1a>
 8003922:	2302      	movs	r3, #2
 8003924:	e0b2      	b.n	8003a8c <HAL_ADC_Start+0x180>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d018      	beq.n	800396e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800394c:	4b52      	ldr	r3, [pc, #328]	; (8003a98 <HAL_ADC_Start+0x18c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a52      	ldr	r2, [pc, #328]	; (8003a9c <HAL_ADC_Start+0x190>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0c9a      	lsrs	r2, r3, #18
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003960:	e002      	b.n	8003968 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	3b01      	subs	r3, #1
 8003966:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f9      	bne.n	8003962 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d17a      	bne.n	8003a72 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ba:	d106      	bne.n	80039ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	f023 0206 	bic.w	r2, r3, #6
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44
 80039c8:	e002      	b.n	80039d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d8:	4b31      	ldr	r3, [pc, #196]	; (8003aa0 <HAL_ADC_Start+0x194>)
 80039da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80039e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d12a      	bne.n	8003a48 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2b      	ldr	r2, [pc, #172]	; (8003aa4 <HAL_ADC_Start+0x198>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d015      	beq.n	8003a28 <HAL_ADC_Start+0x11c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <HAL_ADC_Start+0x19c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d105      	bne.n	8003a12 <HAL_ADC_Start+0x106>
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_ADC_Start+0x194>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a25      	ldr	r2, [pc, #148]	; (8003aac <HAL_ADC_Start+0x1a0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d136      	bne.n	8003a8a <HAL_ADC_Start+0x17e>
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_ADC_Start+0x194>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d130      	bne.n	8003a8a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d129      	bne.n	8003a8a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	e020      	b.n	8003a8a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <HAL_ADC_Start+0x198>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d11b      	bne.n	8003a8a <HAL_ADC_Start+0x17e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d114      	bne.n	8003a8a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	e00b      	b.n	8003a8a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0210 	orr.w	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000010 	.word	0x20000010
 8003a9c:	431bde83 	.word	0x431bde83
 8003aa0:	40012300 	.word	0x40012300
 8003aa4:	40012000 	.word	0x40012000
 8003aa8:	40012100 	.word	0x40012100
 8003aac:	40012200 	.word	0x40012200

08003ab0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_Stop+0x16>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e021      	b.n	8003b0a <HAL_ADC_Stop+0x5a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d113      	bne.n	8003b5c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b42:	d10b      	bne.n	8003b5c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e063      	b.n	8003c24 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003b5c:	f7ff fe62 	bl	8003824 <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b62:	e021      	b.n	8003ba8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d01d      	beq.n	8003ba8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_ADC_PollForConversion+0x6c>
 8003b72:	f7ff fe57 	bl	8003824 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d212      	bcs.n	8003ba8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	f043 0204 	orr.w	r2, r3, #4
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e03d      	b.n	8003c24 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d1d6      	bne.n	8003b64 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0212 	mvn.w	r2, #18
 8003bbe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d123      	bne.n	8003c22 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11f      	bne.n	8003c22 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d006      	beq.n	8003bfe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d111      	bne.n	8003c22 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f043 0201 	orr.w	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x1c>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e105      	b.n	8003e70 <HAL_ADC_ConfigChannel+0x228>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b09      	cmp	r3, #9
 8003c72:	d925      	bls.n	8003cc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68d9      	ldr	r1, [r3, #12]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	3b1e      	subs	r3, #30
 8003c8a:	2207      	movs	r2, #7
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43da      	mvns	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	400a      	ands	r2, r1
 8003c98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68d9      	ldr	r1, [r3, #12]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	4603      	mov	r3, r0
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4403      	add	r3, r0
 8003cb2:	3b1e      	subs	r3, #30
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	e022      	b.n	8003d06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6919      	ldr	r1, [r3, #16]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4613      	mov	r3, r2
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4413      	add	r3, r2
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4403      	add	r3, r0
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b06      	cmp	r3, #6
 8003d0c:	d824      	bhi.n	8003d58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3b05      	subs	r3, #5
 8003d20:	221f      	movs	r2, #31
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43da      	mvns	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	3b05      	subs	r3, #5
 8003d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	635a      	str	r2, [r3, #52]	; 0x34
 8003d56:	e04c      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d824      	bhi.n	8003daa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	3b23      	subs	r3, #35	; 0x23
 8003d72:	221f      	movs	r2, #31
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43da      	mvns	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	400a      	ands	r2, r1
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	3b23      	subs	r3, #35	; 0x23
 8003d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
 8003da8:	e023      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	3b41      	subs	r3, #65	; 0x41
 8003dbc:	221f      	movs	r2, #31
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	400a      	ands	r2, r1
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	4618      	mov	r0, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	3b41      	subs	r3, #65	; 0x41
 8003de6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_ADC_ConfigChannel+0x234>)
 8003df4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <HAL_ADC_ConfigChannel+0x238>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d109      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x1cc>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b12      	cmp	r3, #18
 8003e06:	d105      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_ADC_ConfigChannel+0x238>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d123      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x21e>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d003      	beq.n	8003e2e <HAL_ADC_ConfigChannel+0x1e6>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b11      	cmp	r3, #17
 8003e2c:	d11b      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d111      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <HAL_ADC_ConfigChannel+0x23c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <HAL_ADC_ConfigChannel+0x240>)
 8003e48:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4c:	0c9a      	lsrs	r2, r3, #18
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e58:	e002      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f9      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	40012300 	.word	0x40012300
 8003e80:	40012000 	.word	0x40012000
 8003e84:	20000010 	.word	0x20000010
 8003e88:	431bde83 	.word	0x431bde83

08003e8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e94:	4b79      	ldr	r3, [pc, #484]	; (800407c <ADC_Init+0x1f0>)
 8003e96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	021a      	lsls	r2, r3, #8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6899      	ldr	r1, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	4a58      	ldr	r2, [pc, #352]	; (8004080 <ADC_Init+0x1f4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6899      	ldr	r1, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6899      	ldr	r1, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	e00f      	b.n	8003f8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0202 	bic.w	r2, r2, #2
 8003f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7e1b      	ldrb	r3, [r3, #24]
 8003fa4:	005a      	lsls	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01b      	beq.n	8003ff0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	035a      	lsls	r2, r3, #13
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	e007      	b.n	8004000 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ffe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	3b01      	subs	r3, #1
 800401c:	051a      	lsls	r2, r3, #20
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004042:	025a      	lsls	r2, r3, #9
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6899      	ldr	r1, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	029a      	lsls	r2, r3, #10
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40012300 	.word	0x40012300
 8004080:	0f000001 	.word	0x0f000001

08004084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040a0:	4013      	ands	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040b6:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <__NVIC_SetPriorityGrouping+0x44>)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	60d3      	str	r3, [r2, #12]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	e000ed00 	.word	0xe000ed00

080040cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <__NVIC_GetPriorityGrouping+0x18>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	f003 0307 	and.w	r3, r3, #7
}
 80040da:	4618      	mov	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	e000ed00 	.word	0xe000ed00

080040e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	db0b      	blt.n	8004112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	f003 021f 	and.w	r2, r3, #31
 8004100:	4907      	ldr	r1, [pc, #28]	; (8004120 <__NVIC_EnableIRQ+0x38>)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2001      	movs	r0, #1
 800410a:	fa00 f202 	lsl.w	r2, r0, r2
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	e000e100 	.word	0xe000e100

08004124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	6039      	str	r1, [r7, #0]
 800412e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004134:	2b00      	cmp	r3, #0
 8004136:	db0a      	blt.n	800414e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	490c      	ldr	r1, [pc, #48]	; (8004170 <__NVIC_SetPriority+0x4c>)
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	0112      	lsls	r2, r2, #4
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	440b      	add	r3, r1
 8004148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800414c:	e00a      	b.n	8004164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4908      	ldr	r1, [pc, #32]	; (8004174 <__NVIC_SetPriority+0x50>)
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	3b04      	subs	r3, #4
 800415c:	0112      	lsls	r2, r2, #4
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	440b      	add	r3, r1
 8004162:	761a      	strb	r2, [r3, #24]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000e100 	.word	0xe000e100
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004178:	b480      	push	{r7}
 800417a:	b089      	sub	sp, #36	; 0x24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f1c3 0307 	rsb	r3, r3, #7
 8004192:	2b04      	cmp	r3, #4
 8004194:	bf28      	it	cs
 8004196:	2304      	movcs	r3, #4
 8004198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	3304      	adds	r3, #4
 800419e:	2b06      	cmp	r3, #6
 80041a0:	d902      	bls.n	80041a8 <NVIC_EncodePriority+0x30>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3b03      	subs	r3, #3
 80041a6:	e000      	b.n	80041aa <NVIC_EncodePriority+0x32>
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ac:	f04f 32ff 	mov.w	r2, #4294967295
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43da      	mvns	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	401a      	ands	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c0:	f04f 31ff 	mov.w	r1, #4294967295
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	43d9      	mvns	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	4313      	orrs	r3, r2
         );
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3724      	adds	r7, #36	; 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ff4c 	bl	8004084 <__NVIC_SetPriorityGrouping>
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004206:	f7ff ff61 	bl	80040cc <__NVIC_GetPriorityGrouping>
 800420a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	6978      	ldr	r0, [r7, #20]
 8004212:	f7ff ffb1 	bl	8004178 <NVIC_EncodePriority>
 8004216:	4602      	mov	r2, r0
 8004218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ff80 	bl	8004124 <__NVIC_SetPriority>
}
 8004224:	bf00      	nop
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ff54 	bl	80040e8 <__NVIC_EnableIRQ>
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004254:	f7ff fae6 	bl	8003824 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e099      	b.n	8004398 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004284:	e00f      	b.n	80042a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004286:	f7ff facd 	bl	8003824 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b05      	cmp	r3, #5
 8004292:	d908      	bls.n	80042a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2203      	movs	r2, #3
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e078      	b.n	8004398 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e8      	bne.n	8004286 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4b38      	ldr	r3, [pc, #224]	; (80043a0 <HAL_DMA_Init+0x158>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d107      	bne.n	8004310 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	4313      	orrs	r3, r2
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0307 	bic.w	r3, r3, #7
 8004326:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	2b04      	cmp	r3, #4
 8004338:	d117      	bne.n	800436a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00e      	beq.n	800436a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fa7b 	bl	8004848 <DMA_CheckFifoParam>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2240      	movs	r2, #64	; 0x40
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004366:	2301      	movs	r3, #1
 8004368:	e016      	b.n	8004398 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fa32 	bl	80047dc <DMA_CalcBaseAndBitshift>
 8004378:	4603      	mov	r3, r0
 800437a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	223f      	movs	r2, #63	; 0x3f
 8004382:	409a      	lsls	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	f010803f 	.word	0xf010803f

080043a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043b2:	f7ff fa37 	bl	8003824 <HAL_GetTick>
 80043b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d008      	beq.n	80043d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2280      	movs	r2, #128	; 0x80
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e052      	b.n	800447c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0216 	bic.w	r2, r2, #22
 80043e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <HAL_DMA_Abort+0x62>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0208 	bic.w	r2, r2, #8
 8004414:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004426:	e013      	b.n	8004450 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004428:	f7ff f9fc 	bl	8003824 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b05      	cmp	r3, #5
 8004434:	d90c      	bls.n	8004450 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2203      	movs	r2, #3
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e015      	b.n	800447c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e4      	bne.n	8004428 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004462:	223f      	movs	r2, #63	; 0x3f
 8004464:	409a      	lsls	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d004      	beq.n	80044a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2280      	movs	r2, #128	; 0x80
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e00c      	b.n	80044bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2205      	movs	r2, #5
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044d4:	4b8e      	ldr	r3, [pc, #568]	; (8004710 <HAL_DMA_IRQHandler+0x248>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a8e      	ldr	r2, [pc, #568]	; (8004714 <HAL_DMA_IRQHandler+0x24c>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	0a9b      	lsrs	r3, r3, #10
 80044e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f2:	2208      	movs	r2, #8
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01a      	beq.n	8004534 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d013      	beq.n	8004534 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0204 	bic.w	r2, r2, #4
 800451a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004520:	2208      	movs	r2, #8
 8004522:	409a      	lsls	r2, r3
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d012      	beq.n	800456a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004556:	2201      	movs	r2, #1
 8004558:	409a      	lsls	r2, r3
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f043 0202 	orr.w	r2, r3, #2
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456e:	2204      	movs	r2, #4
 8004570:	409a      	lsls	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d012      	beq.n	80045a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458c:	2204      	movs	r2, #4
 800458e:	409a      	lsls	r2, r3
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	f043 0204 	orr.w	r2, r3, #4
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	2210      	movs	r2, #16
 80045a6:	409a      	lsls	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d043      	beq.n	8004638 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d03c      	beq.n	8004638 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c2:	2210      	movs	r2, #16
 80045c4:	409a      	lsls	r2, r3
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d018      	beq.n	800460a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d024      	beq.n	8004638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4798      	blx	r3
 80045f6:	e01f      	b.n	8004638 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01b      	beq.n	8004638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4798      	blx	r3
 8004608:	e016      	b.n	8004638 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d107      	bne.n	8004628 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0208 	bic.w	r2, r2, #8
 8004626:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	2220      	movs	r2, #32
 800463e:	409a      	lsls	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 808f 	beq.w	8004768 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8087 	beq.w	8004768 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	2220      	movs	r2, #32
 8004660:	409a      	lsls	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b05      	cmp	r3, #5
 8004670:	d136      	bne.n	80046e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0216 	bic.w	r2, r2, #22
 8004680:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004690:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <HAL_DMA_IRQHandler+0x1da>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0208 	bic.w	r2, r2, #8
 80046b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b6:	223f      	movs	r2, #63	; 0x3f
 80046b8:	409a      	lsls	r2, r3
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d07e      	beq.n	80047d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
        }
        return;
 80046de:	e079      	b.n	80047d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01d      	beq.n	800472a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10d      	bne.n	8004718 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004700:	2b00      	cmp	r3, #0
 8004702:	d031      	beq.n	8004768 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	4798      	blx	r3
 800470c:	e02c      	b.n	8004768 <HAL_DMA_IRQHandler+0x2a0>
 800470e:	bf00      	nop
 8004710:	20000010 	.word	0x20000010
 8004714:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d023      	beq.n	8004768 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
 8004728:	e01e      	b.n	8004768 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10f      	bne.n	8004758 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0210 	bic.w	r2, r2, #16
 8004746:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	2b00      	cmp	r3, #0
 800476e:	d032      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d022      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2205      	movs	r2, #5
 8004780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3301      	adds	r3, #1
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	429a      	cmp	r2, r3
 800479e:	d307      	bcc.n	80047b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f2      	bne.n	8004794 <HAL_DMA_IRQHandler+0x2cc>
 80047ae:	e000      	b.n	80047b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80047b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4798      	blx	r3
 80047d2:	e000      	b.n	80047d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80047d4:	bf00      	nop
    }
  }
}
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3b10      	subs	r3, #16
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <DMA_CalcBaseAndBitshift+0x64>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047f6:	4a13      	ldr	r2, [pc, #76]	; (8004844 <DMA_CalcBaseAndBitshift+0x68>)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d909      	bls.n	800481e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	1d1a      	adds	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	659a      	str	r2, [r3, #88]	; 0x58
 800481c:	e007      	b.n	800482e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	aaaaaaab 	.word	0xaaaaaaab
 8004844:	0800f558 	.word	0x0800f558

08004848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d11f      	bne.n	80048a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d856      	bhi.n	8004916 <DMA_CheckFifoParam+0xce>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <DMA_CheckFifoParam+0x28>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004881 	.word	0x08004881
 8004874:	08004893 	.word	0x08004893
 8004878:	08004881 	.word	0x08004881
 800487c:	08004917 	.word	0x08004917
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d046      	beq.n	800491a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e043      	b.n	800491a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800489a:	d140      	bne.n	800491e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a0:	e03d      	b.n	800491e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048aa:	d121      	bne.n	80048f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d837      	bhi.n	8004922 <DMA_CheckFifoParam+0xda>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <DMA_CheckFifoParam+0x70>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048cf 	.word	0x080048cf
 80048c0:	080048c9 	.word	0x080048c9
 80048c4:	080048e1 	.word	0x080048e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      break;
 80048cc:	e030      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d025      	beq.n	8004926 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048de:	e022      	b.n	8004926 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048e8:	d11f      	bne.n	800492a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048ee:	e01c      	b.n	800492a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d903      	bls.n	80048fe <DMA_CheckFifoParam+0xb6>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d003      	beq.n	8004904 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048fc:	e018      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
      break;
 8004902:	e015      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	e00b      	b.n	800492e <DMA_CheckFifoParam+0xe6>
      break;
 8004916:	bf00      	nop
 8004918:	e00a      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800491a:	bf00      	nop
 800491c:	e008      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800491e:	bf00      	nop
 8004920:	e006      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 8004922:	bf00      	nop
 8004924:	e004      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 8004926:	bf00      	nop
 8004928:	e002      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;   
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <DMA_CheckFifoParam+0xe8>
      break;
 800492e:	bf00      	nop
    }
  } 
  
  return status; 
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	; 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e16b      	b.n	8004c34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800495c:	2201      	movs	r2, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	429a      	cmp	r2, r3
 8004976:	f040 815a 	bne.w	8004c2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d005      	beq.n	8004992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800498e:	2b02      	cmp	r3, #2
 8004990:	d130      	bne.n	80049f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	2203      	movs	r2, #3
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049c8:	2201      	movs	r2, #1
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 0201 	and.w	r2, r3, #1
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d017      	beq.n	8004a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d123      	bne.n	8004a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	08da      	lsrs	r2, r3, #3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3208      	adds	r2, #8
 8004a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	220f      	movs	r2, #15
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	08da      	lsrs	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3208      	adds	r2, #8
 8004a7e:	69b9      	ldr	r1, [r7, #24]
 8004a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	2203      	movs	r2, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0203 	and.w	r2, r3, #3
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80b4 	beq.w	8004c2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	4b60      	ldr	r3, [pc, #384]	; (8004c4c <HAL_GPIO_Init+0x30c>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	4a5f      	ldr	r2, [pc, #380]	; (8004c4c <HAL_GPIO_Init+0x30c>)
 8004ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad6:	4b5d      	ldr	r3, [pc, #372]	; (8004c4c <HAL_GPIO_Init+0x30c>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ae2:	4a5b      	ldr	r2, [pc, #364]	; (8004c50 <HAL_GPIO_Init+0x310>)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	089b      	lsrs	r3, r3, #2
 8004ae8:	3302      	adds	r3, #2
 8004aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	220f      	movs	r2, #15
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a52      	ldr	r2, [pc, #328]	; (8004c54 <HAL_GPIO_Init+0x314>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d02b      	beq.n	8004b66 <HAL_GPIO_Init+0x226>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a51      	ldr	r2, [pc, #324]	; (8004c58 <HAL_GPIO_Init+0x318>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d025      	beq.n	8004b62 <HAL_GPIO_Init+0x222>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a50      	ldr	r2, [pc, #320]	; (8004c5c <HAL_GPIO_Init+0x31c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01f      	beq.n	8004b5e <HAL_GPIO_Init+0x21e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a4f      	ldr	r2, [pc, #316]	; (8004c60 <HAL_GPIO_Init+0x320>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d019      	beq.n	8004b5a <HAL_GPIO_Init+0x21a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a4e      	ldr	r2, [pc, #312]	; (8004c64 <HAL_GPIO_Init+0x324>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_GPIO_Init+0x216>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a4d      	ldr	r2, [pc, #308]	; (8004c68 <HAL_GPIO_Init+0x328>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00d      	beq.n	8004b52 <HAL_GPIO_Init+0x212>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a4c      	ldr	r2, [pc, #304]	; (8004c6c <HAL_GPIO_Init+0x32c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <HAL_GPIO_Init+0x20e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a4b      	ldr	r2, [pc, #300]	; (8004c70 <HAL_GPIO_Init+0x330>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d101      	bne.n	8004b4a <HAL_GPIO_Init+0x20a>
 8004b46:	2307      	movs	r3, #7
 8004b48:	e00e      	b.n	8004b68 <HAL_GPIO_Init+0x228>
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	e00c      	b.n	8004b68 <HAL_GPIO_Init+0x228>
 8004b4e:	2306      	movs	r3, #6
 8004b50:	e00a      	b.n	8004b68 <HAL_GPIO_Init+0x228>
 8004b52:	2305      	movs	r3, #5
 8004b54:	e008      	b.n	8004b68 <HAL_GPIO_Init+0x228>
 8004b56:	2304      	movs	r3, #4
 8004b58:	e006      	b.n	8004b68 <HAL_GPIO_Init+0x228>
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e004      	b.n	8004b68 <HAL_GPIO_Init+0x228>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e002      	b.n	8004b68 <HAL_GPIO_Init+0x228>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_GPIO_Init+0x228>
 8004b66:	2300      	movs	r3, #0
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	f002 0203 	and.w	r2, r2, #3
 8004b6e:	0092      	lsls	r2, r2, #2
 8004b70:	4093      	lsls	r3, r2
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b78:	4935      	ldr	r1, [pc, #212]	; (8004c50 <HAL_GPIO_Init+0x310>)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	3302      	adds	r3, #2
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b86:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <HAL_GPIO_Init+0x334>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004baa:	4a32      	ldr	r2, [pc, #200]	; (8004c74 <HAL_GPIO_Init+0x334>)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bb0:	4b30      	ldr	r3, [pc, #192]	; (8004c74 <HAL_GPIO_Init+0x334>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <HAL_GPIO_Init+0x334>)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bda:	4b26      	ldr	r3, [pc, #152]	; (8004c74 <HAL_GPIO_Init+0x334>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bfe:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <HAL_GPIO_Init+0x334>)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c04:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_GPIO_Init+0x334>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c28:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <HAL_GPIO_Init+0x334>)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3301      	adds	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	f67f ae90 	bls.w	800495c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	3724      	adds	r7, #36	; 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40013800 	.word	0x40013800
 8004c54:	40020000 	.word	0x40020000
 8004c58:	40020400 	.word	0x40020400
 8004c5c:	40020800 	.word	0x40020800
 8004c60:	40020c00 	.word	0x40020c00
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40021400 	.word	0x40021400
 8004c6c:	40021800 	.word	0x40021800
 8004c70:	40021c00 	.word	0x40021c00
 8004c74:	40013c00 	.word	0x40013c00

08004c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	807b      	strh	r3, [r7, #2]
 8004c84:	4613      	mov	r3, r2
 8004c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c88:	787b      	ldrb	r3, [r7, #1]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c8e:	887a      	ldrh	r2, [r7, #2]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c94:	e003      	b.n	8004c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c96:	887b      	ldrh	r3, [r7, #2]
 8004c98:	041a      	lsls	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	619a      	str	r2, [r3, #24]
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e12b      	b.n	8004f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fe f9b4 	bl	8003040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2224      	movs	r2, #36	; 0x24
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d10:	f001 fbfa 	bl	8006508 <HAL_RCC_GetPCLK1Freq>
 8004d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4a81      	ldr	r2, [pc, #516]	; (8004f20 <HAL_I2C_Init+0x274>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d807      	bhi.n	8004d30 <HAL_I2C_Init+0x84>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a80      	ldr	r2, [pc, #512]	; (8004f24 <HAL_I2C_Init+0x278>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	bf94      	ite	ls
 8004d28:	2301      	movls	r3, #1
 8004d2a:	2300      	movhi	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e006      	b.n	8004d3e <HAL_I2C_Init+0x92>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a7d      	ldr	r2, [pc, #500]	; (8004f28 <HAL_I2C_Init+0x27c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bf94      	ite	ls
 8004d38:	2301      	movls	r3, #1
 8004d3a:	2300      	movhi	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0e7      	b.n	8004f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a78      	ldr	r2, [pc, #480]	; (8004f2c <HAL_I2C_Init+0x280>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	0c9b      	lsrs	r3, r3, #18
 8004d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a6a      	ldr	r2, [pc, #424]	; (8004f20 <HAL_I2C_Init+0x274>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d802      	bhi.n	8004d80 <HAL_I2C_Init+0xd4>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	e009      	b.n	8004d94 <HAL_I2C_Init+0xe8>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	4a69      	ldr	r2, [pc, #420]	; (8004f30 <HAL_I2C_Init+0x284>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	099b      	lsrs	r3, r3, #6
 8004d92:	3301      	adds	r3, #1
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	495c      	ldr	r1, [pc, #368]	; (8004f20 <HAL_I2C_Init+0x274>)
 8004db0:	428b      	cmp	r3, r1
 8004db2:	d819      	bhi.n	8004de8 <HAL_I2C_Init+0x13c>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1e59      	subs	r1, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004dc8:	400b      	ands	r3, r1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_I2C_Init+0x138>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1e59      	subs	r1, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de2:	e051      	b.n	8004e88 <HAL_I2C_Init+0x1dc>
 8004de4:	2304      	movs	r3, #4
 8004de6:	e04f      	b.n	8004e88 <HAL_I2C_Init+0x1dc>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d111      	bne.n	8004e14 <HAL_I2C_Init+0x168>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1e58      	subs	r0, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	440b      	add	r3, r1
 8004dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e02:	3301      	adds	r3, #1
 8004e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e012      	b.n	8004e3a <HAL_I2C_Init+0x18e>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1e58      	subs	r0, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6859      	ldr	r1, [r3, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	0099      	lsls	r1, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf0c      	ite	eq
 8004e34:	2301      	moveq	r3, #1
 8004e36:	2300      	movne	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_Init+0x196>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e022      	b.n	8004e88 <HAL_I2C_Init+0x1dc>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10e      	bne.n	8004e68 <HAL_I2C_Init+0x1bc>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1e58      	subs	r0, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	460b      	mov	r3, r1
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	440b      	add	r3, r1
 8004e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e66:	e00f      	b.n	8004e88 <HAL_I2C_Init+0x1dc>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1e58      	subs	r0, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6859      	ldr	r1, [r3, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	0099      	lsls	r1, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	6809      	ldr	r1, [r1, #0]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6911      	ldr	r1, [r2, #16]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68d2      	ldr	r2, [r2, #12]
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	000186a0 	.word	0x000186a0
 8004f24:	001e847f 	.word	0x001e847f
 8004f28:	003d08ff 	.word	0x003d08ff
 8004f2c:	431bde83 	.word	0x431bde83
 8004f30:	10624dd3 	.word	0x10624dd3

08004f34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	460b      	mov	r3, r1
 8004f42:	817b      	strh	r3, [r7, #10]
 8004f44:	4613      	mov	r3, r2
 8004f46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f48:	f7fe fc6c 	bl	8003824 <HAL_GetTick>
 8004f4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	f040 80e0 	bne.w	800511c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2319      	movs	r3, #25
 8004f62:	2201      	movs	r2, #1
 8004f64:	4970      	ldr	r1, [pc, #448]	; (8005128 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fc58 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
 8004f74:	e0d3      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_I2C_Master_Transmit+0x50>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e0cc      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d007      	beq.n	8004faa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0201 	orr.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2221      	movs	r2, #33	; 0x21
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	893a      	ldrh	r2, [r7, #8]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a50      	ldr	r2, [pc, #320]	; (800512c <HAL_I2C_Master_Transmit+0x1f8>)
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fec:	8979      	ldrh	r1, [r7, #10]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fac2 	bl	800557c <I2C_MasterRequestWrite>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e08d      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005018:	e066      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	6a39      	ldr	r1, [r7, #32]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fcd2 	bl	80059c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	2b04      	cmp	r3, #4
 8005030:	d107      	bne.n	8005042 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e06b      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	781a      	ldrb	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d11b      	bne.n	80050bc <HAL_I2C_Master_Transmit+0x188>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d017      	beq.n	80050bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	6a39      	ldr	r1, [r7, #32]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fcc2 	bl	8005a4a <I2C_WaitOnBTFFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d107      	bne.n	80050e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e01a      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d194      	bne.n	800501a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	e000      	b.n	800511e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800511c:	2302      	movs	r3, #2
  }
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	00100002 	.word	0x00100002
 800512c:	ffff0000 	.word	0xffff0000

08005130 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	461a      	mov	r2, r3
 800513c:	460b      	mov	r3, r1
 800513e:	817b      	strh	r3, [r7, #10]
 8005140:	4613      	mov	r3, r2
 8005142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005144:	f7fe fb6e 	bl	8003824 <HAL_GetTick>
 8005148:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b20      	cmp	r3, #32
 8005154:	f040 820b 	bne.w	800556e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2319      	movs	r3, #25
 800515e:	2201      	movs	r2, #1
 8005160:	497c      	ldr	r1, [pc, #496]	; (8005354 <HAL_I2C_Master_Receive+0x224>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fb5a 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
 8005170:	e1fe      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_I2C_Master_Receive+0x50>
 800517c:	2302      	movs	r3, #2
 800517e:	e1f7      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	d007      	beq.n	80051a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2222      	movs	r2, #34	; 0x22
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2210      	movs	r2, #16
 80051c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	893a      	ldrh	r2, [r7, #8]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a5c      	ldr	r2, [pc, #368]	; (8005358 <HAL_I2C_Master_Receive+0x228>)
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051e8:	8979      	ldrh	r1, [r7, #10]
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fa46 	bl	8005680 <I2C_MasterRequestRead>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e1b8      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d113      	bne.n	800522e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005206:	2300      	movs	r3, #0
 8005208:	623b      	str	r3, [r7, #32]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	623b      	str	r3, [r7, #32]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	623b      	str	r3, [r7, #32]
 800521a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e18c      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	2b01      	cmp	r3, #1
 8005234:	d11b      	bne.n	800526e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	61fb      	str	r3, [r7, #28]
 800525a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e16c      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	2b02      	cmp	r3, #2
 8005274:	d11b      	bne.n	80052ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005284:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	e14c      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052d4:	e138      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052da:	2b03      	cmp	r3, #3
 80052dc:	f200 80f1 	bhi.w	80054c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d123      	bne.n	8005330 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fbed 	bl	8005acc <I2C_WaitOnRXNEFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e139      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800532e:	e10b      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005334:	2b02      	cmp	r3, #2
 8005336:	d14e      	bne.n	80053d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2200      	movs	r2, #0
 8005340:	4906      	ldr	r1, [pc, #24]	; (800535c <HAL_I2C_Master_Receive+0x22c>)
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fa6a 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e10e      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
 8005352:	bf00      	nop
 8005354:	00100002 	.word	0x00100002
 8005358:	ffff0000 	.word	0xffff0000
 800535c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053d4:	e0b8      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	2200      	movs	r2, #0
 80053de:	4966      	ldr	r1, [pc, #408]	; (8005578 <HAL_I2C_Master_Receive+0x448>)
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fa1b 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0bf      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	2200      	movs	r2, #0
 800543a:	494f      	ldr	r1, [pc, #316]	; (8005578 <HAL_I2C_Master_Receive+0x448>)
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f9ed 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e091      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054c0:	e042      	b.n	8005548 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fb00 	bl	8005acc <I2C_WaitOnRXNEFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e04c      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d118      	bne.n	8005548 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	f47f aec2 	bne.w	80052d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e000      	b.n	8005570 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
  }
}
 8005570:	4618      	mov	r0, r3
 8005572:	3728      	adds	r7, #40	; 0x28
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	00010004 	.word	0x00010004

0800557c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	460b      	mov	r3, r1
 800558a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d006      	beq.n	80055a6 <I2C_MasterRequestWrite+0x2a>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d003      	beq.n	80055a6 <I2C_MasterRequestWrite+0x2a>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055a4:	d108      	bne.n	80055b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e00b      	b.n	80055d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	2b12      	cmp	r3, #18
 80055be:	d107      	bne.n	80055d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f91d 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00d      	beq.n	8005604 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f6:	d103      	bne.n	8005600 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e035      	b.n	8005670 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800560c:	d108      	bne.n	8005620 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800561c:	611a      	str	r2, [r3, #16]
 800561e:	e01b      	b.n	8005658 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005620:	897b      	ldrh	r3, [r7, #10]
 8005622:	11db      	asrs	r3, r3, #7
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 0306 	and.w	r3, r3, #6
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f063 030f 	orn	r3, r3, #15
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	490e      	ldr	r1, [pc, #56]	; (8005678 <I2C_MasterRequestWrite+0xfc>)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f943 	bl	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e010      	b.n	8005670 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4907      	ldr	r1, [pc, #28]	; (800567c <I2C_MasterRequestWrite+0x100>)
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f933 	bl	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	00010008 	.word	0x00010008
 800567c:	00010002 	.word	0x00010002

08005680 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	460b      	mov	r3, r1
 800568e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d006      	beq.n	80056ba <I2C_MasterRequestRead+0x3a>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d003      	beq.n	80056ba <I2C_MasterRequestRead+0x3a>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b8:	d108      	bne.n	80056cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	e00b      	b.n	80056e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	2b11      	cmp	r3, #17
 80056d2:	d107      	bne.n	80056e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f893 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570a:	d103      	bne.n	8005714 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e079      	b.n	800580c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005720:	d108      	bne.n	8005734 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005722:	897b      	ldrh	r3, [r7, #10]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]
 8005732:	e05f      	b.n	80057f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005734:	897b      	ldrh	r3, [r7, #10]
 8005736:	11db      	asrs	r3, r3, #7
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f003 0306 	and.w	r3, r3, #6
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f063 030f 	orn	r3, r3, #15
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	4930      	ldr	r1, [pc, #192]	; (8005814 <I2C_MasterRequestRead+0x194>)
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f8b9 	bl	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e054      	b.n	800580c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005762:	897b      	ldrh	r3, [r7, #10]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4929      	ldr	r1, [pc, #164]	; (8005818 <I2C_MasterRequestRead+0x198>)
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f8a9 	bl	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e044      	b.n	800580c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f831 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00d      	beq.n	80057dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	d103      	bne.n	80057d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e017      	b.n	800580c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80057dc:	897b      	ldrh	r3, [r7, #10]
 80057de:	11db      	asrs	r3, r3, #7
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 0306 	and.w	r3, r3, #6
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f063 030e 	orn	r3, r3, #14
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4907      	ldr	r1, [pc, #28]	; (8005818 <I2C_MasterRequestRead+0x198>)
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f865 	bl	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	00010008 	.word	0x00010008
 8005818:	00010002 	.word	0x00010002

0800581c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800582c:	e025      	b.n	800587a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d021      	beq.n	800587a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fd fff5 	bl	8003824 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d116      	bne.n	800587a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e023      	b.n	80058c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	0c1b      	lsrs	r3, r3, #16
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10d      	bne.n	80058a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	43da      	mvns	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4013      	ands	r3, r2
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	bf0c      	ite	eq
 8005896:	2301      	moveq	r3, #1
 8005898:	2300      	movne	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	e00c      	b.n	80058ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	43da      	mvns	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4013      	ands	r3, r2
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bf0c      	ite	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	2300      	movne	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d0b6      	beq.n	800582e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058d8:	e051      	b.n	800597e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e8:	d123      	bne.n	8005932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005902:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0204 	orr.w	r2, r3, #4
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e046      	b.n	80059c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d021      	beq.n	800597e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593a:	f7fd ff73 	bl	8003824 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d302      	bcc.n	8005950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d116      	bne.n	800597e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f043 0220 	orr.w	r2, r3, #32
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e020      	b.n	80059c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	0c1b      	lsrs	r3, r3, #16
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	d10c      	bne.n	80059a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	43da      	mvns	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf14      	ite	ne
 800599a:	2301      	movne	r3, #1
 800599c:	2300      	moveq	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	e00b      	b.n	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	43da      	mvns	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4013      	ands	r3, r2
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bf14      	ite	ne
 80059b4:	2301      	movne	r3, #1
 80059b6:	2300      	moveq	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d18d      	bne.n	80058da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059d4:	e02d      	b.n	8005a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f8ce 	bl	8005b78 <I2C_IsAcknowledgeFailed>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e02d      	b.n	8005a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d021      	beq.n	8005a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ee:	f7fd ff19 	bl	8003824 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d302      	bcc.n	8005a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d116      	bne.n	8005a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e007      	b.n	8005a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d1ca      	bne.n	80059d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a56:	e02d      	b.n	8005ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f88d 	bl	8005b78 <I2C_IsAcknowledgeFailed>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e02d      	b.n	8005ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d021      	beq.n	8005ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a70:	f7fd fed8 	bl	8003824 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d116      	bne.n	8005ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	f043 0220 	orr.w	r2, r3, #32
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e007      	b.n	8005ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d1ca      	bne.n	8005a58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ad8:	e042      	b.n	8005b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d119      	bne.n	8005b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0210 	mvn.w	r2, #16
 8005af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e029      	b.n	8005b70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1c:	f7fd fe82 	bl	8003824 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d116      	bne.n	8005b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e007      	b.n	8005b70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	d1b5      	bne.n	8005ada <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8e:	d11b      	bne.n	8005bc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	f043 0204 	orr.w	r2, r3, #4
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_PWR_EnableBkUpAccess+0x24>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005bea:	687b      	ldr	r3, [r7, #4]
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	420e0020 	.word	0x420e0020
 8005bfc:	40007000 	.word	0x40007000

08005c00 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005c06:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005c12:	687b      	ldr	r3, [r7, #4]
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	420e0020 	.word	0x420e0020
 8005c24:	40007000 	.word	0x40007000

08005c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e267      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d075      	beq.n	8005d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c46:	4b88      	ldr	r3, [pc, #544]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d00c      	beq.n	8005c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c52:	4b85      	ldr	r3, [pc, #532]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d112      	bne.n	8005c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c5e:	4b82      	ldr	r3, [pc, #520]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6a:	d10b      	bne.n	8005c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6c:	4b7e      	ldr	r3, [pc, #504]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d05b      	beq.n	8005d30 <HAL_RCC_OscConfig+0x108>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d157      	bne.n	8005d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e242      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8c:	d106      	bne.n	8005c9c <HAL_RCC_OscConfig+0x74>
 8005c8e:	4b76      	ldr	r3, [pc, #472]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a75      	ldr	r2, [pc, #468]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e01d      	b.n	8005cd8 <HAL_RCC_OscConfig+0xb0>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x98>
 8005ca6:	4b70      	ldr	r3, [pc, #448]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a6f      	ldr	r2, [pc, #444]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	4b6d      	ldr	r3, [pc, #436]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a6c      	ldr	r2, [pc, #432]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	e00b      	b.n	8005cd8 <HAL_RCC_OscConfig+0xb0>
 8005cc0:	4b69      	ldr	r3, [pc, #420]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a68      	ldr	r2, [pc, #416]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	4b66      	ldr	r3, [pc, #408]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a65      	ldr	r2, [pc, #404]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d013      	beq.n	8005d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce0:	f7fd fda0 	bl	8003824 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce8:	f7fd fd9c 	bl	8003824 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b64      	cmp	r3, #100	; 0x64
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e207      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfa:	4b5b      	ldr	r3, [pc, #364]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCC_OscConfig+0xc0>
 8005d06:	e014      	b.n	8005d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d08:	f7fd fd8c 	bl	8003824 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d10:	f7fd fd88 	bl	8003824 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b64      	cmp	r3, #100	; 0x64
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e1f3      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d22:	4b51      	ldr	r3, [pc, #324]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f0      	bne.n	8005d10 <HAL_RCC_OscConfig+0xe8>
 8005d2e:	e000      	b.n	8005d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d063      	beq.n	8005e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d3e:	4b4a      	ldr	r3, [pc, #296]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 030c 	and.w	r3, r3, #12
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d4a:	4b47      	ldr	r3, [pc, #284]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d11c      	bne.n	8005d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d56:	4b44      	ldr	r3, [pc, #272]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d116      	bne.n	8005d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d62:	4b41      	ldr	r3, [pc, #260]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d005      	beq.n	8005d7a <HAL_RCC_OscConfig+0x152>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d001      	beq.n	8005d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e1c7      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7a:	4b3b      	ldr	r3, [pc, #236]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4937      	ldr	r1, [pc, #220]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8e:	e03a      	b.n	8005e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d020      	beq.n	8005dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d98:	4b34      	ldr	r3, [pc, #208]	; (8005e6c <HAL_RCC_OscConfig+0x244>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9e:	f7fd fd41 	bl	8003824 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da6:	f7fd fd3d 	bl	8003824 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e1a8      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db8:	4b2b      	ldr	r3, [pc, #172]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0f0      	beq.n	8005da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc4:	4b28      	ldr	r3, [pc, #160]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4925      	ldr	r1, [pc, #148]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	600b      	str	r3, [r1, #0]
 8005dd8:	e015      	b.n	8005e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dda:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <HAL_RCC_OscConfig+0x244>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de0:	f7fd fd20 	bl	8003824 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de8:	f7fd fd1c 	bl	8003824 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e187      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f0      	bne.n	8005de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d036      	beq.n	8005e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d016      	beq.n	8005e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e1a:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <HAL_RCC_OscConfig+0x248>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e20:	f7fd fd00 	bl	8003824 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e28:	f7fd fcfc 	bl	8003824 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e167      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0x200>
 8005e46:	e01b      	b.n	8005e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <HAL_RCC_OscConfig+0x248>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e4e:	f7fd fce9 	bl	8003824 <HAL_GetTick>
 8005e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e54:	e00e      	b.n	8005e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e56:	f7fd fce5 	bl	8003824 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d907      	bls.n	8005e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e150      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	42470000 	.word	0x42470000
 8005e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e74:	4b88      	ldr	r3, [pc, #544]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1ea      	bne.n	8005e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 8097 	beq.w	8005fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e92:	4b81      	ldr	r3, [pc, #516]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10f      	bne.n	8005ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	4b7d      	ldr	r3, [pc, #500]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	4a7c      	ldr	r2, [pc, #496]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eac:	6413      	str	r3, [r2, #64]	; 0x40
 8005eae:	4b7a      	ldr	r3, [pc, #488]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	60bb      	str	r3, [r7, #8]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ebe:	4b77      	ldr	r3, [pc, #476]	; (800609c <HAL_RCC_OscConfig+0x474>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d118      	bne.n	8005efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eca:	4b74      	ldr	r3, [pc, #464]	; (800609c <HAL_RCC_OscConfig+0x474>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a73      	ldr	r2, [pc, #460]	; (800609c <HAL_RCC_OscConfig+0x474>)
 8005ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ed6:	f7fd fca5 	bl	8003824 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ede:	f7fd fca1 	bl	8003824 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e10c      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef0:	4b6a      	ldr	r3, [pc, #424]	; (800609c <HAL_RCC_OscConfig+0x474>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f0      	beq.n	8005ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d106      	bne.n	8005f12 <HAL_RCC_OscConfig+0x2ea>
 8005f04:	4b64      	ldr	r3, [pc, #400]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f08:	4a63      	ldr	r2, [pc, #396]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f0a:	f043 0301 	orr.w	r3, r3, #1
 8005f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f10:	e01c      	b.n	8005f4c <HAL_RCC_OscConfig+0x324>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b05      	cmp	r3, #5
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x30c>
 8005f1a:	4b5f      	ldr	r3, [pc, #380]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	4a5e      	ldr	r2, [pc, #376]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f20:	f043 0304 	orr.w	r3, r3, #4
 8005f24:	6713      	str	r3, [r2, #112]	; 0x70
 8005f26:	4b5c      	ldr	r3, [pc, #368]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	4a5b      	ldr	r2, [pc, #364]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	6713      	str	r3, [r2, #112]	; 0x70
 8005f32:	e00b      	b.n	8005f4c <HAL_RCC_OscConfig+0x324>
 8005f34:	4b58      	ldr	r3, [pc, #352]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f38:	4a57      	ldr	r2, [pc, #348]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f3a:	f023 0301 	bic.w	r3, r3, #1
 8005f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f40:	4b55      	ldr	r3, [pc, #340]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	4a54      	ldr	r2, [pc, #336]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f46:	f023 0304 	bic.w	r3, r3, #4
 8005f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d015      	beq.n	8005f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fd fc66 	bl	8003824 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5a:	e00a      	b.n	8005f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f5c:	f7fd fc62 	bl	8003824 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e0cb      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f72:	4b49      	ldr	r3, [pc, #292]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0ee      	beq.n	8005f5c <HAL_RCC_OscConfig+0x334>
 8005f7e:	e014      	b.n	8005faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f80:	f7fd fc50 	bl	8003824 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f86:	e00a      	b.n	8005f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f88:	f7fd fc4c 	bl	8003824 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e0b5      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f9e:	4b3e      	ldr	r3, [pc, #248]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1ee      	bne.n	8005f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d105      	bne.n	8005fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb0:	4b39      	ldr	r3, [pc, #228]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	4a38      	ldr	r2, [pc, #224]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 80a1 	beq.w	8006108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fc6:	4b34      	ldr	r3, [pc, #208]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d05c      	beq.n	800608c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d141      	bne.n	800605e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fda:	4b31      	ldr	r3, [pc, #196]	; (80060a0 <HAL_RCC_OscConfig+0x478>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe0:	f7fd fc20 	bl	8003824 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe8:	f7fd fc1c 	bl	8003824 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e087      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffa:	4b27      	ldr	r3, [pc, #156]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	019b      	lsls	r3, r3, #6
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	3b01      	subs	r3, #1
 8006020:	041b      	lsls	r3, r3, #16
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	061b      	lsls	r3, r3, #24
 800602a:	491b      	ldr	r1, [pc, #108]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 800602c:	4313      	orrs	r3, r2
 800602e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006030:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <HAL_RCC_OscConfig+0x478>)
 8006032:	2201      	movs	r2, #1
 8006034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006036:	f7fd fbf5 	bl	8003824 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800603e:	f7fd fbf1 	bl	8003824 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e05c      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006050:	4b11      	ldr	r3, [pc, #68]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0f0      	beq.n	800603e <HAL_RCC_OscConfig+0x416>
 800605c:	e054      	b.n	8006108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605e:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <HAL_RCC_OscConfig+0x478>)
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006064:	f7fd fbde 	bl	8003824 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800606c:	f7fd fbda 	bl	8003824 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e045      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <HAL_RCC_OscConfig+0x470>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f0      	bne.n	800606c <HAL_RCC_OscConfig+0x444>
 800608a:	e03d      	b.n	8006108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d107      	bne.n	80060a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e038      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
 8006098:	40023800 	.word	0x40023800
 800609c:	40007000 	.word	0x40007000
 80060a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060a4:	4b1b      	ldr	r3, [pc, #108]	; (8006114 <HAL_RCC_OscConfig+0x4ec>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d028      	beq.n	8006104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060bc:	429a      	cmp	r2, r3
 80060be:	d121      	bne.n	8006104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d11a      	bne.n	8006104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060d4:	4013      	ands	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060dc:	4293      	cmp	r3, r2
 80060de:	d111      	bne.n	8006104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	085b      	lsrs	r3, r3, #1
 80060ec:	3b01      	subs	r3, #1
 80060ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40023800 	.word	0x40023800

08006118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e0cc      	b.n	80062c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800612c:	4b68      	ldr	r3, [pc, #416]	; (80062d0 <HAL_RCC_ClockConfig+0x1b8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d90c      	bls.n	8006154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800613a:	4b65      	ldr	r3, [pc, #404]	; (80062d0 <HAL_RCC_ClockConfig+0x1b8>)
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006142:	4b63      	ldr	r3, [pc, #396]	; (80062d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0b8      	b.n	80062c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d020      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800616c:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	4a58      	ldr	r2, [pc, #352]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006184:	4b53      	ldr	r3, [pc, #332]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	4a52      	ldr	r2, [pc, #328]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800618e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006190:	4b50      	ldr	r3, [pc, #320]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	494d      	ldr	r1, [pc, #308]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d044      	beq.n	8006238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d107      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b6:	4b47      	ldr	r3, [pc, #284]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d119      	bne.n	80061f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e07f      	b.n	80062c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d003      	beq.n	80061d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d107      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d6:	4b3f      	ldr	r3, [pc, #252]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e06f      	b.n	80062c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e6:	4b3b      	ldr	r3, [pc, #236]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e067      	b.n	80062c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061f6:	4b37      	ldr	r3, [pc, #220]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f023 0203 	bic.w	r2, r3, #3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4934      	ldr	r1, [pc, #208]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006204:	4313      	orrs	r3, r2
 8006206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006208:	f7fd fb0c 	bl	8003824 <HAL_GetTick>
 800620c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620e:	e00a      	b.n	8006226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006210:	f7fd fb08 	bl	8003824 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	f241 3288 	movw	r2, #5000	; 0x1388
 800621e:	4293      	cmp	r3, r2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e04f      	b.n	80062c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006226:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 020c 	and.w	r2, r3, #12
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	429a      	cmp	r2, r3
 8006236:	d1eb      	bne.n	8006210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006238:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <HAL_RCC_ClockConfig+0x1b8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d20c      	bcs.n	8006260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006246:	4b22      	ldr	r3, [pc, #136]	; (80062d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	4b20      	ldr	r3, [pc, #128]	; (80062d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e032      	b.n	80062c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d008      	beq.n	800627e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800626c:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	4916      	ldr	r1, [pc, #88]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	4313      	orrs	r3, r2
 800627c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d009      	beq.n	800629e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800628a:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	490e      	ldr	r1, [pc, #56]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	4313      	orrs	r3, r2
 800629c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800629e:	f000 f821 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 80062a2:	4602      	mov	r2, r0
 80062a4:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	490a      	ldr	r1, [pc, #40]	; (80062d8 <HAL_RCC_ClockConfig+0x1c0>)
 80062b0:	5ccb      	ldrb	r3, [r1, r3]
 80062b2:	fa22 f303 	lsr.w	r3, r2, r3
 80062b6:	4a09      	ldr	r2, [pc, #36]	; (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 80062b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fd f8d6 	bl	8003470 <HAL_InitTick>

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	40023c00 	.word	0x40023c00
 80062d4:	40023800 	.word	0x40023800
 80062d8:	0800f540 	.word	0x0800f540
 80062dc:	20000010 	.word	0x20000010
 80062e0:	20000014 	.word	0x20000014

080062e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e8:	b094      	sub	sp, #80	; 0x50
 80062ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	647b      	str	r3, [r7, #68]	; 0x44
 80062f0:	2300      	movs	r3, #0
 80062f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062f4:	2300      	movs	r3, #0
 80062f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062fc:	4b79      	ldr	r3, [pc, #484]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f003 030c 	and.w	r3, r3, #12
 8006304:	2b08      	cmp	r3, #8
 8006306:	d00d      	beq.n	8006324 <HAL_RCC_GetSysClockFreq+0x40>
 8006308:	2b08      	cmp	r3, #8
 800630a:	f200 80e1 	bhi.w	80064d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_RCC_GetSysClockFreq+0x34>
 8006312:	2b04      	cmp	r3, #4
 8006314:	d003      	beq.n	800631e <HAL_RCC_GetSysClockFreq+0x3a>
 8006316:	e0db      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006318:	4b73      	ldr	r3, [pc, #460]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800631a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800631c:	e0db      	b.n	80064d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800631e:	4b73      	ldr	r3, [pc, #460]	; (80064ec <HAL_RCC_GetSysClockFreq+0x208>)
 8006320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006322:	e0d8      	b.n	80064d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006324:	4b6f      	ldr	r3, [pc, #444]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800632c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800632e:	4b6d      	ldr	r3, [pc, #436]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d063      	beq.n	8006402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800633a:	4b6a      	ldr	r3, [pc, #424]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	099b      	lsrs	r3, r3, #6
 8006340:	2200      	movs	r2, #0
 8006342:	63bb      	str	r3, [r7, #56]	; 0x38
 8006344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634c:	633b      	str	r3, [r7, #48]	; 0x30
 800634e:	2300      	movs	r3, #0
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
 8006352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006356:	4622      	mov	r2, r4
 8006358:	462b      	mov	r3, r5
 800635a:	f04f 0000 	mov.w	r0, #0
 800635e:	f04f 0100 	mov.w	r1, #0
 8006362:	0159      	lsls	r1, r3, #5
 8006364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006368:	0150      	lsls	r0, r2, #5
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4621      	mov	r1, r4
 8006370:	1a51      	subs	r1, r2, r1
 8006372:	6139      	str	r1, [r7, #16]
 8006374:	4629      	mov	r1, r5
 8006376:	eb63 0301 	sbc.w	r3, r3, r1
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006388:	4659      	mov	r1, fp
 800638a:	018b      	lsls	r3, r1, #6
 800638c:	4651      	mov	r1, sl
 800638e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006392:	4651      	mov	r1, sl
 8006394:	018a      	lsls	r2, r1, #6
 8006396:	4651      	mov	r1, sl
 8006398:	ebb2 0801 	subs.w	r8, r2, r1
 800639c:	4659      	mov	r1, fp
 800639e:	eb63 0901 	sbc.w	r9, r3, r1
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063b6:	4690      	mov	r8, r2
 80063b8:	4699      	mov	r9, r3
 80063ba:	4623      	mov	r3, r4
 80063bc:	eb18 0303 	adds.w	r3, r8, r3
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	462b      	mov	r3, r5
 80063c4:	eb49 0303 	adc.w	r3, r9, r3
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063d6:	4629      	mov	r1, r5
 80063d8:	024b      	lsls	r3, r1, #9
 80063da:	4621      	mov	r1, r4
 80063dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063e0:	4621      	mov	r1, r4
 80063e2:	024a      	lsls	r2, r1, #9
 80063e4:	4610      	mov	r0, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ea:	2200      	movs	r2, #0
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063f4:	f7fa fc48 	bl	8000c88 <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4613      	mov	r3, r2
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006400:	e058      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006402:	4b38      	ldr	r3, [pc, #224]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	2200      	movs	r2, #0
 800640a:	4618      	mov	r0, r3
 800640c:	4611      	mov	r1, r2
 800640e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	2300      	movs	r3, #0
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
 8006418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800641c:	4642      	mov	r2, r8
 800641e:	464b      	mov	r3, r9
 8006420:	f04f 0000 	mov.w	r0, #0
 8006424:	f04f 0100 	mov.w	r1, #0
 8006428:	0159      	lsls	r1, r3, #5
 800642a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800642e:	0150      	lsls	r0, r2, #5
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4641      	mov	r1, r8
 8006436:	ebb2 0a01 	subs.w	sl, r2, r1
 800643a:	4649      	mov	r1, r9
 800643c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800644c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006454:	ebb2 040a 	subs.w	r4, r2, sl
 8006458:	eb63 050b 	sbc.w	r5, r3, fp
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	00eb      	lsls	r3, r5, #3
 8006466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800646a:	00e2      	lsls	r2, r4, #3
 800646c:	4614      	mov	r4, r2
 800646e:	461d      	mov	r5, r3
 8006470:	4643      	mov	r3, r8
 8006472:	18e3      	adds	r3, r4, r3
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	464b      	mov	r3, r9
 8006478:	eb45 0303 	adc.w	r3, r5, r3
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800648a:	4629      	mov	r1, r5
 800648c:	028b      	lsls	r3, r1, #10
 800648e:	4621      	mov	r1, r4
 8006490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006494:	4621      	mov	r1, r4
 8006496:	028a      	lsls	r2, r1, #10
 8006498:	4610      	mov	r0, r2
 800649a:	4619      	mov	r1, r3
 800649c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649e:	2200      	movs	r2, #0
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	61fa      	str	r2, [r7, #28]
 80064a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a8:	f7fa fbee 	bl	8000c88 <__aeabi_uldivmod>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4613      	mov	r3, r2
 80064b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	3301      	adds	r3, #1
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80064c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064ce:	e002      	b.n	80064d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80064d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3750      	adds	r7, #80	; 0x50
 80064dc:	46bd      	mov	sp, r7
 80064de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	00f42400 	.word	0x00f42400
 80064ec:	007a1200 	.word	0x007a1200

080064f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f4:	4b03      	ldr	r3, [pc, #12]	; (8006504 <HAL_RCC_GetHCLKFreq+0x14>)
 80064f6:	681b      	ldr	r3, [r3, #0]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000010 	.word	0x20000010

08006508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800650c:	f7ff fff0 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006510:	4602      	mov	r2, r0
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	0a9b      	lsrs	r3, r3, #10
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	4903      	ldr	r1, [pc, #12]	; (800652c <HAL_RCC_GetPCLK1Freq+0x24>)
 800651e:	5ccb      	ldrb	r3, [r1, r3]
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40023800 	.word	0x40023800
 800652c:	0800f550 	.word	0x0800f550

08006530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006534:	f7ff ffdc 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006538:	4602      	mov	r2, r0
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	0b5b      	lsrs	r3, r3, #13
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	4903      	ldr	r1, [pc, #12]	; (8006554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006546:	5ccb      	ldrb	r3, [r1, r3]
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800654c:	4618      	mov	r0, r3
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40023800 	.word	0x40023800
 8006554:	0800f550 	.word	0x0800f550

08006558 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	220f      	movs	r2, #15
 8006566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006568:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <HAL_RCC_GetClockConfig+0x5c>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 0203 	and.w	r2, r3, #3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006574:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <HAL_RCC_GetClockConfig+0x5c>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <HAL_RCC_GetClockConfig+0x5c>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800658c:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <HAL_RCC_GetClockConfig+0x5c>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	08db      	lsrs	r3, r3, #3
 8006592:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800659a:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <HAL_RCC_GetClockConfig+0x60>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0207 	and.w	r2, r3, #7
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	601a      	str	r2, [r3, #0]
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40023800 	.word	0x40023800
 80065b8:	40023c00 	.word	0x40023c00

080065bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e041      	b.n	8006652 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fc fd74 	bl	80030d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4619      	mov	r1, r3
 80065fa:	4610      	mov	r0, r2
 80065fc:	f000 ffba 	bl	8007574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d001      	beq.n	8006674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e04e      	b.n	8006712 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a23      	ldr	r2, [pc, #140]	; (8006720 <HAL_TIM_Base_Start_IT+0xc4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d022      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669e:	d01d      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <HAL_TIM_Base_Start_IT+0xc8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d018      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1e      	ldr	r2, [pc, #120]	; (8006728 <HAL_TIM_Base_Start_IT+0xcc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d013      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_TIM_Base_Start_IT+0xd0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00e      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1b      	ldr	r2, [pc, #108]	; (8006730 <HAL_TIM_Base_Start_IT+0xd4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a19      	ldr	r2, [pc, #100]	; (8006734 <HAL_TIM_Base_Start_IT+0xd8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a18      	ldr	r2, [pc, #96]	; (8006738 <HAL_TIM_Base_Start_IT+0xdc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d111      	bne.n	8006700 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b06      	cmp	r3, #6
 80066ec:	d010      	beq.n	8006710 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0201 	orr.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fe:	e007      	b.n	8006710 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40010000 	.word	0x40010000
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800
 800672c:	40000c00 	.word	0x40000c00
 8006730:	40010400 	.word	0x40010400
 8006734:	40014000 	.word	0x40014000
 8006738:	40001800 	.word	0x40001800

0800673c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e041      	b.n	80067d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f839 	bl	80067da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3304      	adds	r3, #4
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f000 fefa 	bl	8007574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
	...

080067f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d109      	bne.n	8006814 <HAL_TIM_PWM_Start+0x24>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b01      	cmp	r3, #1
 800680a:	bf14      	ite	ne
 800680c:	2301      	movne	r3, #1
 800680e:	2300      	moveq	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	e022      	b.n	800685a <HAL_TIM_PWM_Start+0x6a>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b04      	cmp	r3, #4
 8006818:	d109      	bne.n	800682e <HAL_TIM_PWM_Start+0x3e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b01      	cmp	r3, #1
 8006824:	bf14      	ite	ne
 8006826:	2301      	movne	r3, #1
 8006828:	2300      	moveq	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	e015      	b.n	800685a <HAL_TIM_PWM_Start+0x6a>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b08      	cmp	r3, #8
 8006832:	d109      	bne.n	8006848 <HAL_TIM_PWM_Start+0x58>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	bf14      	ite	ne
 8006840:	2301      	movne	r3, #1
 8006842:	2300      	moveq	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	e008      	b.n	800685a <HAL_TIM_PWM_Start+0x6a>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b01      	cmp	r3, #1
 8006852:	bf14      	ite	ne
 8006854:	2301      	movne	r3, #1
 8006856:	2300      	moveq	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e07c      	b.n	800695c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start+0x82>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006870:	e013      	b.n	800689a <HAL_TIM_PWM_Start+0xaa>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b04      	cmp	r3, #4
 8006876:	d104      	bne.n	8006882 <HAL_TIM_PWM_Start+0x92>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006880:	e00b      	b.n	800689a <HAL_TIM_PWM_Start+0xaa>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b08      	cmp	r3, #8
 8006886:	d104      	bne.n	8006892 <HAL_TIM_PWM_Start+0xa2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006890:	e003      	b.n	800689a <HAL_TIM_PWM_Start+0xaa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2201      	movs	r2, #1
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 fa7a 	bl	8007d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a2d      	ldr	r2, [pc, #180]	; (8006964 <HAL_TIM_PWM_Start+0x174>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_TIM_PWM_Start+0xcc>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a2c      	ldr	r2, [pc, #176]	; (8006968 <HAL_TIM_PWM_Start+0x178>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d101      	bne.n	80068c0 <HAL_TIM_PWM_Start+0xd0>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <HAL_TIM_PWM_Start+0xd2>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a22      	ldr	r2, [pc, #136]	; (8006964 <HAL_TIM_PWM_Start+0x174>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d022      	beq.n	8006926 <HAL_TIM_PWM_Start+0x136>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e8:	d01d      	beq.n	8006926 <HAL_TIM_PWM_Start+0x136>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1f      	ldr	r2, [pc, #124]	; (800696c <HAL_TIM_PWM_Start+0x17c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d018      	beq.n	8006926 <HAL_TIM_PWM_Start+0x136>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1d      	ldr	r2, [pc, #116]	; (8006970 <HAL_TIM_PWM_Start+0x180>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <HAL_TIM_PWM_Start+0x136>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1c      	ldr	r2, [pc, #112]	; (8006974 <HAL_TIM_PWM_Start+0x184>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00e      	beq.n	8006926 <HAL_TIM_PWM_Start+0x136>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a16      	ldr	r2, [pc, #88]	; (8006968 <HAL_TIM_PWM_Start+0x178>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d009      	beq.n	8006926 <HAL_TIM_PWM_Start+0x136>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a18      	ldr	r2, [pc, #96]	; (8006978 <HAL_TIM_PWM_Start+0x188>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_TIM_PWM_Start+0x136>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a16      	ldr	r2, [pc, #88]	; (800697c <HAL_TIM_PWM_Start+0x18c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d111      	bne.n	800694a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b06      	cmp	r3, #6
 8006936:	d010      	beq.n	800695a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006948:	e007      	b.n	800695a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 0201 	orr.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40010000 	.word	0x40010000
 8006968:	40010400 	.word	0x40010400
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	40000c00 	.word	0x40000c00
 8006978:	40014000 	.word	0x40014000
 800697c:	40001800 	.word	0x40001800

08006980 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e041      	b.n	8006a16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f839 	bl	8006a1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f000 fdd8 	bl	8007574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_IC_Start+0x1a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	e013      	b.n	8006a76 <HAL_TIM_IC_Start+0x42>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d104      	bne.n	8006a5e <HAL_TIM_IC_Start+0x2a>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	e00b      	b.n	8006a76 <HAL_TIM_IC_Start+0x42>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_IC_Start+0x3a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	e003      	b.n	8006a76 <HAL_TIM_IC_Start+0x42>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d104      	bne.n	8006a88 <HAL_TIM_IC_Start+0x54>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	e013      	b.n	8006ab0 <HAL_TIM_IC_Start+0x7c>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d104      	bne.n	8006a98 <HAL_TIM_IC_Start+0x64>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	e00b      	b.n	8006ab0 <HAL_TIM_IC_Start+0x7c>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d104      	bne.n	8006aa8 <HAL_TIM_IC_Start+0x74>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	e003      	b.n	8006ab0 <HAL_TIM_IC_Start+0x7c>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d102      	bne.n	8006abe <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d001      	beq.n	8006ac2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e081      	b.n	8006bc6 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <HAL_TIM_IC_Start+0x9e>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad0:	e013      	b.n	8006afa <HAL_TIM_IC_Start+0xc6>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d104      	bne.n	8006ae2 <HAL_TIM_IC_Start+0xae>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae0:	e00b      	b.n	8006afa <HAL_TIM_IC_Start+0xc6>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d104      	bne.n	8006af2 <HAL_TIM_IC_Start+0xbe>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006af0:	e003      	b.n	8006afa <HAL_TIM_IC_Start+0xc6>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2202      	movs	r2, #2
 8006af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_IC_Start+0xd6>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b08:	e013      	b.n	8006b32 <HAL_TIM_IC_Start+0xfe>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_IC_Start+0xe6>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b18:	e00b      	b.n	8006b32 <HAL_TIM_IC_Start+0xfe>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_IC_Start+0xf6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b28:	e003      	b.n	8006b32 <HAL_TIM_IC_Start+0xfe>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2201      	movs	r2, #1
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 f92e 	bl	8007d9c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a22      	ldr	r2, [pc, #136]	; (8006bd0 <HAL_TIM_IC_Start+0x19c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d022      	beq.n	8006b90 <HAL_TIM_IC_Start+0x15c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b52:	d01d      	beq.n	8006b90 <HAL_TIM_IC_Start+0x15c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1e      	ldr	r2, [pc, #120]	; (8006bd4 <HAL_TIM_IC_Start+0x1a0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d018      	beq.n	8006b90 <HAL_TIM_IC_Start+0x15c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <HAL_TIM_IC_Start+0x1a4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <HAL_TIM_IC_Start+0x15c>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <HAL_TIM_IC_Start+0x1a8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00e      	beq.n	8006b90 <HAL_TIM_IC_Start+0x15c>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <HAL_TIM_IC_Start+0x1ac>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_TIM_IC_Start+0x15c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <HAL_TIM_IC_Start+0x1b0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_TIM_IC_Start+0x15c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <HAL_TIM_IC_Start+0x1b4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d111      	bne.n	8006bb4 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d010      	beq.n	8006bc4 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0201 	orr.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb2:	e007      	b.n	8006bc4 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40010400 	.word	0x40010400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40001800 	.word	0x40001800

08006bec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e097      	b.n	8006d30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7fc fadf 	bl	80031d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c30:	f023 0307 	bic.w	r3, r3, #7
 8006c34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4619      	mov	r1, r3
 8006c40:	4610      	mov	r0, r2
 8006c42:	f000 fc97 	bl	8007574 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6e:	f023 0303 	bic.w	r3, r3, #3
 8006c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c8c:	f023 030c 	bic.w	r3, r3, #12
 8006c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	011a      	lsls	r2, r3, #4
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	031b      	lsls	r3, r3, #12
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006cca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d110      	bne.n	8006d8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d102      	bne.n	8006d74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d6e:	7b7b      	ldrb	r3, [r7, #13]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d001      	beq.n	8006d78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e069      	b.n	8006e4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d88:	e031      	b.n	8006dee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d110      	bne.n	8006db2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d102      	bne.n	8006d9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d96:	7b3b      	ldrb	r3, [r7, #12]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d001      	beq.n	8006da0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e055      	b.n	8006e4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006db0:	e01d      	b.n	8006dee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d108      	bne.n	8006dca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d105      	bne.n	8006dca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dbe:	7b7b      	ldrb	r3, [r7, #13]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d102      	bne.n	8006dca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dc4:	7b3b      	ldrb	r3, [r7, #12]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d001      	beq.n	8006dce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e03e      	b.n	8006e4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <HAL_TIM_Encoder_Start+0xc4>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d008      	beq.n	8006e0c <HAL_TIM_Encoder_Start+0xd4>
 8006dfa:	e00f      	b.n	8006e1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2201      	movs	r2, #1
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 ffc9 	bl	8007d9c <TIM_CCxChannelCmd>
      break;
 8006e0a:	e016      	b.n	8006e3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2201      	movs	r2, #1
 8006e12:	2104      	movs	r1, #4
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 ffc1 	bl	8007d9c <TIM_CCxChannelCmd>
      break;
 8006e1a:	e00e      	b.n	8006e3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2201      	movs	r2, #1
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 ffb9 	bl	8007d9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	2104      	movs	r1, #4
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 ffb2 	bl	8007d9c <TIM_CCxChannelCmd>
      break;
 8006e38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0201 	orr.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d122      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d11b      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0202 	mvn.w	r2, #2
 8006e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fb fafe 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8006e9c:	e005      	b.n	8006eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fb4a 	bl	8007538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fb51 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d122      	bne.n	8006f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d11b      	bne.n	8006f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0204 	mvn.w	r2, #4
 8006ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fb fad4 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8006ef0:	e005      	b.n	8006efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fb20 	bl	8007538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fb27 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d122      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0308 	and.w	r3, r3, #8
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d11b      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0208 	mvn.w	r2, #8
 8006f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fb faaa 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8006f44:	e005      	b.n	8006f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 faf6 	bl	8007538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fafd 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2b10      	cmp	r3, #16
 8006f64:	d122      	bne.n	8006fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	d11b      	bne.n	8006fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0210 	mvn.w	r2, #16
 8006f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2208      	movs	r2, #8
 8006f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7fb fa80 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8006f98:	e005      	b.n	8006fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 facc 	bl	8007538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fad3 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d10e      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d107      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0201 	mvn.w	r2, #1
 8006fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fb ff5c 	bl	8002e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d10e      	bne.n	8007004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff0:	2b80      	cmp	r3, #128	; 0x80
 8006ff2:	d107      	bne.n	8007004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 ffca 	bl	8007f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d10e      	bne.n	8007030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d107      	bne.n	8007030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa98 	bl	8007560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b20      	cmp	r3, #32
 800703c:	d10e      	bne.n	800705c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b20      	cmp	r3, #32
 800704a:	d107      	bne.n	800705c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0220 	mvn.w	r2, #32
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 ff94 	bl	8007f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_TIM_IC_ConfigChannel+0x1e>
 800707e:	2302      	movs	r3, #2
 8007080:	e088      	b.n	8007194 <HAL_TIM_IC_ConfigChannel+0x130>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d11b      	bne.n	80070c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	6819      	ldr	r1, [r3, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f000 fcb8 	bl	8007a14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 020c 	bic.w	r2, r2, #12
 80070b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6999      	ldr	r1, [r3, #24]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	619a      	str	r2, [r3, #24]
 80070c6:	e060      	b.n	800718a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d11c      	bne.n	8007108 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6819      	ldr	r1, [r3, #0]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f000 fd3c 	bl	8007b5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6999      	ldr	r1, [r3, #24]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	021a      	lsls	r2, r3, #8
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	619a      	str	r2, [r3, #24]
 8007106:	e040      	b.n	800718a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b08      	cmp	r3, #8
 800710c:	d11b      	bne.n	8007146 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	6819      	ldr	r1, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f000 fd89 	bl	8007c34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69da      	ldr	r2, [r3, #28]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 020c 	bic.w	r2, r2, #12
 8007130:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69d9      	ldr	r1, [r3, #28]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	61da      	str	r2, [r3, #28]
 8007144:	e021      	b.n	800718a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b0c      	cmp	r3, #12
 800714a:	d11c      	bne.n	8007186 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6819      	ldr	r1, [r3, #0]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f000 fda6 	bl	8007cac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69da      	ldr	r2, [r3, #28]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800716e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69d9      	ldr	r1, [r3, #28]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	021a      	lsls	r2, r3, #8
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	61da      	str	r2, [r3, #28]
 8007184:	e001      	b.n	800718a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e0ae      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b0c      	cmp	r3, #12
 80071c6:	f200 809f 	bhi.w	8007308 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	08007205 	.word	0x08007205
 80071d4:	08007309 	.word	0x08007309
 80071d8:	08007309 	.word	0x08007309
 80071dc:	08007309 	.word	0x08007309
 80071e0:	08007245 	.word	0x08007245
 80071e4:	08007309 	.word	0x08007309
 80071e8:	08007309 	.word	0x08007309
 80071ec:	08007309 	.word	0x08007309
 80071f0:	08007287 	.word	0x08007287
 80071f4:	08007309 	.word	0x08007309
 80071f8:	08007309 	.word	0x08007309
 80071fc:	08007309 	.word	0x08007309
 8007200:	080072c7 	.word	0x080072c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fa52 	bl	80076b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0208 	orr.w	r2, r2, #8
 800721e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0204 	bic.w	r2, r2, #4
 800722e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6999      	ldr	r1, [r3, #24]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	619a      	str	r2, [r3, #24]
      break;
 8007242:	e064      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 faa2 	bl	8007794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800725e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6999      	ldr	r1, [r3, #24]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	021a      	lsls	r2, r3, #8
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	619a      	str	r2, [r3, #24]
      break;
 8007284:	e043      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	4618      	mov	r0, r3
 800728e:	f000 faf7 	bl	8007880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 0208 	orr.w	r2, r2, #8
 80072a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0204 	bic.w	r2, r2, #4
 80072b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69d9      	ldr	r1, [r3, #28]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	61da      	str	r2, [r3, #28]
      break;
 80072c4:	e023      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fb4b 	bl	8007968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69d9      	ldr	r1, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	021a      	lsls	r2, r3, #8
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	61da      	str	r2, [r3, #28]
      break;
 8007306:	e002      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]
      break;
 800730c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_TIM_ConfigClockSource+0x1c>
 8007338:	2302      	movs	r3, #2
 800733a:	e0b4      	b.n	80074a6 <HAL_TIM_ConfigClockSource+0x186>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800735a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007374:	d03e      	beq.n	80073f4 <HAL_TIM_ConfigClockSource+0xd4>
 8007376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737a:	f200 8087 	bhi.w	800748c <HAL_TIM_ConfigClockSource+0x16c>
 800737e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007382:	f000 8086 	beq.w	8007492 <HAL_TIM_ConfigClockSource+0x172>
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738a:	d87f      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 800738c:	2b70      	cmp	r3, #112	; 0x70
 800738e:	d01a      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0xa6>
 8007390:	2b70      	cmp	r3, #112	; 0x70
 8007392:	d87b      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 8007394:	2b60      	cmp	r3, #96	; 0x60
 8007396:	d050      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x11a>
 8007398:	2b60      	cmp	r3, #96	; 0x60
 800739a:	d877      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 800739c:	2b50      	cmp	r3, #80	; 0x50
 800739e:	d03c      	beq.n	800741a <HAL_TIM_ConfigClockSource+0xfa>
 80073a0:	2b50      	cmp	r3, #80	; 0x50
 80073a2:	d873      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 80073a4:	2b40      	cmp	r3, #64	; 0x40
 80073a6:	d058      	beq.n	800745a <HAL_TIM_ConfigClockSource+0x13a>
 80073a8:	2b40      	cmp	r3, #64	; 0x40
 80073aa:	d86f      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 80073ac:	2b30      	cmp	r3, #48	; 0x30
 80073ae:	d064      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x15a>
 80073b0:	2b30      	cmp	r3, #48	; 0x30
 80073b2:	d86b      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d060      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x15a>
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d867      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d05c      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x15a>
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d05a      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x15a>
 80073c4:	e062      	b.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6899      	ldr	r1, [r3, #8]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f000 fcc1 	bl	8007d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	609a      	str	r2, [r3, #8]
      break;
 80073f2:	e04f      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	6899      	ldr	r1, [r3, #8]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f000 fcaa 	bl	8007d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007416:	609a      	str	r2, [r3, #8]
      break;
 8007418:	e03c      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	6859      	ldr	r1, [r3, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	461a      	mov	r2, r3
 8007428:	f000 fb68 	bl	8007afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2150      	movs	r1, #80	; 0x50
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fc77 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007438:	e02c      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6859      	ldr	r1, [r3, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	461a      	mov	r2, r3
 8007448:	f000 fbc4 	bl	8007bd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2160      	movs	r1, #96	; 0x60
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fc67 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007458:	e01c      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6859      	ldr	r1, [r3, #4]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	461a      	mov	r2, r3
 8007468:	f000 fb48 	bl	8007afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2140      	movs	r1, #64	; 0x40
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fc57 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007478:	e00c      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f000 fc4e 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 800748a:	e003      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
      break;
 8007490:	e000      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b0c      	cmp	r3, #12
 80074c2:	d831      	bhi.n	8007528 <HAL_TIM_ReadCapturedValue+0x78>
 80074c4:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	08007501 	.word	0x08007501
 80074d0:	08007529 	.word	0x08007529
 80074d4:	08007529 	.word	0x08007529
 80074d8:	08007529 	.word	0x08007529
 80074dc:	0800750b 	.word	0x0800750b
 80074e0:	08007529 	.word	0x08007529
 80074e4:	08007529 	.word	0x08007529
 80074e8:	08007529 	.word	0x08007529
 80074ec:	08007515 	.word	0x08007515
 80074f0:	08007529 	.word	0x08007529
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007529 	.word	0x08007529
 80074fc:	0800751f 	.word	0x0800751f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007506:	60fb      	str	r3, [r7, #12]

      break;
 8007508:	e00f      	b.n	800752a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	60fb      	str	r3, [r7, #12]

      break;
 8007512:	e00a      	b.n	800752a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751a:	60fb      	str	r3, [r7, #12]

      break;
 800751c:	e005      	b.n	800752a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	60fb      	str	r3, [r7, #12]

      break;
 8007526:	e000      	b.n	800752a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007528:	bf00      	nop
  }

  return tmpreg;
 800752a:	68fb      	ldr	r3, [r7, #12]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a40      	ldr	r2, [pc, #256]	; (8007688 <TIM_Base_SetConfig+0x114>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d013      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007592:	d00f      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a3d      	ldr	r2, [pc, #244]	; (800768c <TIM_Base_SetConfig+0x118>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00b      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a3c      	ldr	r2, [pc, #240]	; (8007690 <TIM_Base_SetConfig+0x11c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d007      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a3b      	ldr	r2, [pc, #236]	; (8007694 <TIM_Base_SetConfig+0x120>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a3a      	ldr	r2, [pc, #232]	; (8007698 <TIM_Base_SetConfig+0x124>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d108      	bne.n	80075c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a2f      	ldr	r2, [pc, #188]	; (8007688 <TIM_Base_SetConfig+0x114>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d02b      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d4:	d027      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a2c      	ldr	r2, [pc, #176]	; (800768c <TIM_Base_SetConfig+0x118>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d023      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a2b      	ldr	r2, [pc, #172]	; (8007690 <TIM_Base_SetConfig+0x11c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d01f      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <TIM_Base_SetConfig+0x120>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01b      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a29      	ldr	r2, [pc, #164]	; (8007698 <TIM_Base_SetConfig+0x124>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d017      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a28      	ldr	r2, [pc, #160]	; (800769c <TIM_Base_SetConfig+0x128>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a27      	ldr	r2, [pc, #156]	; (80076a0 <TIM_Base_SetConfig+0x12c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00f      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a26      	ldr	r2, [pc, #152]	; (80076a4 <TIM_Base_SetConfig+0x130>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00b      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a25      	ldr	r2, [pc, #148]	; (80076a8 <TIM_Base_SetConfig+0x134>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d007      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a24      	ldr	r2, [pc, #144]	; (80076ac <TIM_Base_SetConfig+0x138>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d003      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a23      	ldr	r2, [pc, #140]	; (80076b0 <TIM_Base_SetConfig+0x13c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d108      	bne.n	8007638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800762c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a0a      	ldr	r2, [pc, #40]	; (8007688 <TIM_Base_SetConfig+0x114>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d003      	beq.n	800766c <TIM_Base_SetConfig+0xf8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a0c      	ldr	r2, [pc, #48]	; (8007698 <TIM_Base_SetConfig+0x124>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d103      	bne.n	8007674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	691a      	ldr	r2, [r3, #16]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	615a      	str	r2, [r3, #20]
}
 800767a:	bf00      	nop
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40010000 	.word	0x40010000
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800
 8007694:	40000c00 	.word	0x40000c00
 8007698:	40010400 	.word	0x40010400
 800769c:	40014000 	.word	0x40014000
 80076a0:	40014400 	.word	0x40014400
 80076a4:	40014800 	.word	0x40014800
 80076a8:	40001800 	.word	0x40001800
 80076ac:	40001c00 	.word	0x40001c00
 80076b0:	40002000 	.word	0x40002000

080076b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f023 0201 	bic.w	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f023 0302 	bic.w	r3, r3, #2
 80076fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a20      	ldr	r2, [pc, #128]	; (800778c <TIM_OC1_SetConfig+0xd8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_OC1_SetConfig+0x64>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a1f      	ldr	r2, [pc, #124]	; (8007790 <TIM_OC1_SetConfig+0xdc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d10c      	bne.n	8007732 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f023 0308 	bic.w	r3, r3, #8
 800771e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	4313      	orrs	r3, r2
 8007728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f023 0304 	bic.w	r3, r3, #4
 8007730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a15      	ldr	r2, [pc, #84]	; (800778c <TIM_OC1_SetConfig+0xd8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d003      	beq.n	8007742 <TIM_OC1_SetConfig+0x8e>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a14      	ldr	r2, [pc, #80]	; (8007790 <TIM_OC1_SetConfig+0xdc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d111      	bne.n	8007766 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	621a      	str	r2, [r3, #32]
}
 8007780:	bf00      	nop
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	40010000 	.word	0x40010000
 8007790:	40010400 	.word	0x40010400

08007794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f023 0210 	bic.w	r2, r3, #16
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f023 0320 	bic.w	r3, r3, #32
 80077de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a22      	ldr	r2, [pc, #136]	; (8007878 <TIM_OC2_SetConfig+0xe4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d003      	beq.n	80077fc <TIM_OC2_SetConfig+0x68>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a21      	ldr	r2, [pc, #132]	; (800787c <TIM_OC2_SetConfig+0xe8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d10d      	bne.n	8007818 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007816:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a17      	ldr	r2, [pc, #92]	; (8007878 <TIM_OC2_SetConfig+0xe4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d003      	beq.n	8007828 <TIM_OC2_SetConfig+0x94>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a16      	ldr	r2, [pc, #88]	; (800787c <TIM_OC2_SetConfig+0xe8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d113      	bne.n	8007850 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800782e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40010000 	.word	0x40010000
 800787c:	40010400 	.word	0x40010400

08007880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0303 	bic.w	r3, r3, #3
 80078b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a21      	ldr	r2, [pc, #132]	; (8007960 <TIM_OC3_SetConfig+0xe0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <TIM_OC3_SetConfig+0x66>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a20      	ldr	r2, [pc, #128]	; (8007964 <TIM_OC3_SetConfig+0xe4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d10d      	bne.n	8007902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a16      	ldr	r2, [pc, #88]	; (8007960 <TIM_OC3_SetConfig+0xe0>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d003      	beq.n	8007912 <TIM_OC3_SetConfig+0x92>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a15      	ldr	r2, [pc, #84]	; (8007964 <TIM_OC3_SetConfig+0xe4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d113      	bne.n	800793a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	621a      	str	r2, [r3, #32]
}
 8007954:	bf00      	nop
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	40010000 	.word	0x40010000
 8007964:	40010400 	.word	0x40010400

08007968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800799e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	031b      	lsls	r3, r3, #12
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a12      	ldr	r2, [pc, #72]	; (8007a0c <TIM_OC4_SetConfig+0xa4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d003      	beq.n	80079d0 <TIM_OC4_SetConfig+0x68>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a11      	ldr	r2, [pc, #68]	; (8007a10 <TIM_OC4_SetConfig+0xa8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d109      	bne.n	80079e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	019b      	lsls	r3, r3, #6
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40010400 	.word	0x40010400

08007a14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0201 	bic.w	r2, r3, #1
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4a28      	ldr	r2, [pc, #160]	; (8007ae0 <TIM_TI1_SetConfig+0xcc>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d01b      	beq.n	8007a7a <TIM_TI1_SetConfig+0x66>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a48:	d017      	beq.n	8007a7a <TIM_TI1_SetConfig+0x66>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4a25      	ldr	r2, [pc, #148]	; (8007ae4 <TIM_TI1_SetConfig+0xd0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <TIM_TI1_SetConfig+0x66>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4a24      	ldr	r2, [pc, #144]	; (8007ae8 <TIM_TI1_SetConfig+0xd4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00f      	beq.n	8007a7a <TIM_TI1_SetConfig+0x66>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4a23      	ldr	r2, [pc, #140]	; (8007aec <TIM_TI1_SetConfig+0xd8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00b      	beq.n	8007a7a <TIM_TI1_SetConfig+0x66>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4a22      	ldr	r2, [pc, #136]	; (8007af0 <TIM_TI1_SetConfig+0xdc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d007      	beq.n	8007a7a <TIM_TI1_SetConfig+0x66>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4a21      	ldr	r2, [pc, #132]	; (8007af4 <TIM_TI1_SetConfig+0xe0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d003      	beq.n	8007a7a <TIM_TI1_SetConfig+0x66>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4a20      	ldr	r2, [pc, #128]	; (8007af8 <TIM_TI1_SetConfig+0xe4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d101      	bne.n	8007a7e <TIM_TI1_SetConfig+0x6a>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <TIM_TI1_SetConfig+0x6c>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 0303 	bic.w	r3, r3, #3
 8007a8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	e003      	b.n	8007a9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f043 0301 	orr.w	r3, r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f023 030a 	bic.w	r3, r3, #10
 8007ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f003 030a 	and.w	r3, r3, #10
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40010000 	.word	0x40010000
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	40000800 	.word	0x40000800
 8007aec:	40000c00 	.word	0x40000c00
 8007af0:	40010400 	.word	0x40010400
 8007af4:	40014000 	.word	0x40014000
 8007af8:	40001800 	.word	0x40001800

08007afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	f023 0201 	bic.w	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f023 030a 	bic.w	r3, r3, #10
 8007b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	621a      	str	r2, [r3, #32]
}
 8007b4e:	bf00      	nop
 8007b50:	371c      	adds	r7, #28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	f023 0210 	bic.w	r2, r3, #16
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	031b      	lsls	r3, r3, #12
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	621a      	str	r2, [r3, #32]
}
 8007bc8:	bf00      	nop
 8007bca:	371c      	adds	r7, #28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	f023 0210 	bic.w	r2, r3, #16
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	031b      	lsls	r3, r3, #12
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	621a      	str	r2, [r3, #32]
}
 8007c28:	bf00      	nop
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f023 0303 	bic.w	r3, r3, #3
 8007c60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007c84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	621a      	str	r2, [r3, #32]
}
 8007ca0:	bf00      	nop
 8007ca2:	371c      	adds	r7, #28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	031b      	lsls	r3, r3, #12
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	031b      	lsls	r3, r3, #12
 8007d04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f043 0307 	orr.w	r3, r3, #7
 8007d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	609a      	str	r2, [r3, #8]
}
 8007d50:	bf00      	nop
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	021a      	lsls	r2, r3, #8
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	609a      	str	r2, [r3, #8]
}
 8007d90:	bf00      	nop
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f003 031f 	and.w	r3, r3, #31
 8007dae:	2201      	movs	r2, #1
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6a1a      	ldr	r2, [r3, #32]
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	43db      	mvns	r3, r3
 8007dbe:	401a      	ands	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6a1a      	ldr	r2, [r3, #32]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f003 031f 	and.w	r3, r3, #31
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	621a      	str	r2, [r3, #32]
}
 8007dda:	bf00      	nop
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
	...

08007de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e05a      	b.n	8007eb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a21      	ldr	r2, [pc, #132]	; (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d022      	beq.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e4c:	d01d      	beq.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1d      	ldr	r2, [pc, #116]	; (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d018      	beq.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a1b      	ldr	r2, [pc, #108]	; (8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d013      	beq.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1a      	ldr	r2, [pc, #104]	; (8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d00e      	beq.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a18      	ldr	r2, [pc, #96]	; (8007ed4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d009      	beq.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a17      	ldr	r2, [pc, #92]	; (8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d004      	beq.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a15      	ldr	r2, [pc, #84]	; (8007edc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d10c      	bne.n	8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40000400 	.word	0x40000400
 8007ecc:	40000800 	.word	0x40000800
 8007ed0:	40000c00 	.word	0x40000c00
 8007ed4:	40010400 	.word	0x40010400
 8007ed8:	40014000 	.word	0x40014000
 8007edc:	40001800 	.word	0x40001800

08007ee0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e03d      	b.n	8007f78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e03f      	b.n	800803e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d106      	bne.n	8007fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7fb f9fc 	bl	80033d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2224      	movs	r2, #36	; 0x24
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fddb 	bl	8008bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	695a      	ldr	r2, [r3, #20]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b08a      	sub	sp, #40	; 0x28
 800804a:	af02      	add	r7, sp, #8
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	4613      	mov	r3, r2
 8008054:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b20      	cmp	r3, #32
 8008064:	d17c      	bne.n	8008160 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <HAL_UART_Transmit+0x2c>
 800806c:	88fb      	ldrh	r3, [r7, #6]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e075      	b.n	8008162 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_UART_Transmit+0x3e>
 8008080:	2302      	movs	r3, #2
 8008082:	e06e      	b.n	8008162 <HAL_UART_Transmit+0x11c>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2221      	movs	r2, #33	; 0x21
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800809a:	f7fb fbc3 	bl	8003824 <HAL_GetTick>
 800809e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	88fa      	ldrh	r2, [r7, #6]
 80080a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	88fa      	ldrh	r2, [r7, #6]
 80080aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b4:	d108      	bne.n	80080c8 <HAL_UART_Transmit+0x82>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d104      	bne.n	80080c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	61bb      	str	r3, [r7, #24]
 80080c6:	e003      	b.n	80080d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80080d8:	e02a      	b.n	8008130 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2200      	movs	r2, #0
 80080e2:	2180      	movs	r1, #128	; 0x80
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fb1f 	bl	8008728 <UART_WaitOnFlagUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e036      	b.n	8008162 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10b      	bne.n	8008112 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	3302      	adds	r3, #2
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	e007      	b.n	8008122 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	3301      	adds	r3, #1
 8008120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b01      	subs	r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008134:	b29b      	uxth	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1cf      	bne.n	80080da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2200      	movs	r2, #0
 8008142:	2140      	movs	r1, #64	; 0x40
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 faef 	bl	8008728 <UART_WaitOnFlagUntilTimeout>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e006      	b.n	8008162 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	e000      	b.n	8008162 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008160:	2302      	movs	r3, #2
  }
}
 8008162:	4618      	mov	r0, r3
 8008164:	3720      	adds	r7, #32
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	4613      	mov	r3, r2
 8008176:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b20      	cmp	r3, #32
 8008182:	d11d      	bne.n	80081c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <HAL_UART_Receive_IT+0x26>
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e016      	b.n	80081c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_UART_Receive_IT+0x38>
 800819e:	2302      	movs	r3, #2
 80081a0:	e00f      	b.n	80081c2 <HAL_UART_Receive_IT+0x58>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	461a      	mov	r2, r3
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 fb24 	bl	8008804 <UART_Start_Receive_IT>
 80081bc:	4603      	mov	r3, r0
 80081be:	e000      	b.n	80081c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80081c0:	2302      	movs	r3, #2
  }
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
	...

080081cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b0ba      	sub	sp, #232	; 0xe8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800820a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10f      	bne.n	8008232 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <HAL_UART_IRQHandler+0x66>
 800821e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fc03 	bl	8008a36 <UART_Receive_IT>
      return;
 8008230:	e256      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80de 	beq.w	80083f8 <HAL_UART_IRQHandler+0x22c>
 800823c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80d1 	beq.w	80083f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <HAL_UART_IRQHandler+0xae>
 8008262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	f043 0201 	orr.w	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800827a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00b      	beq.n	800829e <HAL_UART_IRQHandler+0xd2>
 8008286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	f043 0202 	orr.w	r2, r3, #2
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00b      	beq.n	80082c2 <HAL_UART_IRQHandler+0xf6>
 80082aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d005      	beq.n	80082c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f043 0204 	orr.w	r2, r3, #4
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d011      	beq.n	80082f2 <HAL_UART_IRQHandler+0x126>
 80082ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d105      	bne.n	80082e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	f043 0208 	orr.w	r2, r3, #8
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 81ed 	beq.w	80086d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b00      	cmp	r3, #0
 8008306:	d008      	beq.n	800831a <HAL_UART_IRQHandler+0x14e>
 8008308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb8e 	bl	8008a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b40      	cmp	r3, #64	; 0x40
 8008326:	bf0c      	ite	eq
 8008328:	2301      	moveq	r3, #1
 800832a:	2300      	movne	r3, #0
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	f003 0308 	and.w	r3, r3, #8
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <HAL_UART_IRQHandler+0x17a>
 800833e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008342:	2b00      	cmp	r3, #0
 8008344:	d04f      	beq.n	80083e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa96 	bl	8008878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008356:	2b40      	cmp	r3, #64	; 0x40
 8008358:	d141      	bne.n	80083de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3314      	adds	r3, #20
 8008382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008386:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800838a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800839e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1d9      	bne.n	800835a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d013      	beq.n	80083d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	4a7d      	ldr	r2, [pc, #500]	; (80085a8 <HAL_UART_IRQHandler+0x3dc>)
 80083b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fc f862 	bl	8004484 <HAL_DMA_Abort_IT>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d016      	beq.n	80083f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d4:	e00e      	b.n	80083f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f990 	bl	80086fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	e00a      	b.n	80083f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f98c 	bl	80086fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e4:	e006      	b.n	80083f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f988 	bl	80086fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083f2:	e170      	b.n	80086d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f4:	bf00      	nop
    return;
 80083f6:	e16e      	b.n	80086d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	f040 814a 	bne.w	8008696 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 8143 	beq.w	8008696 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 813c 	beq.w	8008696 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800841e:	2300      	movs	r3, #0
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60bb      	str	r3, [r7, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843e:	2b40      	cmp	r3, #64	; 0x40
 8008440:	f040 80b4 	bne.w	80085ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008450:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 8140 	beq.w	80086da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800845e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008462:	429a      	cmp	r2, r3
 8008464:	f080 8139 	bcs.w	80086da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800846e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847a:	f000 8088 	beq.w	800858e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	330c      	adds	r3, #12
 8008484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008494:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800849c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	330c      	adds	r3, #12
 80084a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1d9      	bne.n	800847e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3314      	adds	r3, #20
 80084d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084dc:	f023 0301 	bic.w	r3, r3, #1
 80084e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3314      	adds	r3, #20
 80084ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e1      	bne.n	80084ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3314      	adds	r3, #20
 800850c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800851c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3314      	adds	r3, #20
 8008526:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800852a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800852c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008530:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e3      	bne.n	8008506 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800855c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855e:	f023 0310 	bic.w	r3, r3, #16
 8008562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	330c      	adds	r3, #12
 800856c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008570:	65ba      	str	r2, [r7, #88]	; 0x58
 8008572:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800857e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e3      	bne.n	800854c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	4618      	mov	r0, r3
 800858a:	f7fb ff0b 	bl	80043a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008596:	b29b      	uxth	r3, r3
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	b29b      	uxth	r3, r3
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f8b6 	bl	8008710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085a4:	e099      	b.n	80086da <HAL_UART_IRQHandler+0x50e>
 80085a6:	bf00      	nop
 80085a8:	0800893f 	.word	0x0800893f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 808b 	beq.w	80086de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 8086 	beq.w	80086de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	330c      	adds	r3, #12
 80085d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	330c      	adds	r3, #12
 80085f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085f6:	647a      	str	r2, [r7, #68]	; 0x44
 80085f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e3      	bne.n	80085d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3314      	adds	r3, #20
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	623b      	str	r3, [r7, #32]
   return(result);
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3314      	adds	r3, #20
 800862a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800862e:	633a      	str	r2, [r7, #48]	; 0x30
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008636:	e841 2300 	strex	r3, r2, [r1]
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1e3      	bne.n	800860a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	330c      	adds	r3, #12
 8008656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0310 	bic.w	r3, r3, #16
 8008666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	330c      	adds	r3, #12
 8008670:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008674:	61fa      	str	r2, [r7, #28]
 8008676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	69b9      	ldr	r1, [r7, #24]
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	617b      	str	r3, [r7, #20]
   return(result);
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e3      	bne.n	8008650 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f83e 	bl	8008710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008694:	e023      	b.n	80086de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d009      	beq.n	80086b6 <HAL_UART_IRQHandler+0x4ea>
 80086a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f959 	bl	8008966 <UART_Transmit_IT>
    return;
 80086b4:	e014      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00e      	beq.n	80086e0 <HAL_UART_IRQHandler+0x514>
 80086c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d008      	beq.n	80086e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f999 	bl	8008a06 <UART_EndTransmit_IT>
    return;
 80086d4:	e004      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
    return;
 80086d6:	bf00      	nop
 80086d8:	e002      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
      return;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
      return;
 80086de:	bf00      	nop
  }
}
 80086e0:	37e8      	adds	r7, #232	; 0xe8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop

080086e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b090      	sub	sp, #64	; 0x40
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	4613      	mov	r3, r2
 8008736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008738:	e050      	b.n	80087dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800873a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800873c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008740:	d04c      	beq.n	80087dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008744:	2b00      	cmp	r3, #0
 8008746:	d007      	beq.n	8008758 <UART_WaitOnFlagUntilTimeout+0x30>
 8008748:	f7fb f86c 	bl	8003824 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008754:	429a      	cmp	r2, r3
 8008756:	d241      	bcs.n	80087dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	330c      	adds	r3, #12
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	330c      	adds	r3, #12
 8008776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008778:	637a      	str	r2, [r7, #52]	; 0x34
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800877e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e5      	bne.n	8008758 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3314      	adds	r3, #20
 8008792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	613b      	str	r3, [r7, #16]
   return(result);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3314      	adds	r3, #20
 80087aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ac:	623a      	str	r2, [r7, #32]
 80087ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	69f9      	ldr	r1, [r7, #28]
 80087b2:	6a3a      	ldr	r2, [r7, #32]
 80087b4:	e841 2300 	strex	r3, r2, [r1]
 80087b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e5      	bne.n	800878c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e00f      	b.n	80087fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	4013      	ands	r3, r2
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	bf0c      	ite	eq
 80087ec:	2301      	moveq	r3, #1
 80087ee:	2300      	movne	r3, #0
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	461a      	mov	r2, r3
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d09f      	beq.n	800873a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3740      	adds	r7, #64	; 0x40
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	88fa      	ldrh	r2, [r7, #6]
 800881c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	88fa      	ldrh	r2, [r7, #6]
 8008822:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2222      	movs	r2, #34	; 0x22
 800882e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68da      	ldr	r2, [r3, #12]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008848:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	695a      	ldr	r2, [r3, #20]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f042 0201 	orr.w	r2, r2, #1
 8008858:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0220 	orr.w	r2, r2, #32
 8008868:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008878:	b480      	push	{r7}
 800887a:	b095      	sub	sp, #84	; 0x54
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	330c      	adds	r3, #12
 800889e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088a0:	643a      	str	r2, [r7, #64]	; 0x40
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e5      	bne.n	8008880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3314      	adds	r3, #20
 80088ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	f023 0301 	bic.w	r3, r3, #1
 80088ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3314      	adds	r3, #20
 80088d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d119      	bne.n	8008924 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f023 0310 	bic.w	r3, r3, #16
 8008906:	647b      	str	r3, [r7, #68]	; 0x44
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	330c      	adds	r3, #12
 800890e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008910:	61ba      	str	r2, [r7, #24]
 8008912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6979      	ldr	r1, [r7, #20]
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	613b      	str	r3, [r7, #16]
   return(result);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e5      	bne.n	80088f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008932:	bf00      	nop
 8008934:	3754      	adds	r7, #84	; 0x54
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f7ff fecf 	bl	80086fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b21      	cmp	r3, #33	; 0x21
 8008978:	d13e      	bne.n	80089f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008982:	d114      	bne.n	80089ae <UART_Transmit_IT+0x48>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d110      	bne.n	80089ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	1c9a      	adds	r2, r3, #2
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	621a      	str	r2, [r3, #32]
 80089ac:	e008      	b.n	80089c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	1c59      	adds	r1, r3, #1
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6211      	str	r1, [r2, #32]
 80089b8:	781a      	ldrb	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4619      	mov	r1, r3
 80089ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10f      	bne.n	80089f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	e000      	b.n	80089fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089f8:	2302      	movs	r3, #2
  }
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2220      	movs	r2, #32
 8008a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff fe5e 	bl	80086e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b08c      	sub	sp, #48	; 0x30
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b22      	cmp	r3, #34	; 0x22
 8008a48:	f040 80ab 	bne.w	8008ba2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a54:	d117      	bne.n	8008a86 <UART_Receive_IT+0x50>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d113      	bne.n	8008a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	1c9a      	adds	r2, r3, #2
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	629a      	str	r2, [r3, #40]	; 0x28
 8008a84:	e026      	b.n	8008ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a98:	d007      	beq.n	8008aaa <UART_Receive_IT+0x74>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <UART_Receive_IT+0x82>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d106      	bne.n	8008ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	e008      	b.n	8008aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	3b01      	subs	r3, #1
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d15a      	bne.n	8008b9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0220 	bic.w	r2, r2, #32
 8008af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	695a      	ldr	r2, [r3, #20]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0201 	bic.w	r2, r2, #1
 8008b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d135      	bne.n	8008b94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f023 0310 	bic.w	r3, r3, #16
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	330c      	adds	r3, #12
 8008b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b4e:	623a      	str	r2, [r7, #32]
 8008b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	69f9      	ldr	r1, [r7, #28]
 8008b54:	6a3a      	ldr	r2, [r7, #32]
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e5      	bne.n	8008b2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0310 	and.w	r3, r3, #16
 8008b6c:	2b10      	cmp	r3, #16
 8008b6e:	d10a      	bne.n	8008b86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7ff fdbf 	bl	8008710 <HAL_UARTEx_RxEventCallback>
 8008b92:	e002      	b.n	8008b9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7f9 fd3f 	bl	8002618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e002      	b.n	8008ba4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e000      	b.n	8008ba4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008ba2:	2302      	movs	r3, #2
  }
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3730      	adds	r7, #48	; 0x30
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb0:	b0c0      	sub	sp, #256	; 0x100
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc8:	68d9      	ldr	r1, [r3, #12]
 8008bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	ea40 0301 	orr.w	r3, r0, r1
 8008bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	431a      	orrs	r2, r3
 8008be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	431a      	orrs	r2, r3
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c04:	f021 010c 	bic.w	r1, r1, #12
 8008c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c12:	430b      	orrs	r3, r1
 8008c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c26:	6999      	ldr	r1, [r3, #24]
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	ea40 0301 	orr.w	r3, r0, r1
 8008c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4b8f      	ldr	r3, [pc, #572]	; (8008e78 <UART_SetConfig+0x2cc>)
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d005      	beq.n	8008c4c <UART_SetConfig+0xa0>
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b8d      	ldr	r3, [pc, #564]	; (8008e7c <UART_SetConfig+0x2d0>)
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d104      	bne.n	8008c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c4c:	f7fd fc70 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 8008c50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c54:	e003      	b.n	8008c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c56:	f7fd fc57 	bl	8006508 <HAL_RCC_GetPCLK1Freq>
 8008c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c68:	f040 810c 	bne.w	8008e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c7e:	4622      	mov	r2, r4
 8008c80:	462b      	mov	r3, r5
 8008c82:	1891      	adds	r1, r2, r2
 8008c84:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c86:	415b      	adcs	r3, r3
 8008c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c8e:	4621      	mov	r1, r4
 8008c90:	eb12 0801 	adds.w	r8, r2, r1
 8008c94:	4629      	mov	r1, r5
 8008c96:	eb43 0901 	adc.w	r9, r3, r1
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	f04f 0300 	mov.w	r3, #0
 8008ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cae:	4690      	mov	r8, r2
 8008cb0:	4699      	mov	r9, r3
 8008cb2:	4623      	mov	r3, r4
 8008cb4:	eb18 0303 	adds.w	r3, r8, r3
 8008cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	eb49 0303 	adc.w	r3, r9, r3
 8008cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cda:	460b      	mov	r3, r1
 8008cdc:	18db      	adds	r3, r3, r3
 8008cde:	653b      	str	r3, [r7, #80]	; 0x50
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	eb42 0303 	adc.w	r3, r2, r3
 8008ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cf0:	f7f7 ffca 	bl	8000c88 <__aeabi_uldivmod>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4b61      	ldr	r3, [pc, #388]	; (8008e80 <UART_SetConfig+0x2d4>)
 8008cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8008cfe:	095b      	lsrs	r3, r3, #5
 8008d00:	011c      	lsls	r4, r3, #4
 8008d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d14:	4642      	mov	r2, r8
 8008d16:	464b      	mov	r3, r9
 8008d18:	1891      	adds	r1, r2, r2
 8008d1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d1c:	415b      	adcs	r3, r3
 8008d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d24:	4641      	mov	r1, r8
 8008d26:	eb12 0a01 	adds.w	sl, r2, r1
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	f04f 0300 	mov.w	r3, #0
 8008d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d44:	4692      	mov	sl, r2
 8008d46:	469b      	mov	fp, r3
 8008d48:	4643      	mov	r3, r8
 8008d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d52:	464b      	mov	r3, r9
 8008d54:	eb4b 0303 	adc.w	r3, fp, r3
 8008d58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d70:	460b      	mov	r3, r1
 8008d72:	18db      	adds	r3, r3, r3
 8008d74:	643b      	str	r3, [r7, #64]	; 0x40
 8008d76:	4613      	mov	r3, r2
 8008d78:	eb42 0303 	adc.w	r3, r2, r3
 8008d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d86:	f7f7 ff7f 	bl	8000c88 <__aeabi_uldivmod>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4b3b      	ldr	r3, [pc, #236]	; (8008e80 <UART_SetConfig+0x2d4>)
 8008d92:	fba3 2301 	umull	r2, r3, r3, r1
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	2264      	movs	r2, #100	; 0x64
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
 8008d9e:	1acb      	subs	r3, r1, r3
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008da6:	4b36      	ldr	r3, [pc, #216]	; (8008e80 <UART_SetConfig+0x2d4>)
 8008da8:	fba3 2302 	umull	r2, r3, r3, r2
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008db4:	441c      	add	r4, r3
 8008db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008dc8:	4642      	mov	r2, r8
 8008dca:	464b      	mov	r3, r9
 8008dcc:	1891      	adds	r1, r2, r2
 8008dce:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dd0:	415b      	adcs	r3, r3
 8008dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008dd8:	4641      	mov	r1, r8
 8008dda:	1851      	adds	r1, r2, r1
 8008ddc:	6339      	str	r1, [r7, #48]	; 0x30
 8008dde:	4649      	mov	r1, r9
 8008de0:	414b      	adcs	r3, r1
 8008de2:	637b      	str	r3, [r7, #52]	; 0x34
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	f04f 0300 	mov.w	r3, #0
 8008dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008df0:	4659      	mov	r1, fp
 8008df2:	00cb      	lsls	r3, r1, #3
 8008df4:	4651      	mov	r1, sl
 8008df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dfa:	4651      	mov	r1, sl
 8008dfc:	00ca      	lsls	r2, r1, #3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	4642      	mov	r2, r8
 8008e06:	189b      	adds	r3, r3, r2
 8008e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e0c:	464b      	mov	r3, r9
 8008e0e:	460a      	mov	r2, r1
 8008e10:	eb42 0303 	adc.w	r3, r2, r3
 8008e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	18db      	adds	r3, r3, r3
 8008e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e32:	4613      	mov	r3, r2
 8008e34:	eb42 0303 	adc.w	r3, r2, r3
 8008e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e42:	f7f7 ff21 	bl	8000c88 <__aeabi_uldivmod>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4b0d      	ldr	r3, [pc, #52]	; (8008e80 <UART_SetConfig+0x2d4>)
 8008e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e50:	095b      	lsrs	r3, r3, #5
 8008e52:	2164      	movs	r1, #100	; 0x64
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	3332      	adds	r3, #50	; 0x32
 8008e5e:	4a08      	ldr	r2, [pc, #32]	; (8008e80 <UART_SetConfig+0x2d4>)
 8008e60:	fba2 2303 	umull	r2, r3, r2, r3
 8008e64:	095b      	lsrs	r3, r3, #5
 8008e66:	f003 0207 	and.w	r2, r3, #7
 8008e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4422      	add	r2, r4
 8008e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e74:	e105      	b.n	8009082 <UART_SetConfig+0x4d6>
 8008e76:	bf00      	nop
 8008e78:	40011000 	.word	0x40011000
 8008e7c:	40011400 	.word	0x40011400
 8008e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e96:	4642      	mov	r2, r8
 8008e98:	464b      	mov	r3, r9
 8008e9a:	1891      	adds	r1, r2, r2
 8008e9c:	6239      	str	r1, [r7, #32]
 8008e9e:	415b      	adcs	r3, r3
 8008ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ea6:	4641      	mov	r1, r8
 8008ea8:	1854      	adds	r4, r2, r1
 8008eaa:	4649      	mov	r1, r9
 8008eac:	eb43 0501 	adc.w	r5, r3, r1
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	00eb      	lsls	r3, r5, #3
 8008eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ebe:	00e2      	lsls	r2, r4, #3
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	461d      	mov	r5, r3
 8008ec4:	4643      	mov	r3, r8
 8008ec6:	18e3      	adds	r3, r4, r3
 8008ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ecc:	464b      	mov	r3, r9
 8008ece:	eb45 0303 	adc.w	r3, r5, r3
 8008ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	008b      	lsls	r3, r1, #2
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008efc:	4621      	mov	r1, r4
 8008efe:	008a      	lsls	r2, r1, #2
 8008f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f04:	f7f7 fec0 	bl	8000c88 <__aeabi_uldivmod>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4b60      	ldr	r3, [pc, #384]	; (8009090 <UART_SetConfig+0x4e4>)
 8008f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	011c      	lsls	r4, r3, #4
 8008f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f28:	4642      	mov	r2, r8
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	1891      	adds	r1, r2, r2
 8008f2e:	61b9      	str	r1, [r7, #24]
 8008f30:	415b      	adcs	r3, r3
 8008f32:	61fb      	str	r3, [r7, #28]
 8008f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f38:	4641      	mov	r1, r8
 8008f3a:	1851      	adds	r1, r2, r1
 8008f3c:	6139      	str	r1, [r7, #16]
 8008f3e:	4649      	mov	r1, r9
 8008f40:	414b      	adcs	r3, r1
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	f04f 0200 	mov.w	r2, #0
 8008f48:	f04f 0300 	mov.w	r3, #0
 8008f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f50:	4659      	mov	r1, fp
 8008f52:	00cb      	lsls	r3, r1, #3
 8008f54:	4651      	mov	r1, sl
 8008f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f5a:	4651      	mov	r1, sl
 8008f5c:	00ca      	lsls	r2, r1, #3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4619      	mov	r1, r3
 8008f62:	4603      	mov	r3, r0
 8008f64:	4642      	mov	r2, r8
 8008f66:	189b      	adds	r3, r3, r2
 8008f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	460a      	mov	r2, r1
 8008f70:	eb42 0303 	adc.w	r3, r2, r3
 8008f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	f04f 0300 	mov.w	r3, #0
 8008f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f90:	4649      	mov	r1, r9
 8008f92:	008b      	lsls	r3, r1, #2
 8008f94:	4641      	mov	r1, r8
 8008f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f9a:	4641      	mov	r1, r8
 8008f9c:	008a      	lsls	r2, r1, #2
 8008f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008fa2:	f7f7 fe71 	bl	8000c88 <__aeabi_uldivmod>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4b39      	ldr	r3, [pc, #228]	; (8009090 <UART_SetConfig+0x4e4>)
 8008fac:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb0:	095b      	lsrs	r3, r3, #5
 8008fb2:	2164      	movs	r1, #100	; 0x64
 8008fb4:	fb01 f303 	mul.w	r3, r1, r3
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	011b      	lsls	r3, r3, #4
 8008fbc:	3332      	adds	r3, #50	; 0x32
 8008fbe:	4a34      	ldr	r2, [pc, #208]	; (8009090 <UART_SetConfig+0x4e4>)
 8008fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc4:	095b      	lsrs	r3, r3, #5
 8008fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fca:	441c      	add	r4, r3
 8008fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	673b      	str	r3, [r7, #112]	; 0x70
 8008fd4:	677a      	str	r2, [r7, #116]	; 0x74
 8008fd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008fda:	4642      	mov	r2, r8
 8008fdc:	464b      	mov	r3, r9
 8008fde:	1891      	adds	r1, r2, r2
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	415b      	adcs	r3, r3
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fea:	4641      	mov	r1, r8
 8008fec:	1851      	adds	r1, r2, r1
 8008fee:	6039      	str	r1, [r7, #0]
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	414b      	adcs	r3, r1
 8008ff4:	607b      	str	r3, [r7, #4]
 8008ff6:	f04f 0200 	mov.w	r2, #0
 8008ffa:	f04f 0300 	mov.w	r3, #0
 8008ffe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009002:	4659      	mov	r1, fp
 8009004:	00cb      	lsls	r3, r1, #3
 8009006:	4651      	mov	r1, sl
 8009008:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800900c:	4651      	mov	r1, sl
 800900e:	00ca      	lsls	r2, r1, #3
 8009010:	4610      	mov	r0, r2
 8009012:	4619      	mov	r1, r3
 8009014:	4603      	mov	r3, r0
 8009016:	4642      	mov	r2, r8
 8009018:	189b      	adds	r3, r3, r2
 800901a:	66bb      	str	r3, [r7, #104]	; 0x68
 800901c:	464b      	mov	r3, r9
 800901e:	460a      	mov	r2, r1
 8009020:	eb42 0303 	adc.w	r3, r2, r3
 8009024:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	663b      	str	r3, [r7, #96]	; 0x60
 8009030:	667a      	str	r2, [r7, #100]	; 0x64
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	f04f 0300 	mov.w	r3, #0
 800903a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800903e:	4649      	mov	r1, r9
 8009040:	008b      	lsls	r3, r1, #2
 8009042:	4641      	mov	r1, r8
 8009044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009048:	4641      	mov	r1, r8
 800904a:	008a      	lsls	r2, r1, #2
 800904c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009050:	f7f7 fe1a 	bl	8000c88 <__aeabi_uldivmod>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <UART_SetConfig+0x4e4>)
 800905a:	fba3 1302 	umull	r1, r3, r3, r2
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	2164      	movs	r1, #100	; 0x64
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	3332      	adds	r3, #50	; 0x32
 800906c:	4a08      	ldr	r2, [pc, #32]	; (8009090 <UART_SetConfig+0x4e4>)
 800906e:	fba2 2303 	umull	r2, r3, r2, r3
 8009072:	095b      	lsrs	r3, r3, #5
 8009074:	f003 020f 	and.w	r2, r3, #15
 8009078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4422      	add	r2, r4
 8009080:	609a      	str	r2, [r3, #8]
}
 8009082:	bf00      	nop
 8009084:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009088:	46bd      	mov	sp, r7
 800908a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800908e:	bf00      	nop
 8009090:	51eb851f 	.word	0x51eb851f

08009094 <__NVIC_SetPriority>:
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	6039      	str	r1, [r7, #0]
 800909e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	db0a      	blt.n	80090be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	490c      	ldr	r1, [pc, #48]	; (80090e0 <__NVIC_SetPriority+0x4c>)
 80090ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090b2:	0112      	lsls	r2, r2, #4
 80090b4:	b2d2      	uxtb	r2, r2
 80090b6:	440b      	add	r3, r1
 80090b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80090bc:	e00a      	b.n	80090d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	4908      	ldr	r1, [pc, #32]	; (80090e4 <__NVIC_SetPriority+0x50>)
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	3b04      	subs	r3, #4
 80090cc:	0112      	lsls	r2, r2, #4
 80090ce:	b2d2      	uxtb	r2, r2
 80090d0:	440b      	add	r3, r1
 80090d2:	761a      	strb	r2, [r3, #24]
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	e000e100 	.word	0xe000e100
 80090e4:	e000ed00 	.word	0xe000ed00

080090e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80090ec:	4b05      	ldr	r3, [pc, #20]	; (8009104 <SysTick_Handler+0x1c>)
 80090ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80090f0:	f001 fda8 	bl	800ac44 <xTaskGetSchedulerState>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d001      	beq.n	80090fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80090fa:	f002 fb8d 	bl	800b818 <xPortSysTickHandler>
  }
}
 80090fe:	bf00      	nop
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	e000e010 	.word	0xe000e010

08009108 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800910c:	2100      	movs	r1, #0
 800910e:	f06f 0004 	mvn.w	r0, #4
 8009112:	f7ff ffbf 	bl	8009094 <__NVIC_SetPriority>
#endif
}
 8009116:	bf00      	nop
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009122:	f3ef 8305 	mrs	r3, IPSR
 8009126:	603b      	str	r3, [r7, #0]
  return(result);
 8009128:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800912e:	f06f 0305 	mvn.w	r3, #5
 8009132:	607b      	str	r3, [r7, #4]
 8009134:	e00c      	b.n	8009150 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009136:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <osKernelInitialize+0x44>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d105      	bne.n	800914a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800913e:	4b08      	ldr	r3, [pc, #32]	; (8009160 <osKernelInitialize+0x44>)
 8009140:	2201      	movs	r2, #1
 8009142:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009144:	2300      	movs	r3, #0
 8009146:	607b      	str	r3, [r7, #4]
 8009148:	e002      	b.n	8009150 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800914a:	f04f 33ff 	mov.w	r3, #4294967295
 800914e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009150:	687b      	ldr	r3, [r7, #4]
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	2000060c 	.word	0x2000060c

08009164 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800916a:	f3ef 8305 	mrs	r3, IPSR
 800916e:	603b      	str	r3, [r7, #0]
  return(result);
 8009170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009176:	f06f 0305 	mvn.w	r3, #5
 800917a:	607b      	str	r3, [r7, #4]
 800917c:	e010      	b.n	80091a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800917e:	4b0b      	ldr	r3, [pc, #44]	; (80091ac <osKernelStart+0x48>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d109      	bne.n	800919a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009186:	f7ff ffbf 	bl	8009108 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800918a:	4b08      	ldr	r3, [pc, #32]	; (80091ac <osKernelStart+0x48>)
 800918c:	2202      	movs	r2, #2
 800918e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009190:	f001 f910 	bl	800a3b4 <vTaskStartScheduler>
      stat = osOK;
 8009194:	2300      	movs	r3, #0
 8009196:	607b      	str	r3, [r7, #4]
 8009198:	e002      	b.n	80091a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800919a:	f04f 33ff 	mov.w	r3, #4294967295
 800919e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80091a0:	687b      	ldr	r3, [r7, #4]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	2000060c 	.word	0x2000060c

080091b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08e      	sub	sp, #56	; 0x38
 80091b4:	af04      	add	r7, sp, #16
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091bc:	2300      	movs	r3, #0
 80091be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091c0:	f3ef 8305 	mrs	r3, IPSR
 80091c4:	617b      	str	r3, [r7, #20]
  return(result);
 80091c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d17e      	bne.n	80092ca <osThreadNew+0x11a>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d07b      	beq.n	80092ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091d2:	2380      	movs	r3, #128	; 0x80
 80091d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091d6:	2318      	movs	r3, #24
 80091d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80091de:	f04f 33ff 	mov.w	r3, #4294967295
 80091e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d045      	beq.n	8009276 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <osThreadNew+0x48>
        name = attr->name;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d008      	beq.n	800921e <osThreadNew+0x6e>
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	2b38      	cmp	r3, #56	; 0x38
 8009210:	d805      	bhi.n	800921e <osThreadNew+0x6e>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <osThreadNew+0x72>
        return (NULL);
 800921e:	2300      	movs	r3, #0
 8009220:	e054      	b.n	80092cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	089b      	lsrs	r3, r3, #2
 8009230:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00e      	beq.n	8009258 <osThreadNew+0xa8>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	2b5b      	cmp	r3, #91	; 0x5b
 8009240:	d90a      	bls.n	8009258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009246:	2b00      	cmp	r3, #0
 8009248:	d006      	beq.n	8009258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <osThreadNew+0xa8>
        mem = 1;
 8009252:	2301      	movs	r3, #1
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	e010      	b.n	800927a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10c      	bne.n	800927a <osThreadNew+0xca>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d108      	bne.n	800927a <osThreadNew+0xca>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d104      	bne.n	800927a <osThreadNew+0xca>
          mem = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	61bb      	str	r3, [r7, #24]
 8009274:	e001      	b.n	800927a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d110      	bne.n	80092a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009288:	9202      	str	r2, [sp, #8]
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	6a3a      	ldr	r2, [r7, #32]
 8009294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 fe38 	bl	8009f0c <xTaskCreateStatic>
 800929c:	4603      	mov	r3, r0
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	e013      	b.n	80092ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d110      	bne.n	80092ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	f107 0310 	add.w	r3, r7, #16
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 fe83 	bl	8009fc6 <xTaskCreate>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d001      	beq.n	80092ca <osThreadNew+0x11a>
            hTask = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092ca:	693b      	ldr	r3, [r7, #16]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3728      	adds	r7, #40	; 0x28
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092dc:	f3ef 8305 	mrs	r3, IPSR
 80092e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80092e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <osDelay+0x1c>
    stat = osErrorISR;
 80092e8:	f06f 0305 	mvn.w	r3, #5
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	e007      	b.n	8009300 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <osDelay+0x2c>
      vTaskDelay(ticks);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f826 	bl	800a34c <vTaskDelay>
    }
  }

  return (stat);
 8009300:	68fb      	ldr	r3, [r7, #12]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800930a:	b580      	push	{r7, lr}
 800930c:	b086      	sub	sp, #24
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009312:	f3ef 8305 	mrs	r3, IPSR
 8009316:	60fb      	str	r3, [r7, #12]
  return(result);
 8009318:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800931e:	f06f 0305 	mvn.w	r3, #5
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	e019      	b.n	800935a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009326:	2300      	movs	r3, #0
 8009328:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800932a:	f001 f955 	bl	800a5d8 <xTaskGetTickCount>
 800932e:	4603      	mov	r3, r0
 8009330:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d009      	beq.n	8009354 <osDelayUntil+0x4a>
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	db06      	blt.n	8009354 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009346:	f107 0308 	add.w	r3, r7, #8
 800934a:	6939      	ldr	r1, [r7, #16]
 800934c:	4618      	mov	r0, r3
 800934e:	f000 ff7f 	bl	800a250 <vTaskDelayUntil>
 8009352:	e002      	b.n	800935a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009354:	f06f 0303 	mvn.w	r3, #3
 8009358:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800935a:	697b      	ldr	r3, [r7, #20]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4a07      	ldr	r2, [pc, #28]	; (8009390 <vApplicationGetIdleTaskMemory+0x2c>)
 8009374:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	4a06      	ldr	r2, [pc, #24]	; (8009394 <vApplicationGetIdleTaskMemory+0x30>)
 800937a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2280      	movs	r2, #128	; 0x80
 8009380:	601a      	str	r2, [r3, #0]
}
 8009382:	bf00      	nop
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	20000610 	.word	0x20000610
 8009394:	2000066c 	.word	0x2000066c

08009398 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4a07      	ldr	r2, [pc, #28]	; (80093c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80093a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	4a06      	ldr	r2, [pc, #24]	; (80093c8 <vApplicationGetTimerTaskMemory+0x30>)
 80093ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093b6:	601a      	str	r2, [r3, #0]
}
 80093b8:	bf00      	nop
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	2000086c 	.word	0x2000086c
 80093c8:	200008c8 	.word	0x200008c8

080093cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f103 0208 	add.w	r2, r3, #8
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f103 0208 	add.w	r2, r3, #8
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f103 0208 	add.w	r2, r3, #8
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800941a:	bf00      	nop
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009426:	b480      	push	{r7}
 8009428:	b085      	sub	sp, #20
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	601a      	str	r2, [r3, #0]
}
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d103      	bne.n	800948e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	e00c      	b.n	80094a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3308      	adds	r3, #8
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	e002      	b.n	800949c <vListInsert+0x2e>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d2f6      	bcs.n	8009496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	601a      	str	r2, [r3, #0]
}
 80094d4:	bf00      	nop
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	6892      	ldr	r2, [r2, #8]
 80094f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6852      	ldr	r2, [r2, #4]
 8009500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	429a      	cmp	r2, r3
 800950a:	d103      	bne.n	8009514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	1e5a      	subs	r2, r3, #1
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800955e:	f002 f8c9 	bl	800b6f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800956e:	fb01 f303 	mul.w	r3, r1, r3
 8009572:	441a      	add	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800958e:	3b01      	subs	r3, #1
 8009590:	68f9      	ldr	r1, [r7, #12]
 8009592:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009594:	fb01 f303 	mul.w	r3, r1, r3
 8009598:	441a      	add	r2, r3
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	22ff      	movs	r2, #255	; 0xff
 80095a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	22ff      	movs	r2, #255	; 0xff
 80095aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d114      	bne.n	80095de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d01a      	beq.n	80095f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	3310      	adds	r3, #16
 80095c0:	4618      	mov	r0, r3
 80095c2:	f001 f981 	bl	800a8c8 <xTaskRemoveFromEventList>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d012      	beq.n	80095f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095cc:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <xQueueGenericReset+0xcc>)
 80095ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	e009      	b.n	80095f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3310      	adds	r3, #16
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7ff fef2 	bl	80093cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3324      	adds	r3, #36	; 0x24
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff feed 	bl	80093cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095f2:	f002 f8af 	bl	800b754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095f6:	2301      	movs	r3, #1
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	e000ed04 	.word	0xe000ed04

08009604 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08e      	sub	sp, #56	; 0x38
 8009608:	af02      	add	r7, sp, #8
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10a      	bne.n	800964a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009646:	bf00      	nop
 8009648:	e7fe      	b.n	8009648 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <xQueueGenericCreateStatic+0x52>
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <xQueueGenericCreateStatic+0x56>
 8009656:	2301      	movs	r3, #1
 8009658:	e000      	b.n	800965c <xQueueGenericCreateStatic+0x58>
 800965a:	2300      	movs	r3, #0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	623b      	str	r3, [r7, #32]
}
 8009672:	bf00      	nop
 8009674:	e7fe      	b.n	8009674 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <xQueueGenericCreateStatic+0x7e>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <xQueueGenericCreateStatic+0x82>
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <xQueueGenericCreateStatic+0x84>
 8009686:	2300      	movs	r3, #0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	61fb      	str	r3, [r7, #28]
}
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096a2:	2350      	movs	r3, #80	; 0x50
 80096a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b50      	cmp	r3, #80	; 0x50
 80096aa:	d00a      	beq.n	80096c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	61bb      	str	r3, [r7, #24]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00d      	beq.n	80096ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	4613      	mov	r3, r2
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f805 	bl	80096f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3730      	adds	r7, #48	; 0x30
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	e002      	b.n	8009716 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009722:	2101      	movs	r1, #1
 8009724:	69b8      	ldr	r0, [r7, #24]
 8009726:	f7ff ff05 	bl	8009534 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	78fa      	ldrb	r2, [r7, #3]
 800972e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08e      	sub	sp, #56	; 0x38
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800974a:	2300      	movs	r3, #0
 800974c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <xQueueGenericSend+0x32>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d103      	bne.n	800977c <xQueueGenericSend+0x40>
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <xQueueGenericSend+0x44>
 800977c:	2301      	movs	r3, #1
 800977e:	e000      	b.n	8009782 <xQueueGenericSend+0x46>
 8009780:	2300      	movs	r3, #0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <xQueueGenericSend+0x60>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d103      	bne.n	80097aa <xQueueGenericSend+0x6e>
 80097a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <xQueueGenericSend+0x72>
 80097aa:	2301      	movs	r3, #1
 80097ac:	e000      	b.n	80097b0 <xQueueGenericSend+0x74>
 80097ae:	2300      	movs	r3, #0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <xQueueGenericSend+0x8e>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	623b      	str	r3, [r7, #32]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097ca:	f001 fa3b 	bl	800ac44 <xTaskGetSchedulerState>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <xQueueGenericSend+0x9e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <xQueueGenericSend+0xa2>
 80097da:	2301      	movs	r3, #1
 80097dc:	e000      	b.n	80097e0 <xQueueGenericSend+0xa4>
 80097de:	2300      	movs	r3, #0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <xQueueGenericSend+0xbe>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	61fb      	str	r3, [r7, #28]
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097fa:	f001 ff7b 	bl	800b6f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009806:	429a      	cmp	r2, r3
 8009808:	d302      	bcc.n	8009810 <xQueueGenericSend+0xd4>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b02      	cmp	r3, #2
 800980e:	d129      	bne.n	8009864 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009816:	f000 fa0b 	bl	8009c30 <prvCopyDataToQueue>
 800981a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	d010      	beq.n	8009846 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	4618      	mov	r0, r3
 800982a:	f001 f84d 	bl	800a8c8 <xTaskRemoveFromEventList>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d013      	beq.n	800985c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009834:	4b3f      	ldr	r3, [pc, #252]	; (8009934 <xQueueGenericSend+0x1f8>)
 8009836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	e00a      	b.n	800985c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d007      	beq.n	800985c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800984c:	4b39      	ldr	r3, [pc, #228]	; (8009934 <xQueueGenericSend+0x1f8>)
 800984e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800985c:	f001 ff7a 	bl	800b754 <vPortExitCritical>
				return pdPASS;
 8009860:	2301      	movs	r3, #1
 8009862:	e063      	b.n	800992c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d103      	bne.n	8009872 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800986a:	f001 ff73 	bl	800b754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800986e:	2300      	movs	r3, #0
 8009870:	e05c      	b.n	800992c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009878:	f107 0314 	add.w	r3, r7, #20
 800987c:	4618      	mov	r0, r3
 800987e:	f001 f887 	bl	800a990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009882:	2301      	movs	r3, #1
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009886:	f001 ff65 	bl	800b754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800988a:	f000 fdf9 	bl	800a480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800988e:	f001 ff31 	bl	800b6f4 <vPortEnterCritical>
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009898:	b25b      	sxtb	r3, r3
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989e:	d103      	bne.n	80098a8 <xQueueGenericSend+0x16c>
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ae:	b25b      	sxtb	r3, r3
 80098b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b4:	d103      	bne.n	80098be <xQueueGenericSend+0x182>
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098be:	f001 ff49 	bl	800b754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098c2:	1d3a      	adds	r2, r7, #4
 80098c4:	f107 0314 	add.w	r3, r7, #20
 80098c8:	4611      	mov	r1, r2
 80098ca:	4618      	mov	r0, r3
 80098cc:	f001 f876 	bl	800a9bc <xTaskCheckForTimeOut>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d124      	bne.n	8009920 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098d8:	f000 faa2 	bl	8009e20 <prvIsQueueFull>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d018      	beq.n	8009914 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e4:	3310      	adds	r3, #16
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 ff9c 	bl	800a828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098f2:	f000 fa2d 	bl	8009d50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098f6:	f000 fdd1 	bl	800a49c <xTaskResumeAll>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f47f af7c 	bne.w	80097fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009902:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <xQueueGenericSend+0x1f8>)
 8009904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	e772      	b.n	80097fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009916:	f000 fa1b 	bl	8009d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800991a:	f000 fdbf 	bl	800a49c <xTaskResumeAll>
 800991e:	e76c      	b.n	80097fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009922:	f000 fa15 	bl	8009d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009926:	f000 fdb9 	bl	800a49c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800992a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800992c:	4618      	mov	r0, r3
 800992e:	3738      	adds	r7, #56	; 0x38
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	e000ed04 	.word	0xe000ed04

08009938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b090      	sub	sp, #64	; 0x40
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009962:	bf00      	nop
 8009964:	e7fe      	b.n	8009964 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d103      	bne.n	8009974 <xQueueGenericSendFromISR+0x3c>
 800996c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <xQueueGenericSendFromISR+0x40>
 8009974:	2301      	movs	r3, #1
 8009976:	e000      	b.n	800997a <xQueueGenericSendFromISR+0x42>
 8009978:	2300      	movs	r3, #0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d103      	bne.n	80099a2 <xQueueGenericSendFromISR+0x6a>
 800999a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d101      	bne.n	80099a6 <xQueueGenericSendFromISR+0x6e>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e000      	b.n	80099a8 <xQueueGenericSendFromISR+0x70>
 80099a6:	2300      	movs	r3, #0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	623b      	str	r3, [r7, #32]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099c2:	f001 ff79 	bl	800b8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099c6:	f3ef 8211 	mrs	r2, BASEPRI
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	61fa      	str	r2, [r7, #28]
 80099dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d302      	bcc.n	80099f4 <xQueueGenericSendFromISR+0xbc>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d12f      	bne.n	8009a54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	68b9      	ldr	r1, [r7, #8]
 8009a08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a0a:	f000 f911 	bl	8009c30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a16:	d112      	bne.n	8009a3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d016      	beq.n	8009a4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	3324      	adds	r3, #36	; 0x24
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 ff4f 	bl	800a8c8 <xTaskRemoveFromEventList>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00e      	beq.n	8009a4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00b      	beq.n	8009a4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e007      	b.n	8009a4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a42:	3301      	adds	r3, #1
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	b25a      	sxtb	r2, r3
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009a52:	e001      	b.n	8009a58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a54:	2300      	movs	r3, #0
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3740      	adds	r7, #64	; 0x40
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08c      	sub	sp, #48	; 0x30
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <xQueueReceive+0x30>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	623b      	str	r3, [r7, #32]
}
 8009a9c:	bf00      	nop
 8009a9e:	e7fe      	b.n	8009a9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d103      	bne.n	8009aae <xQueueReceive+0x3e>
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <xQueueReceive+0x42>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e000      	b.n	8009ab4 <xQueueReceive+0x44>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <xQueueReceive+0x5e>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	61fb      	str	r3, [r7, #28]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ace:	f001 f8b9 	bl	800ac44 <xTaskGetSchedulerState>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <xQueueReceive+0x6e>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <xQueueReceive+0x72>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e000      	b.n	8009ae4 <xQueueReceive+0x74>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10a      	bne.n	8009afe <xQueueReceive+0x8e>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	61bb      	str	r3, [r7, #24]
}
 8009afa:	bf00      	nop
 8009afc:	e7fe      	b.n	8009afc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009afe:	f001 fdf9 	bl	800b6f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d01f      	beq.n	8009b4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b12:	f000 f8f7 	bl	8009d04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	1e5a      	subs	r2, r3, #1
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00f      	beq.n	8009b46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	3310      	adds	r3, #16
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 fecc 	bl	800a8c8 <xTaskRemoveFromEventList>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b36:	4b3d      	ldr	r3, [pc, #244]	; (8009c2c <xQueueReceive+0x1bc>)
 8009b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b46:	f001 fe05 	bl	800b754 <vPortExitCritical>
				return pdPASS;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e069      	b.n	8009c22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d103      	bne.n	8009b5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b54:	f001 fdfe 	bl	800b754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e062      	b.n	8009c22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b62:	f107 0310 	add.w	r3, r7, #16
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 ff12 	bl	800a990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b70:	f001 fdf0 	bl	800b754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b74:	f000 fc84 	bl	800a480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b78:	f001 fdbc 	bl	800b6f4 <vPortEnterCritical>
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b82:	b25b      	sxtb	r3, r3
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b88:	d103      	bne.n	8009b92 <xQueueReceive+0x122>
 8009b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b98:	b25b      	sxtb	r3, r3
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9e:	d103      	bne.n	8009ba8 <xQueueReceive+0x138>
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ba8:	f001 fdd4 	bl	800b754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bac:	1d3a      	adds	r2, r7, #4
 8009bae:	f107 0310 	add.w	r3, r7, #16
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 ff01 	bl	800a9bc <xTaskCheckForTimeOut>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d123      	bne.n	8009c08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc2:	f000 f917 	bl	8009df4 <prvIsQueueEmpty>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d017      	beq.n	8009bfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bce:	3324      	adds	r3, #36	; 0x24
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 fe27 	bl	800a828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bdc:	f000 f8b8 	bl	8009d50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009be0:	f000 fc5c 	bl	800a49c <xTaskResumeAll>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d189      	bne.n	8009afe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009bea:	4b10      	ldr	r3, [pc, #64]	; (8009c2c <xQueueReceive+0x1bc>)
 8009bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	e780      	b.n	8009afe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bfe:	f000 f8a7 	bl	8009d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c02:	f000 fc4b 	bl	800a49c <xTaskResumeAll>
 8009c06:	e77a      	b.n	8009afe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c0a:	f000 f8a1 	bl	8009d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c0e:	f000 fc45 	bl	800a49c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c14:	f000 f8ee 	bl	8009df4 <prvIsQueueEmpty>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f43f af6f 	beq.w	8009afe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3730      	adds	r7, #48	; 0x30
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10d      	bne.n	8009c6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d14d      	bne.n	8009cf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f001 f810 	bl	800ac80 <xTaskPriorityDisinherit>
 8009c60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	609a      	str	r2, [r3, #8]
 8009c68:	e043      	b.n	8009cf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d119      	bne.n	8009ca4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6858      	ldr	r0, [r3, #4]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c78:	461a      	mov	r2, r3
 8009c7a:	68b9      	ldr	r1, [r7, #8]
 8009c7c:	f002 faa2 	bl	800c1c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c88:	441a      	add	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d32b      	bcc.n	8009cf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	605a      	str	r2, [r3, #4]
 8009ca2:	e026      	b.n	8009cf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	68d8      	ldr	r0, [r3, #12]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cac:	461a      	mov	r2, r3
 8009cae:	68b9      	ldr	r1, [r7, #8]
 8009cb0:	f002 fa88 	bl	800c1c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	68da      	ldr	r2, [r3, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbc:	425b      	negs	r3, r3
 8009cbe:	441a      	add	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d207      	bcs.n	8009ce0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd8:	425b      	negs	r3, r3
 8009cda:	441a      	add	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d105      	bne.n	8009cf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009cfa:	697b      	ldr	r3, [r7, #20]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d018      	beq.n	8009d48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68da      	ldr	r2, [r3, #12]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	441a      	add	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68da      	ldr	r2, [r3, #12]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d303      	bcc.n	8009d38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68d9      	ldr	r1, [r3, #12]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	461a      	mov	r2, r3
 8009d42:	6838      	ldr	r0, [r7, #0]
 8009d44:	f002 fa3e 	bl	800c1c4 <memcpy>
	}
}
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d58:	f001 fccc 	bl	800b6f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d64:	e011      	b.n	8009d8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d012      	beq.n	8009d94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3324      	adds	r3, #36	; 0x24
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 fda8 	bl	800a8c8 <xTaskRemoveFromEventList>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d7e:	f000 fe7f 	bl	800aa80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	dce9      	bgt.n	8009d66 <prvUnlockQueue+0x16>
 8009d92:	e000      	b.n	8009d96 <prvUnlockQueue+0x46>
					break;
 8009d94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	22ff      	movs	r2, #255	; 0xff
 8009d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d9e:	f001 fcd9 	bl	800b754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009da2:	f001 fca7 	bl	800b6f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dae:	e011      	b.n	8009dd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d012      	beq.n	8009dde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3310      	adds	r3, #16
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 fd83 	bl	800a8c8 <xTaskRemoveFromEventList>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009dc8:	f000 fe5a 	bl	800aa80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009dcc:	7bbb      	ldrb	r3, [r7, #14]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	dce9      	bgt.n	8009db0 <prvUnlockQueue+0x60>
 8009ddc:	e000      	b.n	8009de0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009dde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	22ff      	movs	r2, #255	; 0xff
 8009de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009de8:	f001 fcb4 	bl	800b754 <vPortExitCritical>
}
 8009dec:	bf00      	nop
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dfc:	f001 fc7a 	bl	800b6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d102      	bne.n	8009e0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	60fb      	str	r3, [r7, #12]
 8009e0c:	e001      	b.n	8009e12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e12:	f001 fc9f 	bl	800b754 <vPortExitCritical>

	return xReturn;
 8009e16:	68fb      	ldr	r3, [r7, #12]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e28:	f001 fc64 	bl	800b6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d102      	bne.n	8009e3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	e001      	b.n	8009e42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e42:	f001 fc87 	bl	800b754 <vPortExitCritical>

	return xReturn;
 8009e46:	68fb      	ldr	r3, [r7, #12]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	e014      	b.n	8009e8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e60:	4a0f      	ldr	r2, [pc, #60]	; (8009ea0 <vQueueAddToRegistry+0x50>)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10b      	bne.n	8009e84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e6c:	490c      	ldr	r1, [pc, #48]	; (8009ea0 <vQueueAddToRegistry+0x50>)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e76:	4a0a      	ldr	r2, [pc, #40]	; (8009ea0 <vQueueAddToRegistry+0x50>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	4413      	add	r3, r2
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e82:	e006      	b.n	8009e92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	3301      	adds	r3, #1
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b07      	cmp	r3, #7
 8009e8e:	d9e7      	bls.n	8009e60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e90:	bf00      	nop
 8009e92:	bf00      	nop
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000cc8 	.word	0x20000cc8

08009ea4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009eb4:	f001 fc1e 	bl	800b6f4 <vPortEnterCritical>
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ebe:	b25b      	sxtb	r3, r3
 8009ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec4:	d103      	bne.n	8009ece <vQueueWaitForMessageRestricted+0x2a>
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ed4:	b25b      	sxtb	r3, r3
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eda:	d103      	bne.n	8009ee4 <vQueueWaitForMessageRestricted+0x40>
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ee4:	f001 fc36 	bl	800b754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d106      	bne.n	8009efe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	3324      	adds	r3, #36	; 0x24
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	68b9      	ldr	r1, [r7, #8]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fcb9 	bl	800a870 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009efe:	6978      	ldr	r0, [r7, #20]
 8009f00:	f7ff ff26 	bl	8009d50 <prvUnlockQueue>
	}
 8009f04:	bf00      	nop
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b08e      	sub	sp, #56	; 0x38
 8009f10:	af04      	add	r7, sp, #16
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10a      	bne.n	8009f36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	623b      	str	r3, [r7, #32]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10a      	bne.n	8009f52 <xTaskCreateStatic+0x46>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	61fb      	str	r3, [r7, #28]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f52:	235c      	movs	r3, #92	; 0x5c
 8009f54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	2b5c      	cmp	r3, #92	; 0x5c
 8009f5a:	d00a      	beq.n	8009f72 <xTaskCreateStatic+0x66>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	61bb      	str	r3, [r7, #24]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d01e      	beq.n	8009fb8 <xTaskCreateStatic+0xac>
 8009f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01b      	beq.n	8009fb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f92:	2300      	movs	r3, #0
 8009f94:	9303      	str	r3, [sp, #12]
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	9302      	str	r3, [sp, #8]
 8009f9a:	f107 0314 	add.w	r3, r7, #20
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	68b9      	ldr	r1, [r7, #8]
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 f850 	bl	800a050 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fb2:	f000 f8dd 	bl	800a170 <prvAddNewTaskToReadyList>
 8009fb6:	e001      	b.n	8009fbc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009fbc:	697b      	ldr	r3, [r7, #20]
	}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3728      	adds	r7, #40	; 0x28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b08c      	sub	sp, #48	; 0x30
 8009fca:	af04      	add	r7, sp, #16
 8009fcc:	60f8      	str	r0, [r7, #12]
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	603b      	str	r3, [r7, #0]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009fd6:	88fb      	ldrh	r3, [r7, #6]
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 fcac 	bl	800b938 <pvPortMalloc>
 8009fe0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00e      	beq.n	800a006 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009fe8:	205c      	movs	r0, #92	; 0x5c
 8009fea:	f001 fca5 	bl	800b938 <pvPortMalloc>
 8009fee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8009ffc:	e005      	b.n	800a00a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ffe:	6978      	ldr	r0, [r7, #20]
 800a000:	f001 fd66 	bl	800bad0 <vPortFree>
 800a004:	e001      	b.n	800a00a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a006:	2300      	movs	r3, #0
 800a008:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d017      	beq.n	800a040 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a018:	88fa      	ldrh	r2, [r7, #6]
 800a01a:	2300      	movs	r3, #0
 800a01c:	9303      	str	r3, [sp, #12]
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	9302      	str	r3, [sp, #8]
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	68b9      	ldr	r1, [r7, #8]
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 f80e 	bl	800a050 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a034:	69f8      	ldr	r0, [r7, #28]
 800a036:	f000 f89b 	bl	800a170 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a03a:	2301      	movs	r3, #1
 800a03c:	61bb      	str	r3, [r7, #24]
 800a03e:	e002      	b.n	800a046 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a040:	f04f 33ff 	mov.w	r3, #4294967295
 800a044:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a046:	69bb      	ldr	r3, [r7, #24]
	}
 800a048:	4618      	mov	r0, r3
 800a04a:	3720      	adds	r7, #32
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
 800a05c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	461a      	mov	r2, r3
 800a068:	21a5      	movs	r1, #165	; 0xa5
 800a06a:	f002 f8b9 	bl	800c1e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a078:	3b01      	subs	r3, #1
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	f023 0307 	bic.w	r3, r3, #7
 800a086:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	f003 0307 	and.w	r3, r3, #7
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00a      	beq.n	800a0a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	617b      	str	r3, [r7, #20]
}
 800a0a4:	bf00      	nop
 800a0a6:	e7fe      	b.n	800a0a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d01f      	beq.n	800a0ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	61fb      	str	r3, [r7, #28]
 800a0b2:	e012      	b.n	800a0da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	7819      	ldrb	r1, [r3, #0]
 800a0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	3334      	adds	r3, #52	; 0x34
 800a0c4:	460a      	mov	r2, r1
 800a0c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d006      	beq.n	800a0e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	61fb      	str	r3, [r7, #28]
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	2b0f      	cmp	r3, #15
 800a0de:	d9e9      	bls.n	800a0b4 <prvInitialiseNewTask+0x64>
 800a0e0:	e000      	b.n	800a0e4 <prvInitialiseNewTask+0x94>
			{
				break;
 800a0e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0ec:	e003      	b.n	800a0f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f8:	2b37      	cmp	r3, #55	; 0x37
 800a0fa:	d901      	bls.n	800a100 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0fc:	2337      	movs	r3, #55	; 0x37
 800a0fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a104:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a10a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10e:	2200      	movs	r2, #0
 800a110:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	3304      	adds	r3, #4
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff f978 	bl	800940c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	3318      	adds	r3, #24
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff f973 	bl	800940c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a12a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a13a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	2200      	movs	r2, #0
 800a140:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	68f9      	ldr	r1, [r7, #12]
 800a14e:	69b8      	ldr	r0, [r7, #24]
 800a150:	f001 f9a6 	bl	800b4a0 <pxPortInitialiseStack>
 800a154:	4602      	mov	r2, r0
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a166:	bf00      	nop
 800a168:	3720      	adds	r7, #32
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a178:	f001 fabc 	bl	800b6f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a17c:	4b2d      	ldr	r3, [pc, #180]	; (800a234 <prvAddNewTaskToReadyList+0xc4>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3301      	adds	r3, #1
 800a182:	4a2c      	ldr	r2, [pc, #176]	; (800a234 <prvAddNewTaskToReadyList+0xc4>)
 800a184:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a186:	4b2c      	ldr	r3, [pc, #176]	; (800a238 <prvAddNewTaskToReadyList+0xc8>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d109      	bne.n	800a1a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a18e:	4a2a      	ldr	r2, [pc, #168]	; (800a238 <prvAddNewTaskToReadyList+0xc8>)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a194:	4b27      	ldr	r3, [pc, #156]	; (800a234 <prvAddNewTaskToReadyList+0xc4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d110      	bne.n	800a1be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a19c:	f000 fc94 	bl	800aac8 <prvInitialiseTaskLists>
 800a1a0:	e00d      	b.n	800a1be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a1a2:	4b26      	ldr	r3, [pc, #152]	; (800a23c <prvAddNewTaskToReadyList+0xcc>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d109      	bne.n	800a1be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a1aa:	4b23      	ldr	r3, [pc, #140]	; (800a238 <prvAddNewTaskToReadyList+0xc8>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d802      	bhi.n	800a1be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1b8:	4a1f      	ldr	r2, [pc, #124]	; (800a238 <prvAddNewTaskToReadyList+0xc8>)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1be:	4b20      	ldr	r3, [pc, #128]	; (800a240 <prvAddNewTaskToReadyList+0xd0>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	4a1e      	ldr	r2, [pc, #120]	; (800a240 <prvAddNewTaskToReadyList+0xd0>)
 800a1c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a1c8:	4b1d      	ldr	r3, [pc, #116]	; (800a240 <prvAddNewTaskToReadyList+0xd0>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d4:	4b1b      	ldr	r3, [pc, #108]	; (800a244 <prvAddNewTaskToReadyList+0xd4>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d903      	bls.n	800a1e4 <prvAddNewTaskToReadyList+0x74>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	4a18      	ldr	r2, [pc, #96]	; (800a244 <prvAddNewTaskToReadyList+0xd4>)
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4a15      	ldr	r2, [pc, #84]	; (800a248 <prvAddNewTaskToReadyList+0xd8>)
 800a1f2:	441a      	add	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f7ff f913 	bl	8009426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a200:	f001 faa8 	bl	800b754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a204:	4b0d      	ldr	r3, [pc, #52]	; (800a23c <prvAddNewTaskToReadyList+0xcc>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00e      	beq.n	800a22a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a20c:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <prvAddNewTaskToReadyList+0xc8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a216:	429a      	cmp	r2, r3
 800a218:	d207      	bcs.n	800a22a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a21a:	4b0c      	ldr	r3, [pc, #48]	; (800a24c <prvAddNewTaskToReadyList+0xdc>)
 800a21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a22a:	bf00      	nop
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	200011dc 	.word	0x200011dc
 800a238:	20000d08 	.word	0x20000d08
 800a23c:	200011e8 	.word	0x200011e8
 800a240:	200011f8 	.word	0x200011f8
 800a244:	200011e4 	.word	0x200011e4
 800a248:	20000d0c 	.word	0x20000d0c
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08a      	sub	sp, #40	; 0x28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a25a:	2300      	movs	r3, #0
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <vTaskDelayUntil+0x2a>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	617b      	str	r3, [r7, #20]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10a      	bne.n	800a296 <vTaskDelayUntil+0x46>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	613b      	str	r3, [r7, #16]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a296:	4b2a      	ldr	r3, [pc, #168]	; (800a340 <vTaskDelayUntil+0xf0>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00a      	beq.n	800a2b4 <vTaskDelayUntil+0x64>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	60fb      	str	r3, [r7, #12]
}
 800a2b0:	bf00      	nop
 800a2b2:	e7fe      	b.n	800a2b2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a2b4:	f000 f8e4 	bl	800a480 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a2b8:	4b22      	ldr	r3, [pc, #136]	; (800a344 <vTaskDelayUntil+0xf4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6a3a      	ldr	r2, [r7, #32]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d20b      	bcs.n	800a2ea <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d211      	bcs.n	800a300 <vTaskDelayUntil+0xb0>
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d90d      	bls.n	800a300 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e8:	e00a      	b.n	800a300 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	69fa      	ldr	r2, [r7, #28]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d303      	bcc.n	800a2fc <vTaskDelayUntil+0xac>
 800a2f4:	69fa      	ldr	r2, [r7, #28]
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d901      	bls.n	800a300 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d006      	beq.n	800a31a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a30c:	69fa      	ldr	r2, [r7, #28]
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	2100      	movs	r1, #0
 800a314:	4618      	mov	r0, r3
 800a316:	f000 fd21 	bl	800ad5c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a31a:	f000 f8bf 	bl	800a49c <xTaskResumeAll>
 800a31e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d107      	bne.n	800a336 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a326:	4b08      	ldr	r3, [pc, #32]	; (800a348 <vTaskDelayUntil+0xf8>)
 800a328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a336:	bf00      	nop
 800a338:	3728      	adds	r7, #40	; 0x28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20001204 	.word	0x20001204
 800a344:	200011e0 	.word	0x200011e0
 800a348:	e000ed04 	.word	0xe000ed04

0800a34c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a354:	2300      	movs	r3, #0
 800a356:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d017      	beq.n	800a38e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a35e:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <vTaskDelay+0x60>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <vTaskDelay+0x30>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	60bb      	str	r3, [r7, #8]
}
 800a378:	bf00      	nop
 800a37a:	e7fe      	b.n	800a37a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a37c:	f000 f880 	bl	800a480 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fcea 	bl	800ad5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a388:	f000 f888 	bl	800a49c <xTaskResumeAll>
 800a38c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d107      	bne.n	800a3a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a394:	4b06      	ldr	r3, [pc, #24]	; (800a3b0 <vTaskDelay+0x64>)
 800a396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3a4:	bf00      	nop
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	20001204 	.word	0x20001204
 800a3b0:	e000ed04 	.word	0xe000ed04

0800a3b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08a      	sub	sp, #40	; 0x28
 800a3b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3c2:	463a      	mov	r2, r7
 800a3c4:	1d39      	adds	r1, r7, #4
 800a3c6:	f107 0308 	add.w	r3, r7, #8
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe ffca 	bl	8009364 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	9202      	str	r2, [sp, #8]
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	460a      	mov	r2, r1
 800a3e2:	4921      	ldr	r1, [pc, #132]	; (800a468 <vTaskStartScheduler+0xb4>)
 800a3e4:	4821      	ldr	r0, [pc, #132]	; (800a46c <vTaskStartScheduler+0xb8>)
 800a3e6:	f7ff fd91 	bl	8009f0c <xTaskCreateStatic>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4a20      	ldr	r2, [pc, #128]	; (800a470 <vTaskStartScheduler+0xbc>)
 800a3ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3f0:	4b1f      	ldr	r3, [pc, #124]	; (800a470 <vTaskStartScheduler+0xbc>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	e001      	b.n	800a402 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d102      	bne.n	800a40e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a408:	f000 fcfc 	bl	800ae04 <xTimerCreateTimerTask>
 800a40c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d116      	bne.n	800a442 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	613b      	str	r3, [r7, #16]
}
 800a426:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a428:	4b12      	ldr	r3, [pc, #72]	; (800a474 <vTaskStartScheduler+0xc0>)
 800a42a:	f04f 32ff 	mov.w	r2, #4294967295
 800a42e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a430:	4b11      	ldr	r3, [pc, #68]	; (800a478 <vTaskStartScheduler+0xc4>)
 800a432:	2201      	movs	r2, #1
 800a434:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a436:	4b11      	ldr	r3, [pc, #68]	; (800a47c <vTaskStartScheduler+0xc8>)
 800a438:	2200      	movs	r2, #0
 800a43a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a43c:	f001 f8b8 	bl	800b5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a440:	e00e      	b.n	800a460 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a448:	d10a      	bne.n	800a460 <vTaskStartScheduler+0xac>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	60fb      	str	r3, [r7, #12]
}
 800a45c:	bf00      	nop
 800a45e:	e7fe      	b.n	800a45e <vTaskStartScheduler+0xaa>
}
 800a460:	bf00      	nop
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	0800f474 	.word	0x0800f474
 800a46c:	0800aa99 	.word	0x0800aa99
 800a470:	20001200 	.word	0x20001200
 800a474:	200011fc 	.word	0x200011fc
 800a478:	200011e8 	.word	0x200011e8
 800a47c:	200011e0 	.word	0x200011e0

0800a480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a484:	4b04      	ldr	r3, [pc, #16]	; (800a498 <vTaskSuspendAll+0x18>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3301      	adds	r3, #1
 800a48a:	4a03      	ldr	r2, [pc, #12]	; (800a498 <vTaskSuspendAll+0x18>)
 800a48c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a48e:	bf00      	nop
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	20001204 	.word	0x20001204

0800a49c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a4aa:	4b42      	ldr	r3, [pc, #264]	; (800a5b4 <xTaskResumeAll+0x118>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10a      	bne.n	800a4c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b6:	f383 8811 	msr	BASEPRI, r3
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	603b      	str	r3, [r7, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	e7fe      	b.n	800a4c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4c8:	f001 f914 	bl	800b6f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4cc:	4b39      	ldr	r3, [pc, #228]	; (800a5b4 <xTaskResumeAll+0x118>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	4a38      	ldr	r2, [pc, #224]	; (800a5b4 <xTaskResumeAll+0x118>)
 800a4d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4d6:	4b37      	ldr	r3, [pc, #220]	; (800a5b4 <xTaskResumeAll+0x118>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d162      	bne.n	800a5a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4de:	4b36      	ldr	r3, [pc, #216]	; (800a5b8 <xTaskResumeAll+0x11c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d05e      	beq.n	800a5a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4e6:	e02f      	b.n	800a548 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e8:	4b34      	ldr	r3, [pc, #208]	; (800a5bc <xTaskResumeAll+0x120>)
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3318      	adds	r3, #24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe fff3 	bl	80094e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe ffee 	bl	80094e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a508:	4b2d      	ldr	r3, [pc, #180]	; (800a5c0 <xTaskResumeAll+0x124>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d903      	bls.n	800a518 <xTaskResumeAll+0x7c>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	4a2a      	ldr	r2, [pc, #168]	; (800a5c0 <xTaskResumeAll+0x124>)
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4a27      	ldr	r2, [pc, #156]	; (800a5c4 <xTaskResumeAll+0x128>)
 800a526:	441a      	add	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3304      	adds	r3, #4
 800a52c:	4619      	mov	r1, r3
 800a52e:	4610      	mov	r0, r2
 800a530:	f7fe ff79 	bl	8009426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a538:	4b23      	ldr	r3, [pc, #140]	; (800a5c8 <xTaskResumeAll+0x12c>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53e:	429a      	cmp	r2, r3
 800a540:	d302      	bcc.n	800a548 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a542:	4b22      	ldr	r3, [pc, #136]	; (800a5cc <xTaskResumeAll+0x130>)
 800a544:	2201      	movs	r2, #1
 800a546:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a548:	4b1c      	ldr	r3, [pc, #112]	; (800a5bc <xTaskResumeAll+0x120>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1cb      	bne.n	800a4e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a556:	f000 fb55 	bl	800ac04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a55a:	4b1d      	ldr	r3, [pc, #116]	; (800a5d0 <xTaskResumeAll+0x134>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d010      	beq.n	800a588 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a566:	f000 f847 	bl	800a5f8 <xTaskIncrementTick>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a570:	4b16      	ldr	r3, [pc, #88]	; (800a5cc <xTaskResumeAll+0x130>)
 800a572:	2201      	movs	r2, #1
 800a574:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3b01      	subs	r3, #1
 800a57a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1f1      	bne.n	800a566 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a582:	4b13      	ldr	r3, [pc, #76]	; (800a5d0 <xTaskResumeAll+0x134>)
 800a584:	2200      	movs	r2, #0
 800a586:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a588:	4b10      	ldr	r3, [pc, #64]	; (800a5cc <xTaskResumeAll+0x130>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d009      	beq.n	800a5a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a590:	2301      	movs	r3, #1
 800a592:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a594:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <xTaskResumeAll+0x138>)
 800a596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5a4:	f001 f8d6 	bl	800b754 <vPortExitCritical>

	return xAlreadyYielded;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20001204 	.word	0x20001204
 800a5b8:	200011dc 	.word	0x200011dc
 800a5bc:	2000119c 	.word	0x2000119c
 800a5c0:	200011e4 	.word	0x200011e4
 800a5c4:	20000d0c 	.word	0x20000d0c
 800a5c8:	20000d08 	.word	0x20000d08
 800a5cc:	200011f0 	.word	0x200011f0
 800a5d0:	200011ec 	.word	0x200011ec
 800a5d4:	e000ed04 	.word	0xe000ed04

0800a5d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5de:	4b05      	ldr	r3, [pc, #20]	; (800a5f4 <xTaskGetTickCount+0x1c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5e4:	687b      	ldr	r3, [r7, #4]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	200011e0 	.word	0x200011e0

0800a5f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a602:	4b4f      	ldr	r3, [pc, #316]	; (800a740 <xTaskIncrementTick+0x148>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	f040 808f 	bne.w	800a72a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a60c:	4b4d      	ldr	r3, [pc, #308]	; (800a744 <xTaskIncrementTick+0x14c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a614:	4a4b      	ldr	r2, [pc, #300]	; (800a744 <xTaskIncrementTick+0x14c>)
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d120      	bne.n	800a662 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a620:	4b49      	ldr	r3, [pc, #292]	; (800a748 <xTaskIncrementTick+0x150>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <xTaskIncrementTick+0x48>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	603b      	str	r3, [r7, #0]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <xTaskIncrementTick+0x46>
 800a640:	4b41      	ldr	r3, [pc, #260]	; (800a748 <xTaskIncrementTick+0x150>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	4b41      	ldr	r3, [pc, #260]	; (800a74c <xTaskIncrementTick+0x154>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a3f      	ldr	r2, [pc, #252]	; (800a748 <xTaskIncrementTick+0x150>)
 800a64c:	6013      	str	r3, [r2, #0]
 800a64e:	4a3f      	ldr	r2, [pc, #252]	; (800a74c <xTaskIncrementTick+0x154>)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6013      	str	r3, [r2, #0]
 800a654:	4b3e      	ldr	r3, [pc, #248]	; (800a750 <xTaskIncrementTick+0x158>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3301      	adds	r3, #1
 800a65a:	4a3d      	ldr	r2, [pc, #244]	; (800a750 <xTaskIncrementTick+0x158>)
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	f000 fad1 	bl	800ac04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a662:	4b3c      	ldr	r3, [pc, #240]	; (800a754 <xTaskIncrementTick+0x15c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d349      	bcc.n	800a700 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a66c:	4b36      	ldr	r3, [pc, #216]	; (800a748 <xTaskIncrementTick+0x150>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d104      	bne.n	800a680 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a676:	4b37      	ldr	r3, [pc, #220]	; (800a754 <xTaskIncrementTick+0x15c>)
 800a678:	f04f 32ff 	mov.w	r2, #4294967295
 800a67c:	601a      	str	r2, [r3, #0]
					break;
 800a67e:	e03f      	b.n	800a700 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a680:	4b31      	ldr	r3, [pc, #196]	; (800a748 <xTaskIncrementTick+0x150>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	429a      	cmp	r2, r3
 800a696:	d203      	bcs.n	800a6a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a698:	4a2e      	ldr	r2, [pc, #184]	; (800a754 <xTaskIncrementTick+0x15c>)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a69e:	e02f      	b.n	800a700 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe ff1b 	bl	80094e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	3318      	adds	r3, #24
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe ff12 	bl	80094e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c0:	4b25      	ldr	r3, [pc, #148]	; (800a758 <xTaskIncrementTick+0x160>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d903      	bls.n	800a6d0 <xTaskIncrementTick+0xd8>
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6cc:	4a22      	ldr	r2, [pc, #136]	; (800a758 <xTaskIncrementTick+0x160>)
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4a1f      	ldr	r2, [pc, #124]	; (800a75c <xTaskIncrementTick+0x164>)
 800a6de:	441a      	add	r2, r3
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	f7fe fe9d 	bl	8009426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f0:	4b1b      	ldr	r3, [pc, #108]	; (800a760 <xTaskIncrementTick+0x168>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d3b8      	bcc.n	800a66c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6fe:	e7b5      	b.n	800a66c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a700:	4b17      	ldr	r3, [pc, #92]	; (800a760 <xTaskIncrementTick+0x168>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a706:	4915      	ldr	r1, [pc, #84]	; (800a75c <xTaskIncrementTick+0x164>)
 800a708:	4613      	mov	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4413      	add	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	440b      	add	r3, r1
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d901      	bls.n	800a71c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a718:	2301      	movs	r3, #1
 800a71a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a71c:	4b11      	ldr	r3, [pc, #68]	; (800a764 <xTaskIncrementTick+0x16c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d007      	beq.n	800a734 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a724:	2301      	movs	r3, #1
 800a726:	617b      	str	r3, [r7, #20]
 800a728:	e004      	b.n	800a734 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a72a:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <xTaskIncrementTick+0x170>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3301      	adds	r3, #1
 800a730:	4a0d      	ldr	r2, [pc, #52]	; (800a768 <xTaskIncrementTick+0x170>)
 800a732:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a734:	697b      	ldr	r3, [r7, #20]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	20001204 	.word	0x20001204
 800a744:	200011e0 	.word	0x200011e0
 800a748:	20001194 	.word	0x20001194
 800a74c:	20001198 	.word	0x20001198
 800a750:	200011f4 	.word	0x200011f4
 800a754:	200011fc 	.word	0x200011fc
 800a758:	200011e4 	.word	0x200011e4
 800a75c:	20000d0c 	.word	0x20000d0c
 800a760:	20000d08 	.word	0x20000d08
 800a764:	200011f0 	.word	0x200011f0
 800a768:	200011ec 	.word	0x200011ec

0800a76c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a772:	4b28      	ldr	r3, [pc, #160]	; (800a814 <vTaskSwitchContext+0xa8>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a77a:	4b27      	ldr	r3, [pc, #156]	; (800a818 <vTaskSwitchContext+0xac>)
 800a77c:	2201      	movs	r2, #1
 800a77e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a780:	e041      	b.n	800a806 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a782:	4b25      	ldr	r3, [pc, #148]	; (800a818 <vTaskSwitchContext+0xac>)
 800a784:	2200      	movs	r2, #0
 800a786:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a788:	4b24      	ldr	r3, [pc, #144]	; (800a81c <vTaskSwitchContext+0xb0>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	e010      	b.n	800a7b2 <vTaskSwitchContext+0x46>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10a      	bne.n	800a7ac <vTaskSwitchContext+0x40>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	607b      	str	r3, [r7, #4]
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <vTaskSwitchContext+0x3e>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	491b      	ldr	r1, [pc, #108]	; (800a820 <vTaskSwitchContext+0xb4>)
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	440b      	add	r3, r1
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d0e4      	beq.n	800a790 <vTaskSwitchContext+0x24>
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4a13      	ldr	r2, [pc, #76]	; (800a820 <vTaskSwitchContext+0xb4>)
 800a7d2:	4413      	add	r3, r2
 800a7d4:	60bb      	str	r3, [r7, #8]
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	605a      	str	r2, [r3, #4]
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d104      	bne.n	800a7f6 <vTaskSwitchContext+0x8a>
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	685a      	ldr	r2, [r3, #4]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	605a      	str	r2, [r3, #4]
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	4a09      	ldr	r2, [pc, #36]	; (800a824 <vTaskSwitchContext+0xb8>)
 800a7fe:	6013      	str	r3, [r2, #0]
 800a800:	4a06      	ldr	r2, [pc, #24]	; (800a81c <vTaskSwitchContext+0xb0>)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6013      	str	r3, [r2, #0]
}
 800a806:	bf00      	nop
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20001204 	.word	0x20001204
 800a818:	200011f0 	.word	0x200011f0
 800a81c:	200011e4 	.word	0x200011e4
 800a820:	20000d0c 	.word	0x20000d0c
 800a824:	20000d08 	.word	0x20000d08

0800a828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	60fb      	str	r3, [r7, #12]
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a84e:	4b07      	ldr	r3, [pc, #28]	; (800a86c <vTaskPlaceOnEventList+0x44>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3318      	adds	r3, #24
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7fe fe09 	bl	800946e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a85c:	2101      	movs	r1, #1
 800a85e:	6838      	ldr	r0, [r7, #0]
 800a860:	f000 fa7c 	bl	800ad5c <prvAddCurrentTaskToDelayedList>
}
 800a864:	bf00      	nop
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000d08 	.word	0x20000d08

0800a870 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10a      	bne.n	800a898 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	617b      	str	r3, [r7, #20]
}
 800a894:	bf00      	nop
 800a896:	e7fe      	b.n	800a896 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a898:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3318      	adds	r3, #24
 800a89e:	4619      	mov	r1, r3
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7fe fdc0 	bl	8009426 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	68b8      	ldr	r0, [r7, #8]
 800a8b6:	f000 fa51 	bl	800ad5c <prvAddCurrentTaskToDelayedList>
	}
 800a8ba:	bf00      	nop
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20000d08 	.word	0x20000d08

0800a8c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10a      	bne.n	800a8f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	60fb      	str	r3, [r7, #12]
}
 800a8f0:	bf00      	nop
 800a8f2:	e7fe      	b.n	800a8f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	3318      	adds	r3, #24
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fe fdf1 	bl	80094e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8fe:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <xTaskRemoveFromEventList+0xb0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d11d      	bne.n	800a942 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	3304      	adds	r3, #4
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fde8 	bl	80094e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a914:	4b19      	ldr	r3, [pc, #100]	; (800a97c <xTaskRemoveFromEventList+0xb4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d903      	bls.n	800a924 <xTaskRemoveFromEventList+0x5c>
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a920:	4a16      	ldr	r2, [pc, #88]	; (800a97c <xTaskRemoveFromEventList+0xb4>)
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	4a13      	ldr	r2, [pc, #76]	; (800a980 <xTaskRemoveFromEventList+0xb8>)
 800a932:	441a      	add	r2, r3
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	3304      	adds	r3, #4
 800a938:	4619      	mov	r1, r3
 800a93a:	4610      	mov	r0, r2
 800a93c:	f7fe fd73 	bl	8009426 <vListInsertEnd>
 800a940:	e005      	b.n	800a94e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	3318      	adds	r3, #24
 800a946:	4619      	mov	r1, r3
 800a948:	480e      	ldr	r0, [pc, #56]	; (800a984 <xTaskRemoveFromEventList+0xbc>)
 800a94a:	f7fe fd6c 	bl	8009426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a952:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <xTaskRemoveFromEventList+0xc0>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	429a      	cmp	r2, r3
 800a95a:	d905      	bls.n	800a968 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a95c:	2301      	movs	r3, #1
 800a95e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a960:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <xTaskRemoveFromEventList+0xc4>)
 800a962:	2201      	movs	r2, #1
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	e001      	b.n	800a96c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a968:	2300      	movs	r3, #0
 800a96a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a96c:	697b      	ldr	r3, [r7, #20]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20001204 	.word	0x20001204
 800a97c:	200011e4 	.word	0x200011e4
 800a980:	20000d0c 	.word	0x20000d0c
 800a984:	2000119c 	.word	0x2000119c
 800a988:	20000d08 	.word	0x20000d08
 800a98c:	200011f0 	.word	0x200011f0

0800a990 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a998:	4b06      	ldr	r3, [pc, #24]	; (800a9b4 <vTaskInternalSetTimeOutState+0x24>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a9a0:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <vTaskInternalSetTimeOutState+0x28>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	605a      	str	r2, [r3, #4]
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	200011f4 	.word	0x200011f4
 800a9b8:	200011e0 	.word	0x200011e0

0800a9bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	613b      	str	r3, [r7, #16]
}
 800a9de:	bf00      	nop
 800a9e0:	e7fe      	b.n	800a9e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	60fb      	str	r3, [r7, #12]
}
 800a9fa:	bf00      	nop
 800a9fc:	e7fe      	b.n	800a9fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9fe:	f000 fe79 	bl	800b6f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa02:	4b1d      	ldr	r3, [pc, #116]	; (800aa78 <xTaskCheckForTimeOut+0xbc>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	69ba      	ldr	r2, [r7, #24]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d102      	bne.n	800aa22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	61fb      	str	r3, [r7, #28]
 800aa20:	e023      	b.n	800aa6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <xTaskCheckForTimeOut+0xc0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d007      	beq.n	800aa3e <xTaskCheckForTimeOut+0x82>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	69ba      	ldr	r2, [r7, #24]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d302      	bcc.n	800aa3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	61fb      	str	r3, [r7, #28]
 800aa3c:	e015      	b.n	800aa6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d20b      	bcs.n	800aa60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	1ad2      	subs	r2, r2, r3
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff ff9b 	bl	800a990 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	61fb      	str	r3, [r7, #28]
 800aa5e:	e004      	b.n	800aa6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa66:	2301      	movs	r3, #1
 800aa68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa6a:	f000 fe73 	bl	800b754 <vPortExitCritical>

	return xReturn;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	200011e0 	.word	0x200011e0
 800aa7c:	200011f4 	.word	0x200011f4

0800aa80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa84:	4b03      	ldr	r3, [pc, #12]	; (800aa94 <vTaskMissedYield+0x14>)
 800aa86:	2201      	movs	r2, #1
 800aa88:	601a      	str	r2, [r3, #0]
}
 800aa8a:	bf00      	nop
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	200011f0 	.word	0x200011f0

0800aa98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aaa0:	f000 f852 	bl	800ab48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aaa4:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <prvIdleTask+0x28>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d9f9      	bls.n	800aaa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <prvIdleTask+0x2c>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aabc:	e7f0      	b.n	800aaa0 <prvIdleTask+0x8>
 800aabe:	bf00      	nop
 800aac0:	20000d0c 	.word	0x20000d0c
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aace:	2300      	movs	r3, #0
 800aad0:	607b      	str	r3, [r7, #4]
 800aad2:	e00c      	b.n	800aaee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4a12      	ldr	r2, [pc, #72]	; (800ab28 <prvInitialiseTaskLists+0x60>)
 800aae0:	4413      	add	r3, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fc72 	bl	80093cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3301      	adds	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b37      	cmp	r3, #55	; 0x37
 800aaf2:	d9ef      	bls.n	800aad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aaf4:	480d      	ldr	r0, [pc, #52]	; (800ab2c <prvInitialiseTaskLists+0x64>)
 800aaf6:	f7fe fc69 	bl	80093cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aafa:	480d      	ldr	r0, [pc, #52]	; (800ab30 <prvInitialiseTaskLists+0x68>)
 800aafc:	f7fe fc66 	bl	80093cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab00:	480c      	ldr	r0, [pc, #48]	; (800ab34 <prvInitialiseTaskLists+0x6c>)
 800ab02:	f7fe fc63 	bl	80093cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab06:	480c      	ldr	r0, [pc, #48]	; (800ab38 <prvInitialiseTaskLists+0x70>)
 800ab08:	f7fe fc60 	bl	80093cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab0c:	480b      	ldr	r0, [pc, #44]	; (800ab3c <prvInitialiseTaskLists+0x74>)
 800ab0e:	f7fe fc5d 	bl	80093cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab12:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <prvInitialiseTaskLists+0x78>)
 800ab14:	4a05      	ldr	r2, [pc, #20]	; (800ab2c <prvInitialiseTaskLists+0x64>)
 800ab16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab18:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <prvInitialiseTaskLists+0x7c>)
 800ab1a:	4a05      	ldr	r2, [pc, #20]	; (800ab30 <prvInitialiseTaskLists+0x68>)
 800ab1c:	601a      	str	r2, [r3, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20000d0c 	.word	0x20000d0c
 800ab2c:	2000116c 	.word	0x2000116c
 800ab30:	20001180 	.word	0x20001180
 800ab34:	2000119c 	.word	0x2000119c
 800ab38:	200011b0 	.word	0x200011b0
 800ab3c:	200011c8 	.word	0x200011c8
 800ab40:	20001194 	.word	0x20001194
 800ab44:	20001198 	.word	0x20001198

0800ab48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab4e:	e019      	b.n	800ab84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab50:	f000 fdd0 	bl	800b6f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab54:	4b10      	ldr	r3, [pc, #64]	; (800ab98 <prvCheckTasksWaitingTermination+0x50>)
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fcbd 	bl	80094e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab66:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	4a0b      	ldr	r2, [pc, #44]	; (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab70:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	4a0a      	ldr	r2, [pc, #40]	; (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab7a:	f000 fdeb 	bl	800b754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f810 	bl	800aba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab84:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e1      	bne.n	800ab50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	200011b0 	.word	0x200011b0
 800ab9c:	200011dc 	.word	0x200011dc
 800aba0:	200011c4 	.word	0x200011c4

0800aba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d108      	bne.n	800abc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 ff88 	bl	800bad0 <vPortFree>
				vPortFree( pxTCB );
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 ff85 	bl	800bad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800abc6:	e018      	b.n	800abfa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d103      	bne.n	800abda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 ff7c 	bl	800bad0 <vPortFree>
	}
 800abd8:	e00f      	b.n	800abfa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d00a      	beq.n	800abfa <prvDeleteTCB+0x56>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	60fb      	str	r3, [r7, #12]
}
 800abf6:	bf00      	nop
 800abf8:	e7fe      	b.n	800abf8 <prvDeleteTCB+0x54>
	}
 800abfa:	bf00      	nop
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac0a:	4b0c      	ldr	r3, [pc, #48]	; (800ac3c <prvResetNextTaskUnblockTime+0x38>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d104      	bne.n	800ac1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac14:	4b0a      	ldr	r3, [pc, #40]	; (800ac40 <prvResetNextTaskUnblockTime+0x3c>)
 800ac16:	f04f 32ff 	mov.w	r2, #4294967295
 800ac1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac1c:	e008      	b.n	800ac30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac1e:	4b07      	ldr	r3, [pc, #28]	; (800ac3c <prvResetNextTaskUnblockTime+0x38>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	4a04      	ldr	r2, [pc, #16]	; (800ac40 <prvResetNextTaskUnblockTime+0x3c>)
 800ac2e:	6013      	str	r3, [r2, #0]
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	20001194 	.word	0x20001194
 800ac40:	200011fc 	.word	0x200011fc

0800ac44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac4a:	4b0b      	ldr	r3, [pc, #44]	; (800ac78 <xTaskGetSchedulerState+0x34>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d102      	bne.n	800ac58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac52:	2301      	movs	r3, #1
 800ac54:	607b      	str	r3, [r7, #4]
 800ac56:	e008      	b.n	800ac6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac58:	4b08      	ldr	r3, [pc, #32]	; (800ac7c <xTaskGetSchedulerState+0x38>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d102      	bne.n	800ac66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac60:	2302      	movs	r3, #2
 800ac62:	607b      	str	r3, [r7, #4]
 800ac64:	e001      	b.n	800ac6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac66:	2300      	movs	r3, #0
 800ac68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac6a:	687b      	ldr	r3, [r7, #4]
	}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	200011e8 	.word	0x200011e8
 800ac7c:	20001204 	.word	0x20001204

0800ac80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d056      	beq.n	800ad44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac96:	4b2e      	ldr	r3, [pc, #184]	; (800ad50 <xTaskPriorityDisinherit+0xd0>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d00a      	beq.n	800acb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	60fb      	str	r3, [r7, #12]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10a      	bne.n	800acd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	60bb      	str	r3, [r7, #8]
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd8:	1e5a      	subs	r2, r3, #1
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d02c      	beq.n	800ad44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d128      	bne.n	800ad44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	3304      	adds	r3, #4
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fe fbf2 	bl	80094e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad14:	4b0f      	ldr	r3, [pc, #60]	; (800ad54 <xTaskPriorityDisinherit+0xd4>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d903      	bls.n	800ad24 <xTaskPriorityDisinherit+0xa4>
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	4a0c      	ldr	r2, [pc, #48]	; (800ad54 <xTaskPriorityDisinherit+0xd4>)
 800ad22:	6013      	str	r3, [r2, #0]
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4a09      	ldr	r2, [pc, #36]	; (800ad58 <xTaskPriorityDisinherit+0xd8>)
 800ad32:	441a      	add	r2, r3
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	3304      	adds	r3, #4
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	f7fe fb73 	bl	8009426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad40:	2301      	movs	r3, #1
 800ad42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad44:	697b      	ldr	r3, [r7, #20]
	}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000d08 	.word	0x20000d08
 800ad54:	200011e4 	.word	0x200011e4
 800ad58:	20000d0c 	.word	0x20000d0c

0800ad5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad66:	4b21      	ldr	r3, [pc, #132]	; (800adec <prvAddCurrentTaskToDelayedList+0x90>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad6c:	4b20      	ldr	r3, [pc, #128]	; (800adf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3304      	adds	r3, #4
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe fbb4 	bl	80094e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7e:	d10a      	bne.n	800ad96 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d007      	beq.n	800ad96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad86:	4b1a      	ldr	r3, [pc, #104]	; (800adf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	4819      	ldr	r0, [pc, #100]	; (800adf4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad90:	f7fe fb49 	bl	8009426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad94:	e026      	b.n	800ade4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad9e:	4b14      	ldr	r3, [pc, #80]	; (800adf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d209      	bcs.n	800adc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adae:	4b12      	ldr	r3, [pc, #72]	; (800adf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	4b0f      	ldr	r3, [pc, #60]	; (800adf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3304      	adds	r3, #4
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7fe fb57 	bl	800946e <vListInsert>
}
 800adc0:	e010      	b.n	800ade4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adc2:	4b0e      	ldr	r3, [pc, #56]	; (800adfc <prvAddCurrentTaskToDelayedList+0xa0>)
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3304      	adds	r3, #4
 800adcc:	4619      	mov	r1, r3
 800adce:	4610      	mov	r0, r2
 800add0:	f7fe fb4d 	bl	800946e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800add4:	4b0a      	ldr	r3, [pc, #40]	; (800ae00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	429a      	cmp	r2, r3
 800addc:	d202      	bcs.n	800ade4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adde:	4a08      	ldr	r2, [pc, #32]	; (800ae00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	6013      	str	r3, [r2, #0]
}
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	200011e0 	.word	0x200011e0
 800adf0:	20000d08 	.word	0x20000d08
 800adf4:	200011c8 	.word	0x200011c8
 800adf8:	20001198 	.word	0x20001198
 800adfc:	20001194 	.word	0x20001194
 800ae00:	200011fc 	.word	0x200011fc

0800ae04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08a      	sub	sp, #40	; 0x28
 800ae08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae0e:	f000 fb07 	bl	800b420 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <xTimerCreateTimerTask+0x80>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d021      	beq.n	800ae5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae22:	1d3a      	adds	r2, r7, #4
 800ae24:	f107 0108 	add.w	r1, r7, #8
 800ae28:	f107 030c 	add.w	r3, r7, #12
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7fe fab3 	bl	8009398 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae32:	6879      	ldr	r1, [r7, #4]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	9202      	str	r2, [sp, #8]
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	2300      	movs	r3, #0
 800ae42:	460a      	mov	r2, r1
 800ae44:	4910      	ldr	r1, [pc, #64]	; (800ae88 <xTimerCreateTimerTask+0x84>)
 800ae46:	4811      	ldr	r0, [pc, #68]	; (800ae8c <xTimerCreateTimerTask+0x88>)
 800ae48:	f7ff f860 	bl	8009f0c <xTaskCreateStatic>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	4a10      	ldr	r2, [pc, #64]	; (800ae90 <xTimerCreateTimerTask+0x8c>)
 800ae50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae52:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <xTimerCreateTimerTask+0x8c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	613b      	str	r3, [r7, #16]
}
 800ae76:	bf00      	nop
 800ae78:	e7fe      	b.n	800ae78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae7a:	697b      	ldr	r3, [r7, #20]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	20001238 	.word	0x20001238
 800ae88:	0800f47c 	.word	0x0800f47c
 800ae8c:	0800afc9 	.word	0x0800afc9
 800ae90:	2000123c 	.word	0x2000123c

0800ae94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08a      	sub	sp, #40	; 0x28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	623b      	str	r3, [r7, #32]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aec2:	4b1a      	ldr	r3, [pc, #104]	; (800af2c <xTimerGenericCommand+0x98>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d02a      	beq.n	800af20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2b05      	cmp	r3, #5
 800aeda:	dc18      	bgt.n	800af0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aedc:	f7ff feb2 	bl	800ac44 <xTaskGetSchedulerState>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d109      	bne.n	800aefa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aee6:	4b11      	ldr	r3, [pc, #68]	; (800af2c <xTimerGenericCommand+0x98>)
 800aee8:	6818      	ldr	r0, [r3, #0]
 800aeea:	f107 0110 	add.w	r1, r7, #16
 800aeee:	2300      	movs	r3, #0
 800aef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aef2:	f7fe fc23 	bl	800973c <xQueueGenericSend>
 800aef6:	6278      	str	r0, [r7, #36]	; 0x24
 800aef8:	e012      	b.n	800af20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aefa:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <xTimerGenericCommand+0x98>)
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	f107 0110 	add.w	r1, r7, #16
 800af02:	2300      	movs	r3, #0
 800af04:	2200      	movs	r2, #0
 800af06:	f7fe fc19 	bl	800973c <xQueueGenericSend>
 800af0a:	6278      	str	r0, [r7, #36]	; 0x24
 800af0c:	e008      	b.n	800af20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af0e:	4b07      	ldr	r3, [pc, #28]	; (800af2c <xTimerGenericCommand+0x98>)
 800af10:	6818      	ldr	r0, [r3, #0]
 800af12:	f107 0110 	add.w	r1, r7, #16
 800af16:	2300      	movs	r3, #0
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	f7fe fd0d 	bl	8009938 <xQueueGenericSendFromISR>
 800af1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af22:	4618      	mov	r0, r3
 800af24:	3728      	adds	r7, #40	; 0x28
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	20001238 	.word	0x20001238

0800af30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af02      	add	r7, sp, #8
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af3a:	4b22      	ldr	r3, [pc, #136]	; (800afc4 <prvProcessExpiredTimer+0x94>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	3304      	adds	r3, #4
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fe fac9 	bl	80094e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d022      	beq.n	800afa2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	699a      	ldr	r2, [r3, #24]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	18d1      	adds	r1, r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	6978      	ldr	r0, [r7, #20]
 800af6a:	f000 f8d1 	bl	800b110 <prvInsertTimerInActiveList>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01f      	beq.n	800afb4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af74:	2300      	movs	r3, #0
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	2300      	movs	r3, #0
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	2100      	movs	r1, #0
 800af7e:	6978      	ldr	r0, [r7, #20]
 800af80:	f7ff ff88 	bl	800ae94 <xTimerGenericCommand>
 800af84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d113      	bne.n	800afb4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	60fb      	str	r3, [r7, #12]
}
 800af9e:	bf00      	nop
 800afa0:	e7fe      	b.n	800afa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa8:	f023 0301 	bic.w	r3, r3, #1
 800afac:	b2da      	uxtb	r2, r3
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	6a1b      	ldr	r3, [r3, #32]
 800afb8:	6978      	ldr	r0, [r7, #20]
 800afba:	4798      	blx	r3
}
 800afbc:	bf00      	nop
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20001230 	.word	0x20001230

0800afc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afd0:	f107 0308 	add.w	r3, r7, #8
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 f857 	bl	800b088 <prvGetNextExpireTime>
 800afda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	4619      	mov	r1, r3
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 f803 	bl	800afec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afe6:	f000 f8d5 	bl	800b194 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afea:	e7f1      	b.n	800afd0 <prvTimerTask+0x8>

0800afec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aff6:	f7ff fa43 	bl	800a480 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800affa:	f107 0308 	add.w	r3, r7, #8
 800affe:	4618      	mov	r0, r3
 800b000:	f000 f866 	bl	800b0d0 <prvSampleTimeNow>
 800b004:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d130      	bne.n	800b06e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10a      	bne.n	800b028 <prvProcessTimerOrBlockTask+0x3c>
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	429a      	cmp	r2, r3
 800b018:	d806      	bhi.n	800b028 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b01a:	f7ff fa3f 	bl	800a49c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b01e:	68f9      	ldr	r1, [r7, #12]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7ff ff85 	bl	800af30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b026:	e024      	b.n	800b072 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d008      	beq.n	800b040 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b02e:	4b13      	ldr	r3, [pc, #76]	; (800b07c <prvProcessTimerOrBlockTask+0x90>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <prvProcessTimerOrBlockTask+0x50>
 800b038:	2301      	movs	r3, #1
 800b03a:	e000      	b.n	800b03e <prvProcessTimerOrBlockTask+0x52>
 800b03c:	2300      	movs	r3, #0
 800b03e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b040:	4b0f      	ldr	r3, [pc, #60]	; (800b080 <prvProcessTimerOrBlockTask+0x94>)
 800b042:	6818      	ldr	r0, [r3, #0]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	4619      	mov	r1, r3
 800b04e:	f7fe ff29 	bl	8009ea4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b052:	f7ff fa23 	bl	800a49c <xTaskResumeAll>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10a      	bne.n	800b072 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b05c:	4b09      	ldr	r3, [pc, #36]	; (800b084 <prvProcessTimerOrBlockTask+0x98>)
 800b05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	f3bf 8f6f 	isb	sy
}
 800b06c:	e001      	b.n	800b072 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b06e:	f7ff fa15 	bl	800a49c <xTaskResumeAll>
}
 800b072:	bf00      	nop
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20001234 	.word	0x20001234
 800b080:	20001238 	.word	0x20001238
 800b084:	e000ed04 	.word	0xe000ed04

0800b088 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b090:	4b0e      	ldr	r3, [pc, #56]	; (800b0cc <prvGetNextExpireTime+0x44>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <prvGetNextExpireTime+0x16>
 800b09a:	2201      	movs	r2, #1
 800b09c:	e000      	b.n	800b0a0 <prvGetNextExpireTime+0x18>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d105      	bne.n	800b0b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0ac:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <prvGetNextExpireTime+0x44>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	e001      	b.n	800b0bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	20001230 	.word	0x20001230

0800b0d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0d8:	f7ff fa7e 	bl	800a5d8 <xTaskGetTickCount>
 800b0dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0de:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <prvSampleTimeNow+0x3c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d205      	bcs.n	800b0f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0e8:	f000 f936 	bl	800b358 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	e002      	b.n	800b0fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0fa:	4a04      	ldr	r2, [pc, #16]	; (800b10c <prvSampleTimeNow+0x3c>)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b100:	68fb      	ldr	r3, [r7, #12]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20001240 	.word	0x20001240

0800b110 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
 800b11c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b11e:	2300      	movs	r3, #0
 800b120:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	429a      	cmp	r2, r3
 800b134:	d812      	bhi.n	800b15c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	1ad2      	subs	r2, r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	429a      	cmp	r2, r3
 800b142:	d302      	bcc.n	800b14a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b144:	2301      	movs	r3, #1
 800b146:	617b      	str	r3, [r7, #20]
 800b148:	e01b      	b.n	800b182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b14a:	4b10      	ldr	r3, [pc, #64]	; (800b18c <prvInsertTimerInActiveList+0x7c>)
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	3304      	adds	r3, #4
 800b152:	4619      	mov	r1, r3
 800b154:	4610      	mov	r0, r2
 800b156:	f7fe f98a 	bl	800946e <vListInsert>
 800b15a:	e012      	b.n	800b182 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	429a      	cmp	r2, r3
 800b162:	d206      	bcs.n	800b172 <prvInsertTimerInActiveList+0x62>
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d302      	bcc.n	800b172 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b16c:	2301      	movs	r3, #1
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	e007      	b.n	800b182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b172:	4b07      	ldr	r3, [pc, #28]	; (800b190 <prvInsertTimerInActiveList+0x80>)
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3304      	adds	r3, #4
 800b17a:	4619      	mov	r1, r3
 800b17c:	4610      	mov	r0, r2
 800b17e:	f7fe f976 	bl	800946e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b182:	697b      	ldr	r3, [r7, #20]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20001234 	.word	0x20001234
 800b190:	20001230 	.word	0x20001230

0800b194 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08e      	sub	sp, #56	; 0x38
 800b198:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b19a:	e0ca      	b.n	800b332 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	da18      	bge.n	800b1d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1a2:	1d3b      	adds	r3, r7, #4
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	61fb      	str	r3, [r7, #28]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ca:	6850      	ldr	r0, [r2, #4]
 800b1cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ce:	6892      	ldr	r2, [r2, #8]
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f2c0 80aa 	blt.w	800b330 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d004      	beq.n	800b1f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fe f977 	bl	80094e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1f2:	463b      	mov	r3, r7
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7ff ff6b 	bl	800b0d0 <prvSampleTimeNow>
 800b1fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b09      	cmp	r3, #9
 800b200:	f200 8097 	bhi.w	800b332 <prvProcessReceivedCommands+0x19e>
 800b204:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <prvProcessReceivedCommands+0x78>)
 800b206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20a:	bf00      	nop
 800b20c:	0800b235 	.word	0x0800b235
 800b210:	0800b235 	.word	0x0800b235
 800b214:	0800b235 	.word	0x0800b235
 800b218:	0800b2a9 	.word	0x0800b2a9
 800b21c:	0800b2bd 	.word	0x0800b2bd
 800b220:	0800b307 	.word	0x0800b307
 800b224:	0800b235 	.word	0x0800b235
 800b228:	0800b235 	.word	0x0800b235
 800b22c:	0800b2a9 	.word	0x0800b2a9
 800b230:	0800b2bd 	.word	0x0800b2bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b23a:	f043 0301 	orr.w	r3, r3, #1
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	18d1      	adds	r1, r2, r3
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b254:	f7ff ff5c 	bl	800b110 <prvInsertTimerInActiveList>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d069      	beq.n	800b332 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b264:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	d05e      	beq.n	800b332 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	441a      	add	r2, r3
 800b27c:	2300      	movs	r3, #0
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	2300      	movs	r3, #0
 800b282:	2100      	movs	r1, #0
 800b284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b286:	f7ff fe05 	bl	800ae94 <xTimerGenericCommand>
 800b28a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d14f      	bne.n	800b332 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	61bb      	str	r3, [r7, #24]
}
 800b2a4:	bf00      	nop
 800b2a6:	e7fe      	b.n	800b2a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2ae:	f023 0301 	bic.w	r3, r3, #1
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b2ba:	e03a      	b.n	800b332 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2c2:	f043 0301 	orr.w	r3, r3, #1
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10a      	bne.n	800b2f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	617b      	str	r3, [r7, #20]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f4:	699a      	ldr	r2, [r3, #24]
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	18d1      	adds	r1, r2, r3
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b300:	f7ff ff06 	bl	800b110 <prvInsertTimerInActiveList>
					break;
 800b304:	e015      	b.n	800b332 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b30c:	f003 0302 	and.w	r3, r3, #2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d103      	bne.n	800b31c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b316:	f000 fbdb 	bl	800bad0 <vPortFree>
 800b31a:	e00a      	b.n	800b332 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b322:	f023 0301 	bic.w	r3, r3, #1
 800b326:	b2da      	uxtb	r2, r3
 800b328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b32e:	e000      	b.n	800b332 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b330:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b332:	4b08      	ldr	r3, [pc, #32]	; (800b354 <prvProcessReceivedCommands+0x1c0>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	1d39      	adds	r1, r7, #4
 800b338:	2200      	movs	r2, #0
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe fb98 	bl	8009a70 <xQueueReceive>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	f47f af2a 	bne.w	800b19c <prvProcessReceivedCommands+0x8>
	}
}
 800b348:	bf00      	nop
 800b34a:	bf00      	nop
 800b34c:	3730      	adds	r7, #48	; 0x30
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	20001238 	.word	0x20001238

0800b358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b088      	sub	sp, #32
 800b35c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b35e:	e048      	b.n	800b3f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b360:	4b2d      	ldr	r3, [pc, #180]	; (800b418 <prvSwitchTimerLists+0xc0>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b36a:	4b2b      	ldr	r3, [pc, #172]	; (800b418 <prvSwitchTimerLists+0xc0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3304      	adds	r3, #4
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fe f8b1 	bl	80094e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6a1b      	ldr	r3, [r3, #32]
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d02e      	beq.n	800b3f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	4413      	add	r3, r2
 800b39c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d90e      	bls.n	800b3c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3b2:	4b19      	ldr	r3, [pc, #100]	; (800b418 <prvSwitchTimerLists+0xc0>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	3304      	adds	r3, #4
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4610      	mov	r0, r2
 800b3be:	f7fe f856 	bl	800946e <vListInsert>
 800b3c2:	e016      	b.n	800b3f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7ff fd60 	bl	800ae94 <xTimerGenericCommand>
 800b3d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10a      	bne.n	800b3f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	603b      	str	r3, [r7, #0]
}
 800b3ee:	bf00      	nop
 800b3f0:	e7fe      	b.n	800b3f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <prvSwitchTimerLists+0xc0>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1b1      	bne.n	800b360 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <prvSwitchTimerLists+0xc0>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b402:	4b06      	ldr	r3, [pc, #24]	; (800b41c <prvSwitchTimerLists+0xc4>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a04      	ldr	r2, [pc, #16]	; (800b418 <prvSwitchTimerLists+0xc0>)
 800b408:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b40a:	4a04      	ldr	r2, [pc, #16]	; (800b41c <prvSwitchTimerLists+0xc4>)
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	6013      	str	r3, [r2, #0]
}
 800b410:	bf00      	nop
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20001230 	.word	0x20001230
 800b41c:	20001234 	.word	0x20001234

0800b420 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b426:	f000 f965 	bl	800b6f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b42a:	4b15      	ldr	r3, [pc, #84]	; (800b480 <prvCheckForValidListAndQueue+0x60>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d120      	bne.n	800b474 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b432:	4814      	ldr	r0, [pc, #80]	; (800b484 <prvCheckForValidListAndQueue+0x64>)
 800b434:	f7fd ffca 	bl	80093cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b438:	4813      	ldr	r0, [pc, #76]	; (800b488 <prvCheckForValidListAndQueue+0x68>)
 800b43a:	f7fd ffc7 	bl	80093cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b43e:	4b13      	ldr	r3, [pc, #76]	; (800b48c <prvCheckForValidListAndQueue+0x6c>)
 800b440:	4a10      	ldr	r2, [pc, #64]	; (800b484 <prvCheckForValidListAndQueue+0x64>)
 800b442:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b444:	4b12      	ldr	r3, [pc, #72]	; (800b490 <prvCheckForValidListAndQueue+0x70>)
 800b446:	4a10      	ldr	r2, [pc, #64]	; (800b488 <prvCheckForValidListAndQueue+0x68>)
 800b448:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b44a:	2300      	movs	r3, #0
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	4b11      	ldr	r3, [pc, #68]	; (800b494 <prvCheckForValidListAndQueue+0x74>)
 800b450:	4a11      	ldr	r2, [pc, #68]	; (800b498 <prvCheckForValidListAndQueue+0x78>)
 800b452:	2110      	movs	r1, #16
 800b454:	200a      	movs	r0, #10
 800b456:	f7fe f8d5 	bl	8009604 <xQueueGenericCreateStatic>
 800b45a:	4603      	mov	r3, r0
 800b45c:	4a08      	ldr	r2, [pc, #32]	; (800b480 <prvCheckForValidListAndQueue+0x60>)
 800b45e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b460:	4b07      	ldr	r3, [pc, #28]	; (800b480 <prvCheckForValidListAndQueue+0x60>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d005      	beq.n	800b474 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b468:	4b05      	ldr	r3, [pc, #20]	; (800b480 <prvCheckForValidListAndQueue+0x60>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	490b      	ldr	r1, [pc, #44]	; (800b49c <prvCheckForValidListAndQueue+0x7c>)
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe fcee 	bl	8009e50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b474:	f000 f96e 	bl	800b754 <vPortExitCritical>
}
 800b478:	bf00      	nop
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20001238 	.word	0x20001238
 800b484:	20001208 	.word	0x20001208
 800b488:	2000121c 	.word	0x2000121c
 800b48c:	20001230 	.word	0x20001230
 800b490:	20001234 	.word	0x20001234
 800b494:	200012e4 	.word	0x200012e4
 800b498:	20001244 	.word	0x20001244
 800b49c:	0800f484 	.word	0x0800f484

0800b4a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3b04      	subs	r3, #4
 800b4b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3b04      	subs	r3, #4
 800b4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	f023 0201 	bic.w	r2, r3, #1
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3b04      	subs	r3, #4
 800b4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4d0:	4a0c      	ldr	r2, [pc, #48]	; (800b504 <pxPortInitialiseStack+0x64>)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3b14      	subs	r3, #20
 800b4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3b04      	subs	r3, #4
 800b4e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f06f 0202 	mvn.w	r2, #2
 800b4ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3b20      	subs	r3, #32
 800b4f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr
 800b504:	0800b509 	.word	0x0800b509

0800b508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b50e:	2300      	movs	r3, #0
 800b510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b512:	4b12      	ldr	r3, [pc, #72]	; (800b55c <prvTaskExitError+0x54>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51a:	d00a      	beq.n	800b532 <prvTaskExitError+0x2a>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	60fb      	str	r3, [r7, #12]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <prvTaskExitError+0x28>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	60bb      	str	r3, [r7, #8]
}
 800b544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b546:	bf00      	nop
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d0fc      	beq.n	800b548 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b54e:	bf00      	nop
 800b550:	bf00      	nop
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	2000001c 	.word	0x2000001c

0800b560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <pxCurrentTCBConst2>)
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	f380 8809 	msr	PSP, r0
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f380 8811 	msr	BASEPRI, r0
 800b57a:	4770      	bx	lr
 800b57c:	f3af 8000 	nop.w

0800b580 <pxCurrentTCBConst2>:
 800b580:	20000d08 	.word	0x20000d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop

0800b588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b588:	4808      	ldr	r0, [pc, #32]	; (800b5ac <prvPortStartFirstTask+0x24>)
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	6800      	ldr	r0, [r0, #0]
 800b58e:	f380 8808 	msr	MSP, r0
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8814 	msr	CONTROL, r0
 800b59a:	b662      	cpsie	i
 800b59c:	b661      	cpsie	f
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	df00      	svc	0
 800b5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5aa:	bf00      	nop
 800b5ac:	e000ed08 	.word	0xe000ed08

0800b5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5b6:	4b46      	ldr	r3, [pc, #280]	; (800b6d0 <xPortStartScheduler+0x120>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a46      	ldr	r2, [pc, #280]	; (800b6d4 <xPortStartScheduler+0x124>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d10a      	bne.n	800b5d6 <xPortStartScheduler+0x26>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	613b      	str	r3, [r7, #16]
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5d6:	4b3e      	ldr	r3, [pc, #248]	; (800b6d0 <xPortStartScheduler+0x120>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a3f      	ldr	r2, [pc, #252]	; (800b6d8 <xPortStartScheduler+0x128>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d10a      	bne.n	800b5f6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	60fb      	str	r3, [r7, #12]
}
 800b5f2:	bf00      	nop
 800b5f4:	e7fe      	b.n	800b5f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5f6:	4b39      	ldr	r3, [pc, #228]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b5f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	22ff      	movs	r2, #255	; 0xff
 800b606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b610:	78fb      	ldrb	r3, [r7, #3]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	4b31      	ldr	r3, [pc, #196]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b61e:	4b31      	ldr	r3, [pc, #196]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b620:	2207      	movs	r2, #7
 800b622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b624:	e009      	b.n	800b63a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b626:	4b2f      	ldr	r3, [pc, #188]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	4a2d      	ldr	r2, [pc, #180]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b630:	78fb      	ldrb	r3, [r7, #3]
 800b632:	b2db      	uxtb	r3, r3
 800b634:	005b      	lsls	r3, r3, #1
 800b636:	b2db      	uxtb	r3, r3
 800b638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b63a:	78fb      	ldrb	r3, [r7, #3]
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b642:	2b80      	cmp	r3, #128	; 0x80
 800b644:	d0ef      	beq.n	800b626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b646:	4b27      	ldr	r3, [pc, #156]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f1c3 0307 	rsb	r3, r3, #7
 800b64e:	2b04      	cmp	r3, #4
 800b650:	d00a      	beq.n	800b668 <xPortStartScheduler+0xb8>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	60bb      	str	r3, [r7, #8]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b668:	4b1e      	ldr	r3, [pc, #120]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	021b      	lsls	r3, r3, #8
 800b66e:	4a1d      	ldr	r2, [pc, #116]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b672:	4b1c      	ldr	r3, [pc, #112]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b67a:	4a1a      	ldr	r2, [pc, #104]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b67c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	b2da      	uxtb	r2, r3
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b686:	4b18      	ldr	r3, [pc, #96]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a17      	ldr	r2, [pc, #92]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b68c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b692:	4b15      	ldr	r3, [pc, #84]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a14      	ldr	r2, [pc, #80]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b69c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b69e:	f000 f8dd 	bl	800b85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6a2:	4b12      	ldr	r3, [pc, #72]	; (800b6ec <xPortStartScheduler+0x13c>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6a8:	f000 f8fc 	bl	800b8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6ac:	4b10      	ldr	r3, [pc, #64]	; (800b6f0 <xPortStartScheduler+0x140>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a0f      	ldr	r2, [pc, #60]	; (800b6f0 <xPortStartScheduler+0x140>)
 800b6b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6b8:	f7ff ff66 	bl	800b588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6bc:	f7ff f856 	bl	800a76c <vTaskSwitchContext>
	prvTaskExitError();
 800b6c0:	f7ff ff22 	bl	800b508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3718      	adds	r7, #24
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	e000ed00 	.word	0xe000ed00
 800b6d4:	410fc271 	.word	0x410fc271
 800b6d8:	410fc270 	.word	0x410fc270
 800b6dc:	e000e400 	.word	0xe000e400
 800b6e0:	20001334 	.word	0x20001334
 800b6e4:	20001338 	.word	0x20001338
 800b6e8:	e000ed20 	.word	0xe000ed20
 800b6ec:	2000001c 	.word	0x2000001c
 800b6f0:	e000ef34 	.word	0xe000ef34

0800b6f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	607b      	str	r3, [r7, #4]
}
 800b70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b70e:	4b0f      	ldr	r3, [pc, #60]	; (800b74c <vPortEnterCritical+0x58>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3301      	adds	r3, #1
 800b714:	4a0d      	ldr	r2, [pc, #52]	; (800b74c <vPortEnterCritical+0x58>)
 800b716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b718:	4b0c      	ldr	r3, [pc, #48]	; (800b74c <vPortEnterCritical+0x58>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d10f      	bne.n	800b740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b720:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <vPortEnterCritical+0x5c>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <vPortEnterCritical+0x4c>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	603b      	str	r3, [r7, #0]
}
 800b73c:	bf00      	nop
 800b73e:	e7fe      	b.n	800b73e <vPortEnterCritical+0x4a>
	}
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr
 800b74c:	2000001c 	.word	0x2000001c
 800b750:	e000ed04 	.word	0xe000ed04

0800b754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b75a:	4b12      	ldr	r3, [pc, #72]	; (800b7a4 <vPortExitCritical+0x50>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10a      	bne.n	800b778 <vPortExitCritical+0x24>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	607b      	str	r3, [r7, #4]
}
 800b774:	bf00      	nop
 800b776:	e7fe      	b.n	800b776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b778:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <vPortExitCritical+0x50>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	4a09      	ldr	r2, [pc, #36]	; (800b7a4 <vPortExitCritical+0x50>)
 800b780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b782:	4b08      	ldr	r3, [pc, #32]	; (800b7a4 <vPortExitCritical+0x50>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d105      	bne.n	800b796 <vPortExitCritical+0x42>
 800b78a:	2300      	movs	r3, #0
 800b78c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	f383 8811 	msr	BASEPRI, r3
}
 800b794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b796:	bf00      	nop
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	2000001c 	.word	0x2000001c
	...

0800b7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7b0:	f3ef 8009 	mrs	r0, PSP
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	4b15      	ldr	r3, [pc, #84]	; (800b810 <pxCurrentTCBConst>)
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	f01e 0f10 	tst.w	lr, #16
 800b7c0:	bf08      	it	eq
 800b7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ca:	6010      	str	r0, [r2, #0]
 800b7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7d4:	f380 8811 	msr	BASEPRI, r0
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f7fe ffc4 	bl	800a76c <vTaskSwitchContext>
 800b7e4:	f04f 0000 	mov.w	r0, #0
 800b7e8:	f380 8811 	msr	BASEPRI, r0
 800b7ec:	bc09      	pop	{r0, r3}
 800b7ee:	6819      	ldr	r1, [r3, #0]
 800b7f0:	6808      	ldr	r0, [r1, #0]
 800b7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f6:	f01e 0f10 	tst.w	lr, #16
 800b7fa:	bf08      	it	eq
 800b7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b800:	f380 8809 	msr	PSP, r0
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	f3af 8000 	nop.w

0800b810 <pxCurrentTCBConst>:
 800b810:	20000d08 	.word	0x20000d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop

0800b818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	607b      	str	r3, [r7, #4]
}
 800b830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b832:	f7fe fee1 	bl	800a5f8 <xTaskIncrementTick>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b83c:	4b06      	ldr	r3, [pc, #24]	; (800b858 <xPortSysTickHandler+0x40>)
 800b83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b842:	601a      	str	r2, [r3, #0]
 800b844:	2300      	movs	r3, #0
 800b846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	f383 8811 	msr	BASEPRI, r3
}
 800b84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b85c:	b480      	push	{r7}
 800b85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b860:	4b0b      	ldr	r3, [pc, #44]	; (800b890 <vPortSetupTimerInterrupt+0x34>)
 800b862:	2200      	movs	r2, #0
 800b864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b866:	4b0b      	ldr	r3, [pc, #44]	; (800b894 <vPortSetupTimerInterrupt+0x38>)
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b86c:	4b0a      	ldr	r3, [pc, #40]	; (800b898 <vPortSetupTimerInterrupt+0x3c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a0a      	ldr	r2, [pc, #40]	; (800b89c <vPortSetupTimerInterrupt+0x40>)
 800b872:	fba2 2303 	umull	r2, r3, r2, r3
 800b876:	099b      	lsrs	r3, r3, #6
 800b878:	4a09      	ldr	r2, [pc, #36]	; (800b8a0 <vPortSetupTimerInterrupt+0x44>)
 800b87a:	3b01      	subs	r3, #1
 800b87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b87e:	4b04      	ldr	r3, [pc, #16]	; (800b890 <vPortSetupTimerInterrupt+0x34>)
 800b880:	2207      	movs	r2, #7
 800b882:	601a      	str	r2, [r3, #0]
}
 800b884:	bf00      	nop
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	e000e010 	.word	0xe000e010
 800b894:	e000e018 	.word	0xe000e018
 800b898:	20000010 	.word	0x20000010
 800b89c:	10624dd3 	.word	0x10624dd3
 800b8a0:	e000e014 	.word	0xe000e014

0800b8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8b4 <vPortEnableVFP+0x10>
 800b8a8:	6801      	ldr	r1, [r0, #0]
 800b8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8ae:	6001      	str	r1, [r0, #0]
 800b8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8b2:	bf00      	nop
 800b8b4:	e000ed88 	.word	0xe000ed88

0800b8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8be:	f3ef 8305 	mrs	r3, IPSR
 800b8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b0f      	cmp	r3, #15
 800b8c8:	d914      	bls.n	800b8f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8ca:	4a17      	ldr	r2, [pc, #92]	; (800b928 <vPortValidateInterruptPriority+0x70>)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8d4:	4b15      	ldr	r3, [pc, #84]	; (800b92c <vPortValidateInterruptPriority+0x74>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	7afa      	ldrb	r2, [r7, #11]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d20a      	bcs.n	800b8f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	607b      	str	r3, [r7, #4]
}
 800b8f0:	bf00      	nop
 800b8f2:	e7fe      	b.n	800b8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8f4:	4b0e      	ldr	r3, [pc, #56]	; (800b930 <vPortValidateInterruptPriority+0x78>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8fc:	4b0d      	ldr	r3, [pc, #52]	; (800b934 <vPortValidateInterruptPriority+0x7c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	429a      	cmp	r2, r3
 800b902:	d90a      	bls.n	800b91a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	603b      	str	r3, [r7, #0]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <vPortValidateInterruptPriority+0x60>
	}
 800b91a:	bf00      	nop
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	e000e3f0 	.word	0xe000e3f0
 800b92c:	20001334 	.word	0x20001334
 800b930:	e000ed0c 	.word	0xe000ed0c
 800b934:	20001338 	.word	0x20001338

0800b938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b08a      	sub	sp, #40	; 0x28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b940:	2300      	movs	r3, #0
 800b942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b944:	f7fe fd9c 	bl	800a480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b948:	4b5b      	ldr	r3, [pc, #364]	; (800bab8 <pvPortMalloc+0x180>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d101      	bne.n	800b954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b950:	f000 f920 	bl	800bb94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b954:	4b59      	ldr	r3, [pc, #356]	; (800babc <pvPortMalloc+0x184>)
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4013      	ands	r3, r2
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f040 8093 	bne.w	800ba88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d01d      	beq.n	800b9a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b968:	2208      	movs	r2, #8
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f003 0307 	and.w	r3, r3, #7
 800b976:	2b00      	cmp	r3, #0
 800b978:	d014      	beq.n	800b9a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f023 0307 	bic.w	r3, r3, #7
 800b980:	3308      	adds	r3, #8
 800b982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f003 0307 	and.w	r3, r3, #7
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00a      	beq.n	800b9a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	617b      	str	r3, [r7, #20]
}
 800b9a0:	bf00      	nop
 800b9a2:	e7fe      	b.n	800b9a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d06e      	beq.n	800ba88 <pvPortMalloc+0x150>
 800b9aa:	4b45      	ldr	r3, [pc, #276]	; (800bac0 <pvPortMalloc+0x188>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d869      	bhi.n	800ba88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9b4:	4b43      	ldr	r3, [pc, #268]	; (800bac4 <pvPortMalloc+0x18c>)
 800b9b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9b8:	4b42      	ldr	r3, [pc, #264]	; (800bac4 <pvPortMalloc+0x18c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9be:	e004      	b.n	800b9ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d903      	bls.n	800b9dc <pvPortMalloc+0xa4>
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1f1      	bne.n	800b9c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9dc:	4b36      	ldr	r3, [pc, #216]	; (800bab8 <pvPortMalloc+0x180>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d050      	beq.n	800ba88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2208      	movs	r2, #8
 800b9ec:	4413      	add	r3, r2
 800b9ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	1ad2      	subs	r2, r2, r3
 800ba00:	2308      	movs	r3, #8
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d91f      	bls.n	800ba48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00a      	beq.n	800ba30 <pvPortMalloc+0xf8>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	613b      	str	r3, [r7, #16]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	1ad2      	subs	r2, r2, r3
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba42:	69b8      	ldr	r0, [r7, #24]
 800ba44:	f000 f908 	bl	800bc58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba48:	4b1d      	ldr	r3, [pc, #116]	; (800bac0 <pvPortMalloc+0x188>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	4a1b      	ldr	r2, [pc, #108]	; (800bac0 <pvPortMalloc+0x188>)
 800ba54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba56:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <pvPortMalloc+0x188>)
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	4b1b      	ldr	r3, [pc, #108]	; (800bac8 <pvPortMalloc+0x190>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d203      	bcs.n	800ba6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba62:	4b17      	ldr	r3, [pc, #92]	; (800bac0 <pvPortMalloc+0x188>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a18      	ldr	r2, [pc, #96]	; (800bac8 <pvPortMalloc+0x190>)
 800ba68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	4b13      	ldr	r3, [pc, #76]	; (800babc <pvPortMalloc+0x184>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	431a      	orrs	r2, r3
 800ba74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba7e:	4b13      	ldr	r3, [pc, #76]	; (800bacc <pvPortMalloc+0x194>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3301      	adds	r3, #1
 800ba84:	4a11      	ldr	r2, [pc, #68]	; (800bacc <pvPortMalloc+0x194>)
 800ba86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba88:	f7fe fd08 	bl	800a49c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	f003 0307 	and.w	r3, r3, #7
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00a      	beq.n	800baac <pvPortMalloc+0x174>
	__asm volatile
 800ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	60fb      	str	r3, [r7, #12]
}
 800baa8:	bf00      	nop
 800baaa:	e7fe      	b.n	800baaa <pvPortMalloc+0x172>
	return pvReturn;
 800baac:	69fb      	ldr	r3, [r7, #28]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3728      	adds	r7, #40	; 0x28
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	20004f44 	.word	0x20004f44
 800babc:	20004f58 	.word	0x20004f58
 800bac0:	20004f48 	.word	0x20004f48
 800bac4:	20004f3c 	.word	0x20004f3c
 800bac8:	20004f4c 	.word	0x20004f4c
 800bacc:	20004f50 	.word	0x20004f50

0800bad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d04d      	beq.n	800bb7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bae2:	2308      	movs	r3, #8
 800bae4:	425b      	negs	r3, r3
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	4413      	add	r3, r2
 800baea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	4b24      	ldr	r3, [pc, #144]	; (800bb88 <vPortFree+0xb8>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4013      	ands	r3, r2
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10a      	bne.n	800bb14 <vPortFree+0x44>
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	60fb      	str	r3, [r7, #12]
}
 800bb10:	bf00      	nop
 800bb12:	e7fe      	b.n	800bb12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00a      	beq.n	800bb32 <vPortFree+0x62>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	60bb      	str	r3, [r7, #8]
}
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	4b14      	ldr	r3, [pc, #80]	; (800bb88 <vPortFree+0xb8>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4013      	ands	r3, r2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01e      	beq.n	800bb7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d11a      	bne.n	800bb7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	4b0e      	ldr	r3, [pc, #56]	; (800bb88 <vPortFree+0xb8>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	43db      	mvns	r3, r3
 800bb52:	401a      	ands	r2, r3
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb58:	f7fe fc92 	bl	800a480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <vPortFree+0xbc>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4413      	add	r3, r2
 800bb66:	4a09      	ldr	r2, [pc, #36]	; (800bb8c <vPortFree+0xbc>)
 800bb68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb6a:	6938      	ldr	r0, [r7, #16]
 800bb6c:	f000 f874 	bl	800bc58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb70:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <vPortFree+0xc0>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3301      	adds	r3, #1
 800bb76:	4a06      	ldr	r2, [pc, #24]	; (800bb90 <vPortFree+0xc0>)
 800bb78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb7a:	f7fe fc8f 	bl	800a49c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb7e:	bf00      	nop
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	20004f58 	.word	0x20004f58
 800bb8c:	20004f48 	.word	0x20004f48
 800bb90:	20004f54 	.word	0x20004f54

0800bb94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bba0:	4b27      	ldr	r3, [pc, #156]	; (800bc40 <prvHeapInit+0xac>)
 800bba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f003 0307 	and.w	r3, r3, #7
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00c      	beq.n	800bbc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3307      	adds	r3, #7
 800bbb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f023 0307 	bic.w	r3, r3, #7
 800bbba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	4a1f      	ldr	r2, [pc, #124]	; (800bc40 <prvHeapInit+0xac>)
 800bbc4:	4413      	add	r3, r2
 800bbc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbcc:	4a1d      	ldr	r2, [pc, #116]	; (800bc44 <prvHeapInit+0xb0>)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbd2:	4b1c      	ldr	r3, [pc, #112]	; (800bc44 <prvHeapInit+0xb0>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	4413      	add	r3, r2
 800bbde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbe0:	2208      	movs	r2, #8
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	1a9b      	subs	r3, r3, r2
 800bbe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f023 0307 	bic.w	r3, r3, #7
 800bbee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4a15      	ldr	r2, [pc, #84]	; (800bc48 <prvHeapInit+0xb4>)
 800bbf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbf6:	4b14      	ldr	r3, [pc, #80]	; (800bc48 <prvHeapInit+0xb4>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbfe:	4b12      	ldr	r3, [pc, #72]	; (800bc48 <prvHeapInit+0xb4>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc14:	4b0c      	ldr	r3, [pc, #48]	; (800bc48 <prvHeapInit+0xb4>)
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	4a0a      	ldr	r2, [pc, #40]	; (800bc4c <prvHeapInit+0xb8>)
 800bc22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	4a09      	ldr	r2, [pc, #36]	; (800bc50 <prvHeapInit+0xbc>)
 800bc2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc2c:	4b09      	ldr	r3, [pc, #36]	; (800bc54 <prvHeapInit+0xc0>)
 800bc2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc32:	601a      	str	r2, [r3, #0]
}
 800bc34:	bf00      	nop
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	2000133c 	.word	0x2000133c
 800bc44:	20004f3c 	.word	0x20004f3c
 800bc48:	20004f44 	.word	0x20004f44
 800bc4c:	20004f4c 	.word	0x20004f4c
 800bc50:	20004f48 	.word	0x20004f48
 800bc54:	20004f58 	.word	0x20004f58

0800bc58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc60:	4b28      	ldr	r3, [pc, #160]	; (800bd04 <prvInsertBlockIntoFreeList+0xac>)
 800bc62:	60fb      	str	r3, [r7, #12]
 800bc64:	e002      	b.n	800bc6c <prvInsertBlockIntoFreeList+0x14>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d8f7      	bhi.n	800bc66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	4413      	add	r3, r2
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d108      	bne.n	800bc9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	441a      	add	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	441a      	add	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d118      	bne.n	800bce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	4b15      	ldr	r3, [pc, #84]	; (800bd08 <prvInsertBlockIntoFreeList+0xb0>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d00d      	beq.n	800bcd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	685a      	ldr	r2, [r3, #4]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	441a      	add	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	e008      	b.n	800bce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcd6:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <prvInsertBlockIntoFreeList+0xb0>)
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e003      	b.n	800bce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d002      	beq.n	800bcf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcf6:	bf00      	nop
 800bcf8:	3714      	adds	r7, #20
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	20004f3c 	.word	0x20004f3c
 800bd08:	20004f44 	.word	0x20004f44

0800bd0c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800bd12:	2300      	movs	r3, #0
 800bd14:	71fb      	strb	r3, [r7, #7]
 800bd16:	e026      	b.n	800bd66 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800bd18:	79fb      	ldrb	r3, [r7, #7]
 800bd1a:	3b50      	subs	r3, #80	; 0x50
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2100      	movs	r1, #0
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 f82b 	bl	800bd7c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800bd26:	2100      	movs	r1, #0
 800bd28:	2000      	movs	r0, #0
 800bd2a:	f000 f827 	bl	800bd7c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800bd2e:	2100      	movs	r1, #0
 800bd30:	2010      	movs	r0, #16
 800bd32:	f000 f823 	bl	800bd7c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800bd36:	2300      	movs	r3, #0
 800bd38:	71bb      	strb	r3, [r7, #6]
 800bd3a:	e00d      	b.n	800bd58 <OLED_Refresh_Gram+0x4c>
 800bd3c:	79ba      	ldrb	r2, [r7, #6]
 800bd3e:	79fb      	ldrb	r3, [r7, #7]
 800bd40:	490d      	ldr	r1, [pc, #52]	; (800bd78 <OLED_Refresh_Gram+0x6c>)
 800bd42:	00d2      	lsls	r2, r2, #3
 800bd44:	440a      	add	r2, r1
 800bd46:	4413      	add	r3, r2
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	2101      	movs	r1, #1
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 f815 	bl	800bd7c <OLED_WR_Byte>
 800bd52:	79bb      	ldrb	r3, [r7, #6]
 800bd54:	3301      	adds	r3, #1
 800bd56:	71bb      	strb	r3, [r7, #6]
 800bd58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	daed      	bge.n	800bd3c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800bd60:	79fb      	ldrb	r3, [r7, #7]
 800bd62:	3301      	adds	r3, #1
 800bd64:	71fb      	strb	r3, [r7, #7]
 800bd66:	79fb      	ldrb	r3, [r7, #7]
 800bd68:	2b07      	cmp	r3, #7
 800bd6a:	d9d5      	bls.n	800bd18 <OLED_Refresh_Gram+0xc>
	}   
}
 800bd6c:	bf00      	nop
 800bd6e:	bf00      	nop
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20004f5c 	.word	0x20004f5c

0800bd7c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	460a      	mov	r2, r1
 800bd86:	71fb      	strb	r3, [r7, #7]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800bd8c:	79bb      	ldrb	r3, [r7, #6]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d006      	beq.n	800bda0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800bd92:	2201      	movs	r2, #1
 800bd94:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd98:	481c      	ldr	r0, [pc, #112]	; (800be0c <OLED_WR_Byte+0x90>)
 800bd9a:	f7f8 ff6d 	bl	8004c78 <HAL_GPIO_WritePin>
 800bd9e:	e005      	b.n	800bdac <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800bda0:	2200      	movs	r2, #0
 800bda2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bda6:	4819      	ldr	r0, [pc, #100]	; (800be0c <OLED_WR_Byte+0x90>)
 800bda8:	f7f8 ff66 	bl	8004c78 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800bdac:	2300      	movs	r3, #0
 800bdae:	73fb      	strb	r3, [r7, #15]
 800bdb0:	e01e      	b.n	800bdf0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2120      	movs	r1, #32
 800bdb6:	4815      	ldr	r0, [pc, #84]	; (800be0c <OLED_WR_Byte+0x90>)
 800bdb8:	f7f8 ff5e 	bl	8004c78 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800bdbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	da05      	bge.n	800bdd0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	2140      	movs	r1, #64	; 0x40
 800bdc8:	4810      	ldr	r0, [pc, #64]	; (800be0c <OLED_WR_Byte+0x90>)
 800bdca:	f7f8 ff55 	bl	8004c78 <HAL_GPIO_WritePin>
 800bdce:	e004      	b.n	800bdda <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2140      	movs	r1, #64	; 0x40
 800bdd4:	480d      	ldr	r0, [pc, #52]	; (800be0c <OLED_WR_Byte+0x90>)
 800bdd6:	f7f8 ff4f 	bl	8004c78 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800bdda:	2201      	movs	r2, #1
 800bddc:	2120      	movs	r1, #32
 800bdde:	480b      	ldr	r0, [pc, #44]	; (800be0c <OLED_WR_Byte+0x90>)
 800bde0:	f7f8 ff4a 	bl	8004c78 <HAL_GPIO_WritePin>
		dat<<=1;   
 800bde4:	79fb      	ldrb	r3, [r7, #7]
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	3301      	adds	r3, #1
 800bdee:	73fb      	strb	r3, [r7, #15]
 800bdf0:	7bfb      	ldrb	r3, [r7, #15]
 800bdf2:	2b07      	cmp	r3, #7
 800bdf4:	d9dd      	bls.n	800bdb2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bdfc:	4803      	ldr	r0, [pc, #12]	; (800be0c <OLED_WR_Byte+0x90>)
 800bdfe:	f7f8 ff3b 	bl	8004c78 <HAL_GPIO_WritePin>
} 
 800be02:	bf00      	nop
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	40021000 	.word	0x40021000

0800be10 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800be16:	2300      	movs	r3, #0
 800be18:	71fb      	strb	r3, [r7, #7]
 800be1a:	e014      	b.n	800be46 <OLED_Clear+0x36>
 800be1c:	2300      	movs	r3, #0
 800be1e:	71bb      	strb	r3, [r7, #6]
 800be20:	e00a      	b.n	800be38 <OLED_Clear+0x28>
 800be22:	79ba      	ldrb	r2, [r7, #6]
 800be24:	79fb      	ldrb	r3, [r7, #7]
 800be26:	490c      	ldr	r1, [pc, #48]	; (800be58 <OLED_Clear+0x48>)
 800be28:	00d2      	lsls	r2, r2, #3
 800be2a:	440a      	add	r2, r1
 800be2c:	4413      	add	r3, r2
 800be2e:	2200      	movs	r2, #0
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	79bb      	ldrb	r3, [r7, #6]
 800be34:	3301      	adds	r3, #1
 800be36:	71bb      	strb	r3, [r7, #6]
 800be38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	daf0      	bge.n	800be22 <OLED_Clear+0x12>
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	3301      	adds	r3, #1
 800be44:	71fb      	strb	r3, [r7, #7]
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	2b07      	cmp	r3, #7
 800be4a:	d9e7      	bls.n	800be1c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800be4c:	f7ff ff5e 	bl	800bd0c <OLED_Refresh_Gram>
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	20004f5c 	.word	0x20004f5c

0800be5c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	71fb      	strb	r3, [r7, #7]
 800be66:	460b      	mov	r3, r1
 800be68:	71bb      	strb	r3, [r7, #6]
 800be6a:	4613      	mov	r3, r2
 800be6c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800be6e:	2300      	movs	r3, #0
 800be70:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800be72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be76:	2b00      	cmp	r3, #0
 800be78:	db41      	blt.n	800befe <OLED_DrawPoint+0xa2>
 800be7a:	79bb      	ldrb	r3, [r7, #6]
 800be7c:	2b3f      	cmp	r3, #63	; 0x3f
 800be7e:	d83e      	bhi.n	800befe <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800be80:	79bb      	ldrb	r3, [r7, #6]
 800be82:	08db      	lsrs	r3, r3, #3
 800be84:	b2db      	uxtb	r3, r3
 800be86:	f1c3 0307 	rsb	r3, r3, #7
 800be8a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800be8c:	79bb      	ldrb	r3, [r7, #6]
 800be8e:	f003 0307 	and.w	r3, r3, #7
 800be92:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800be94:	7b7b      	ldrb	r3, [r7, #13]
 800be96:	f1c3 0307 	rsb	r3, r3, #7
 800be9a:	2201      	movs	r2, #1
 800be9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bea0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800bea2:	797b      	ldrb	r3, [r7, #5]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d012      	beq.n	800bece <OLED_DrawPoint+0x72>
 800bea8:	79fa      	ldrb	r2, [r7, #7]
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	4917      	ldr	r1, [pc, #92]	; (800bf0c <OLED_DrawPoint+0xb0>)
 800beae:	00d2      	lsls	r2, r2, #3
 800beb0:	440a      	add	r2, r1
 800beb2:	4413      	add	r3, r2
 800beb4:	7818      	ldrb	r0, [r3, #0]
 800beb6:	79fa      	ldrb	r2, [r7, #7]
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
 800beba:	7bf9      	ldrb	r1, [r7, #15]
 800bebc:	4301      	orrs	r1, r0
 800bebe:	b2c8      	uxtb	r0, r1
 800bec0:	4912      	ldr	r1, [pc, #72]	; (800bf0c <OLED_DrawPoint+0xb0>)
 800bec2:	00d2      	lsls	r2, r2, #3
 800bec4:	440a      	add	r2, r1
 800bec6:	4413      	add	r3, r2
 800bec8:	4602      	mov	r2, r0
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	e018      	b.n	800bf00 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800bece:	79fa      	ldrb	r2, [r7, #7]
 800bed0:	7bbb      	ldrb	r3, [r7, #14]
 800bed2:	490e      	ldr	r1, [pc, #56]	; (800bf0c <OLED_DrawPoint+0xb0>)
 800bed4:	00d2      	lsls	r2, r2, #3
 800bed6:	440a      	add	r2, r1
 800bed8:	4413      	add	r3, r2
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	b25a      	sxtb	r2, r3
 800bede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bee2:	43db      	mvns	r3, r3
 800bee4:	b25b      	sxtb	r3, r3
 800bee6:	4013      	ands	r3, r2
 800bee8:	b259      	sxtb	r1, r3
 800beea:	79fa      	ldrb	r2, [r7, #7]
 800beec:	7bbb      	ldrb	r3, [r7, #14]
 800beee:	b2c8      	uxtb	r0, r1
 800bef0:	4906      	ldr	r1, [pc, #24]	; (800bf0c <OLED_DrawPoint+0xb0>)
 800bef2:	00d2      	lsls	r2, r2, #3
 800bef4:	440a      	add	r2, r1
 800bef6:	4413      	add	r3, r2
 800bef8:	4602      	mov	r2, r0
 800befa:	701a      	strb	r2, [r3, #0]
 800befc:	e000      	b.n	800bf00 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800befe:	bf00      	nop
}
 800bf00:	3714      	adds	r7, #20
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	20004f5c 	.word	0x20004f5c

0800bf10 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800bf10:	b590      	push	{r4, r7, lr}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	4623      	mov	r3, r4
 800bf20:	71fb      	strb	r3, [r7, #7]
 800bf22:	4603      	mov	r3, r0
 800bf24:	71bb      	strb	r3, [r7, #6]
 800bf26:	460b      	mov	r3, r1
 800bf28:	717b      	strb	r3, [r7, #5]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800bf2e:	79bb      	ldrb	r3, [r7, #6]
 800bf30:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800bf32:	797b      	ldrb	r3, [r7, #5]
 800bf34:	3b20      	subs	r3, #32
 800bf36:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	73bb      	strb	r3, [r7, #14]
 800bf3c:	e04d      	b.n	800bfda <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800bf3e:	793b      	ldrb	r3, [r7, #4]
 800bf40:	2b0c      	cmp	r3, #12
 800bf42:	d10b      	bne.n	800bf5c <OLED_ShowChar+0x4c>
 800bf44:	797a      	ldrb	r2, [r7, #5]
 800bf46:	7bb9      	ldrb	r1, [r7, #14]
 800bf48:	4828      	ldr	r0, [pc, #160]	; (800bfec <OLED_ShowChar+0xdc>)
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	005b      	lsls	r3, r3, #1
 800bf4e:	4413      	add	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4403      	add	r3, r0
 800bf54:	440b      	add	r3, r1
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	73fb      	strb	r3, [r7, #15]
 800bf5a:	e007      	b.n	800bf6c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800bf5c:	797a      	ldrb	r2, [r7, #5]
 800bf5e:	7bbb      	ldrb	r3, [r7, #14]
 800bf60:	4923      	ldr	r1, [pc, #140]	; (800bff0 <OLED_ShowChar+0xe0>)
 800bf62:	0112      	lsls	r2, r2, #4
 800bf64:	440a      	add	r2, r1
 800bf66:	4413      	add	r3, r2
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	737b      	strb	r3, [r7, #13]
 800bf70:	e02d      	b.n	800bfce <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800bf72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	da07      	bge.n	800bf8a <OLED_ShowChar+0x7a>
 800bf7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bf7e:	79b9      	ldrb	r1, [r7, #6]
 800bf80:	79fb      	ldrb	r3, [r7, #7]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff ff6a 	bl	800be5c <OLED_DrawPoint>
 800bf88:	e00c      	b.n	800bfa4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800bf8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	bf0c      	ite	eq
 800bf92:	2301      	moveq	r3, #1
 800bf94:	2300      	movne	r3, #0
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	461a      	mov	r2, r3
 800bf9a:	79b9      	ldrb	r1, [r7, #6]
 800bf9c:	79fb      	ldrb	r3, [r7, #7]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff ff5c 	bl	800be5c <OLED_DrawPoint>
			temp<<=1;
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	73fb      	strb	r3, [r7, #15]
			y++;
 800bfaa:	79bb      	ldrb	r3, [r7, #6]
 800bfac:	3301      	adds	r3, #1
 800bfae:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800bfb0:	79ba      	ldrb	r2, [r7, #6]
 800bfb2:	7b3b      	ldrb	r3, [r7, #12]
 800bfb4:	1ad2      	subs	r2, r2, r3
 800bfb6:	793b      	ldrb	r3, [r7, #4]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d105      	bne.n	800bfc8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800bfbc:	7b3b      	ldrb	r3, [r7, #12]
 800bfbe:	71bb      	strb	r3, [r7, #6]
				x++;
 800bfc0:	79fb      	ldrb	r3, [r7, #7]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	71fb      	strb	r3, [r7, #7]
				break;
 800bfc6:	e005      	b.n	800bfd4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800bfc8:	7b7b      	ldrb	r3, [r7, #13]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	737b      	strb	r3, [r7, #13]
 800bfce:	7b7b      	ldrb	r3, [r7, #13]
 800bfd0:	2b07      	cmp	r3, #7
 800bfd2:	d9ce      	bls.n	800bf72 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	73bb      	strb	r3, [r7, #14]
 800bfda:	7bba      	ldrb	r2, [r7, #14]
 800bfdc:	793b      	ldrb	r3, [r7, #4]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d3ad      	bcc.n	800bf3e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800bfe2:	bf00      	nop
 800bfe4:	bf00      	nop
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd90      	pop	{r4, r7, pc}
 800bfec:	0800f560 	.word	0x0800f560
 800bff0:	0800f9d4 	.word	0x0800f9d4

0800bff4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af02      	add	r7, sp, #8
 800bffa:	4603      	mov	r3, r0
 800bffc:	603a      	str	r2, [r7, #0]
 800bffe:	71fb      	strb	r3, [r7, #7]
 800c000:	460b      	mov	r3, r1
 800c002:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800c004:	e01f      	b.n	800c046 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	2b7a      	cmp	r3, #122	; 0x7a
 800c00a:	d904      	bls.n	800c016 <OLED_ShowString+0x22>
 800c00c:	2300      	movs	r3, #0
 800c00e:	71fb      	strb	r3, [r7, #7]
 800c010:	79bb      	ldrb	r3, [r7, #6]
 800c012:	3310      	adds	r3, #16
 800c014:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800c016:	79bb      	ldrb	r3, [r7, #6]
 800c018:	2b3a      	cmp	r3, #58	; 0x3a
 800c01a:	d905      	bls.n	800c028 <OLED_ShowString+0x34>
 800c01c:	2300      	movs	r3, #0
 800c01e:	71fb      	strb	r3, [r7, #7]
 800c020:	79fb      	ldrb	r3, [r7, #7]
 800c022:	71bb      	strb	r3, [r7, #6]
 800c024:	f7ff fef4 	bl	800be10 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	781a      	ldrb	r2, [r3, #0]
 800c02c:	79b9      	ldrb	r1, [r7, #6]
 800c02e:	79f8      	ldrb	r0, [r7, #7]
 800c030:	2301      	movs	r3, #1
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	230c      	movs	r3, #12
 800c036:	f7ff ff6b 	bl	800bf10 <OLED_ShowChar>
        x+=8;
 800c03a:	79fb      	ldrb	r3, [r7, #7]
 800c03c:	3308      	adds	r3, #8
 800c03e:	71fb      	strb	r3, [r7, #7]
        p++;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	3301      	adds	r3, #1
 800c044:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1db      	bne.n	800c006 <OLED_ShowString+0x12>
    }  
}	 
 800c04e:	bf00      	nop
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <OLED_Init>:

void OLED_Init(void)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800c05c:	f7f9 fdbc 	bl	8005bd8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800c060:	4b41      	ldr	r3, [pc, #260]	; (800c168 <OLED_Init+0x110>)
 800c062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c064:	4a40      	ldr	r2, [pc, #256]	; (800c168 <OLED_Init+0x110>)
 800c066:	f023 0301 	bic.w	r3, r3, #1
 800c06a:	6713      	str	r3, [r2, #112]	; 0x70
 800c06c:	4b3e      	ldr	r3, [pc, #248]	; (800c168 <OLED_Init+0x110>)
 800c06e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c070:	4a3d      	ldr	r2, [pc, #244]	; (800c168 <OLED_Init+0x110>)
 800c072:	f023 0304 	bic.w	r3, r3, #4
 800c076:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800c078:	f7f9 fdc2 	bl	8005c00 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800c07c:	2200      	movs	r2, #0
 800c07e:	2180      	movs	r1, #128	; 0x80
 800c080:	483a      	ldr	r0, [pc, #232]	; (800c16c <OLED_Init+0x114>)
 800c082:	f7f8 fdf9 	bl	8004c78 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800c086:	2064      	movs	r0, #100	; 0x64
 800c088:	f7f7 fbd8 	bl	800383c <HAL_Delay>
	OLED_RST_Set();
 800c08c:	2201      	movs	r2, #1
 800c08e:	2180      	movs	r1, #128	; 0x80
 800c090:	4836      	ldr	r0, [pc, #216]	; (800c16c <OLED_Init+0x114>)
 800c092:	f7f8 fdf1 	bl	8004c78 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800c096:	2100      	movs	r1, #0
 800c098:	20ae      	movs	r0, #174	; 0xae
 800c09a:	f7ff fe6f 	bl	800bd7c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800c09e:	2100      	movs	r1, #0
 800c0a0:	20d5      	movs	r0, #213	; 0xd5
 800c0a2:	f7ff fe6b 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	2050      	movs	r0, #80	; 0x50
 800c0aa:	f7ff fe67 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	20a8      	movs	r0, #168	; 0xa8
 800c0b2:	f7ff fe63 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	203f      	movs	r0, #63	; 0x3f
 800c0ba:	f7ff fe5f 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800c0be:	2100      	movs	r1, #0
 800c0c0:	20d3      	movs	r0, #211	; 0xd3
 800c0c2:	f7ff fe5b 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	f7ff fe57 	bl	800bd7c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	2040      	movs	r0, #64	; 0x40
 800c0d2:	f7ff fe53 	bl	800bd7c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	208d      	movs	r0, #141	; 0x8d
 800c0da:	f7ff fe4f 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800c0de:	2100      	movs	r1, #0
 800c0e0:	2014      	movs	r0, #20
 800c0e2:	f7ff fe4b 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	2020      	movs	r0, #32
 800c0ea:	f7ff fe47 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	2002      	movs	r0, #2
 800c0f2:	f7ff fe43 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	20a1      	movs	r0, #161	; 0xa1
 800c0fa:	f7ff fe3f 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800c0fe:	2100      	movs	r1, #0
 800c100:	20c0      	movs	r0, #192	; 0xc0
 800c102:	f7ff fe3b 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800c106:	2100      	movs	r1, #0
 800c108:	20da      	movs	r0, #218	; 0xda
 800c10a:	f7ff fe37 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800c10e:	2100      	movs	r1, #0
 800c110:	2012      	movs	r0, #18
 800c112:	f7ff fe33 	bl	800bd7c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800c116:	2100      	movs	r1, #0
 800c118:	2081      	movs	r0, #129	; 0x81
 800c11a:	f7ff fe2f 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800c11e:	2100      	movs	r1, #0
 800c120:	20ef      	movs	r0, #239	; 0xef
 800c122:	f7ff fe2b 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800c126:	2100      	movs	r1, #0
 800c128:	20d9      	movs	r0, #217	; 0xd9
 800c12a:	f7ff fe27 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800c12e:	2100      	movs	r1, #0
 800c130:	20f1      	movs	r0, #241	; 0xf1
 800c132:	f7ff fe23 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800c136:	2100      	movs	r1, #0
 800c138:	20db      	movs	r0, #219	; 0xdb
 800c13a:	f7ff fe1f 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800c13e:	2100      	movs	r1, #0
 800c140:	2030      	movs	r0, #48	; 0x30
 800c142:	f7ff fe1b 	bl	800bd7c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800c146:	2100      	movs	r1, #0
 800c148:	20a4      	movs	r0, #164	; 0xa4
 800c14a:	f7ff fe17 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800c14e:	2100      	movs	r1, #0
 800c150:	20a6      	movs	r0, #166	; 0xa6
 800c152:	f7ff fe13 	bl	800bd7c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800c156:	2100      	movs	r1, #0
 800c158:	20af      	movs	r0, #175	; 0xaf
 800c15a:	f7ff fe0f 	bl	800bd7c <OLED_WR_Byte>
	OLED_Clear(); 
 800c15e:	f7ff fe57 	bl	800be10 <OLED_Clear>
 800c162:	bf00      	nop
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	40023800 	.word	0x40023800
 800c16c:	40021000 	.word	0x40021000

0800c170 <__errno>:
 800c170:	4b01      	ldr	r3, [pc, #4]	; (800c178 <__errno+0x8>)
 800c172:	6818      	ldr	r0, [r3, #0]
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	20000020 	.word	0x20000020

0800c17c <__libc_init_array>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	4d0d      	ldr	r5, [pc, #52]	; (800c1b4 <__libc_init_array+0x38>)
 800c180:	4c0d      	ldr	r4, [pc, #52]	; (800c1b8 <__libc_init_array+0x3c>)
 800c182:	1b64      	subs	r4, r4, r5
 800c184:	10a4      	asrs	r4, r4, #2
 800c186:	2600      	movs	r6, #0
 800c188:	42a6      	cmp	r6, r4
 800c18a:	d109      	bne.n	800c1a0 <__libc_init_array+0x24>
 800c18c:	4d0b      	ldr	r5, [pc, #44]	; (800c1bc <__libc_init_array+0x40>)
 800c18e:	4c0c      	ldr	r4, [pc, #48]	; (800c1c0 <__libc_init_array+0x44>)
 800c190:	f003 f92e 	bl	800f3f0 <_init>
 800c194:	1b64      	subs	r4, r4, r5
 800c196:	10a4      	asrs	r4, r4, #2
 800c198:	2600      	movs	r6, #0
 800c19a:	42a6      	cmp	r6, r4
 800c19c:	d105      	bne.n	800c1aa <__libc_init_array+0x2e>
 800c19e:	bd70      	pop	{r4, r5, r6, pc}
 800c1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1a4:	4798      	blx	r3
 800c1a6:	3601      	adds	r6, #1
 800c1a8:	e7ee      	b.n	800c188 <__libc_init_array+0xc>
 800c1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ae:	4798      	blx	r3
 800c1b0:	3601      	adds	r6, #1
 800c1b2:	e7f2      	b.n	800c19a <__libc_init_array+0x1e>
 800c1b4:	080103a4 	.word	0x080103a4
 800c1b8:	080103a4 	.word	0x080103a4
 800c1bc:	080103a4 	.word	0x080103a4
 800c1c0:	080103a8 	.word	0x080103a8

0800c1c4 <memcpy>:
 800c1c4:	440a      	add	r2, r1
 800c1c6:	4291      	cmp	r1, r2
 800c1c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1cc:	d100      	bne.n	800c1d0 <memcpy+0xc>
 800c1ce:	4770      	bx	lr
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1da:	4291      	cmp	r1, r2
 800c1dc:	d1f9      	bne.n	800c1d2 <memcpy+0xe>
 800c1de:	bd10      	pop	{r4, pc}

0800c1e0 <memset>:
 800c1e0:	4402      	add	r2, r0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d100      	bne.n	800c1ea <memset+0xa>
 800c1e8:	4770      	bx	lr
 800c1ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ee:	e7f9      	b.n	800c1e4 <memset+0x4>

0800c1f0 <__cvt>:
 800c1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f4:	ec55 4b10 	vmov	r4, r5, d0
 800c1f8:	2d00      	cmp	r5, #0
 800c1fa:	460e      	mov	r6, r1
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	462b      	mov	r3, r5
 800c200:	bfbb      	ittet	lt
 800c202:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c206:	461d      	movlt	r5, r3
 800c208:	2300      	movge	r3, #0
 800c20a:	232d      	movlt	r3, #45	; 0x2d
 800c20c:	700b      	strb	r3, [r1, #0]
 800c20e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c210:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c214:	4691      	mov	r9, r2
 800c216:	f023 0820 	bic.w	r8, r3, #32
 800c21a:	bfbc      	itt	lt
 800c21c:	4622      	movlt	r2, r4
 800c21e:	4614      	movlt	r4, r2
 800c220:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c224:	d005      	beq.n	800c232 <__cvt+0x42>
 800c226:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c22a:	d100      	bne.n	800c22e <__cvt+0x3e>
 800c22c:	3601      	adds	r6, #1
 800c22e:	2102      	movs	r1, #2
 800c230:	e000      	b.n	800c234 <__cvt+0x44>
 800c232:	2103      	movs	r1, #3
 800c234:	ab03      	add	r3, sp, #12
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	ab02      	add	r3, sp, #8
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	ec45 4b10 	vmov	d0, r4, r5
 800c240:	4653      	mov	r3, sl
 800c242:	4632      	mov	r2, r6
 800c244:	f000 fcec 	bl	800cc20 <_dtoa_r>
 800c248:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c24c:	4607      	mov	r7, r0
 800c24e:	d102      	bne.n	800c256 <__cvt+0x66>
 800c250:	f019 0f01 	tst.w	r9, #1
 800c254:	d022      	beq.n	800c29c <__cvt+0xac>
 800c256:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c25a:	eb07 0906 	add.w	r9, r7, r6
 800c25e:	d110      	bne.n	800c282 <__cvt+0x92>
 800c260:	783b      	ldrb	r3, [r7, #0]
 800c262:	2b30      	cmp	r3, #48	; 0x30
 800c264:	d10a      	bne.n	800c27c <__cvt+0x8c>
 800c266:	2200      	movs	r2, #0
 800c268:	2300      	movs	r3, #0
 800c26a:	4620      	mov	r0, r4
 800c26c:	4629      	mov	r1, r5
 800c26e:	f7f4 fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c272:	b918      	cbnz	r0, 800c27c <__cvt+0x8c>
 800c274:	f1c6 0601 	rsb	r6, r6, #1
 800c278:	f8ca 6000 	str.w	r6, [sl]
 800c27c:	f8da 3000 	ldr.w	r3, [sl]
 800c280:	4499      	add	r9, r3
 800c282:	2200      	movs	r2, #0
 800c284:	2300      	movs	r3, #0
 800c286:	4620      	mov	r0, r4
 800c288:	4629      	mov	r1, r5
 800c28a:	f7f4 fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c28e:	b108      	cbz	r0, 800c294 <__cvt+0xa4>
 800c290:	f8cd 900c 	str.w	r9, [sp, #12]
 800c294:	2230      	movs	r2, #48	; 0x30
 800c296:	9b03      	ldr	r3, [sp, #12]
 800c298:	454b      	cmp	r3, r9
 800c29a:	d307      	bcc.n	800c2ac <__cvt+0xbc>
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2a0:	1bdb      	subs	r3, r3, r7
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	6013      	str	r3, [r2, #0]
 800c2a6:	b004      	add	sp, #16
 800c2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ac:	1c59      	adds	r1, r3, #1
 800c2ae:	9103      	str	r1, [sp, #12]
 800c2b0:	701a      	strb	r2, [r3, #0]
 800c2b2:	e7f0      	b.n	800c296 <__cvt+0xa6>

0800c2b4 <__exponent>:
 800c2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2900      	cmp	r1, #0
 800c2ba:	bfb8      	it	lt
 800c2bc:	4249      	neglt	r1, r1
 800c2be:	f803 2b02 	strb.w	r2, [r3], #2
 800c2c2:	bfb4      	ite	lt
 800c2c4:	222d      	movlt	r2, #45	; 0x2d
 800c2c6:	222b      	movge	r2, #43	; 0x2b
 800c2c8:	2909      	cmp	r1, #9
 800c2ca:	7042      	strb	r2, [r0, #1]
 800c2cc:	dd2a      	ble.n	800c324 <__exponent+0x70>
 800c2ce:	f10d 0407 	add.w	r4, sp, #7
 800c2d2:	46a4      	mov	ip, r4
 800c2d4:	270a      	movs	r7, #10
 800c2d6:	46a6      	mov	lr, r4
 800c2d8:	460a      	mov	r2, r1
 800c2da:	fb91 f6f7 	sdiv	r6, r1, r7
 800c2de:	fb07 1516 	mls	r5, r7, r6, r1
 800c2e2:	3530      	adds	r5, #48	; 0x30
 800c2e4:	2a63      	cmp	r2, #99	; 0x63
 800c2e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	dcf1      	bgt.n	800c2d6 <__exponent+0x22>
 800c2f2:	3130      	adds	r1, #48	; 0x30
 800c2f4:	f1ae 0502 	sub.w	r5, lr, #2
 800c2f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c2fc:	1c44      	adds	r4, r0, #1
 800c2fe:	4629      	mov	r1, r5
 800c300:	4561      	cmp	r1, ip
 800c302:	d30a      	bcc.n	800c31a <__exponent+0x66>
 800c304:	f10d 0209 	add.w	r2, sp, #9
 800c308:	eba2 020e 	sub.w	r2, r2, lr
 800c30c:	4565      	cmp	r5, ip
 800c30e:	bf88      	it	hi
 800c310:	2200      	movhi	r2, #0
 800c312:	4413      	add	r3, r2
 800c314:	1a18      	subs	r0, r3, r0
 800c316:	b003      	add	sp, #12
 800c318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c322:	e7ed      	b.n	800c300 <__exponent+0x4c>
 800c324:	2330      	movs	r3, #48	; 0x30
 800c326:	3130      	adds	r1, #48	; 0x30
 800c328:	7083      	strb	r3, [r0, #2]
 800c32a:	70c1      	strb	r1, [r0, #3]
 800c32c:	1d03      	adds	r3, r0, #4
 800c32e:	e7f1      	b.n	800c314 <__exponent+0x60>

0800c330 <_printf_float>:
 800c330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c334:	ed2d 8b02 	vpush	{d8}
 800c338:	b08d      	sub	sp, #52	; 0x34
 800c33a:	460c      	mov	r4, r1
 800c33c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c340:	4616      	mov	r6, r2
 800c342:	461f      	mov	r7, r3
 800c344:	4605      	mov	r5, r0
 800c346:	f001 fa59 	bl	800d7fc <_localeconv_r>
 800c34a:	f8d0 a000 	ldr.w	sl, [r0]
 800c34e:	4650      	mov	r0, sl
 800c350:	f7f3 ff3e 	bl	80001d0 <strlen>
 800c354:	2300      	movs	r3, #0
 800c356:	930a      	str	r3, [sp, #40]	; 0x28
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	9305      	str	r3, [sp, #20]
 800c35c:	f8d8 3000 	ldr.w	r3, [r8]
 800c360:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c364:	3307      	adds	r3, #7
 800c366:	f023 0307 	bic.w	r3, r3, #7
 800c36a:	f103 0208 	add.w	r2, r3, #8
 800c36e:	f8c8 2000 	str.w	r2, [r8]
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c37a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c37e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c382:	9307      	str	r3, [sp, #28]
 800c384:	f8cd 8018 	str.w	r8, [sp, #24]
 800c388:	ee08 0a10 	vmov	s16, r0
 800c38c:	4b9f      	ldr	r3, [pc, #636]	; (800c60c <_printf_float+0x2dc>)
 800c38e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c392:	f04f 32ff 	mov.w	r2, #4294967295
 800c396:	f7f4 fbc9 	bl	8000b2c <__aeabi_dcmpun>
 800c39a:	bb88      	cbnz	r0, 800c400 <_printf_float+0xd0>
 800c39c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3a0:	4b9a      	ldr	r3, [pc, #616]	; (800c60c <_printf_float+0x2dc>)
 800c3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a6:	f7f4 fba3 	bl	8000af0 <__aeabi_dcmple>
 800c3aa:	bb48      	cbnz	r0, 800c400 <_printf_float+0xd0>
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	4640      	mov	r0, r8
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	f7f4 fb92 	bl	8000adc <__aeabi_dcmplt>
 800c3b8:	b110      	cbz	r0, 800c3c0 <_printf_float+0x90>
 800c3ba:	232d      	movs	r3, #45	; 0x2d
 800c3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3c0:	4b93      	ldr	r3, [pc, #588]	; (800c610 <_printf_float+0x2e0>)
 800c3c2:	4894      	ldr	r0, [pc, #592]	; (800c614 <_printf_float+0x2e4>)
 800c3c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c3c8:	bf94      	ite	ls
 800c3ca:	4698      	movls	r8, r3
 800c3cc:	4680      	movhi	r8, r0
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	6123      	str	r3, [r4, #16]
 800c3d2:	9b05      	ldr	r3, [sp, #20]
 800c3d4:	f023 0204 	bic.w	r2, r3, #4
 800c3d8:	6022      	str	r2, [r4, #0]
 800c3da:	f04f 0900 	mov.w	r9, #0
 800c3de:	9700      	str	r7, [sp, #0]
 800c3e0:	4633      	mov	r3, r6
 800c3e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f000 f9d8 	bl	800c79c <_printf_common>
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	f040 8090 	bne.w	800c512 <_printf_float+0x1e2>
 800c3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f6:	b00d      	add	sp, #52	; 0x34
 800c3f8:	ecbd 8b02 	vpop	{d8}
 800c3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c400:	4642      	mov	r2, r8
 800c402:	464b      	mov	r3, r9
 800c404:	4640      	mov	r0, r8
 800c406:	4649      	mov	r1, r9
 800c408:	f7f4 fb90 	bl	8000b2c <__aeabi_dcmpun>
 800c40c:	b140      	cbz	r0, 800c420 <_printf_float+0xf0>
 800c40e:	464b      	mov	r3, r9
 800c410:	2b00      	cmp	r3, #0
 800c412:	bfbc      	itt	lt
 800c414:	232d      	movlt	r3, #45	; 0x2d
 800c416:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c41a:	487f      	ldr	r0, [pc, #508]	; (800c618 <_printf_float+0x2e8>)
 800c41c:	4b7f      	ldr	r3, [pc, #508]	; (800c61c <_printf_float+0x2ec>)
 800c41e:	e7d1      	b.n	800c3c4 <_printf_float+0x94>
 800c420:	6863      	ldr	r3, [r4, #4]
 800c422:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c426:	9206      	str	r2, [sp, #24]
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	d13f      	bne.n	800c4ac <_printf_float+0x17c>
 800c42c:	2306      	movs	r3, #6
 800c42e:	6063      	str	r3, [r4, #4]
 800c430:	9b05      	ldr	r3, [sp, #20]
 800c432:	6861      	ldr	r1, [r4, #4]
 800c434:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c438:	2300      	movs	r3, #0
 800c43a:	9303      	str	r3, [sp, #12]
 800c43c:	ab0a      	add	r3, sp, #40	; 0x28
 800c43e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c442:	ab09      	add	r3, sp, #36	; 0x24
 800c444:	ec49 8b10 	vmov	d0, r8, r9
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	6022      	str	r2, [r4, #0]
 800c44c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c450:	4628      	mov	r0, r5
 800c452:	f7ff fecd 	bl	800c1f0 <__cvt>
 800c456:	9b06      	ldr	r3, [sp, #24]
 800c458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c45a:	2b47      	cmp	r3, #71	; 0x47
 800c45c:	4680      	mov	r8, r0
 800c45e:	d108      	bne.n	800c472 <_printf_float+0x142>
 800c460:	1cc8      	adds	r0, r1, #3
 800c462:	db02      	blt.n	800c46a <_printf_float+0x13a>
 800c464:	6863      	ldr	r3, [r4, #4]
 800c466:	4299      	cmp	r1, r3
 800c468:	dd41      	ble.n	800c4ee <_printf_float+0x1be>
 800c46a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c46e:	fa5f fb8b 	uxtb.w	fp, fp
 800c472:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c476:	d820      	bhi.n	800c4ba <_printf_float+0x18a>
 800c478:	3901      	subs	r1, #1
 800c47a:	465a      	mov	r2, fp
 800c47c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c480:	9109      	str	r1, [sp, #36]	; 0x24
 800c482:	f7ff ff17 	bl	800c2b4 <__exponent>
 800c486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c488:	1813      	adds	r3, r2, r0
 800c48a:	2a01      	cmp	r2, #1
 800c48c:	4681      	mov	r9, r0
 800c48e:	6123      	str	r3, [r4, #16]
 800c490:	dc02      	bgt.n	800c498 <_printf_float+0x168>
 800c492:	6822      	ldr	r2, [r4, #0]
 800c494:	07d2      	lsls	r2, r2, #31
 800c496:	d501      	bpl.n	800c49c <_printf_float+0x16c>
 800c498:	3301      	adds	r3, #1
 800c49a:	6123      	str	r3, [r4, #16]
 800c49c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d09c      	beq.n	800c3de <_printf_float+0xae>
 800c4a4:	232d      	movs	r3, #45	; 0x2d
 800c4a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4aa:	e798      	b.n	800c3de <_printf_float+0xae>
 800c4ac:	9a06      	ldr	r2, [sp, #24]
 800c4ae:	2a47      	cmp	r2, #71	; 0x47
 800c4b0:	d1be      	bne.n	800c430 <_printf_float+0x100>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1bc      	bne.n	800c430 <_printf_float+0x100>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e7b9      	b.n	800c42e <_printf_float+0xfe>
 800c4ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c4be:	d118      	bne.n	800c4f2 <_printf_float+0x1c2>
 800c4c0:	2900      	cmp	r1, #0
 800c4c2:	6863      	ldr	r3, [r4, #4]
 800c4c4:	dd0b      	ble.n	800c4de <_printf_float+0x1ae>
 800c4c6:	6121      	str	r1, [r4, #16]
 800c4c8:	b913      	cbnz	r3, 800c4d0 <_printf_float+0x1a0>
 800c4ca:	6822      	ldr	r2, [r4, #0]
 800c4cc:	07d0      	lsls	r0, r2, #31
 800c4ce:	d502      	bpl.n	800c4d6 <_printf_float+0x1a6>
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	440b      	add	r3, r1
 800c4d4:	6123      	str	r3, [r4, #16]
 800c4d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4d8:	f04f 0900 	mov.w	r9, #0
 800c4dc:	e7de      	b.n	800c49c <_printf_float+0x16c>
 800c4de:	b913      	cbnz	r3, 800c4e6 <_printf_float+0x1b6>
 800c4e0:	6822      	ldr	r2, [r4, #0]
 800c4e2:	07d2      	lsls	r2, r2, #31
 800c4e4:	d501      	bpl.n	800c4ea <_printf_float+0x1ba>
 800c4e6:	3302      	adds	r3, #2
 800c4e8:	e7f4      	b.n	800c4d4 <_printf_float+0x1a4>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e7f2      	b.n	800c4d4 <_printf_float+0x1a4>
 800c4ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f4:	4299      	cmp	r1, r3
 800c4f6:	db05      	blt.n	800c504 <_printf_float+0x1d4>
 800c4f8:	6823      	ldr	r3, [r4, #0]
 800c4fa:	6121      	str	r1, [r4, #16]
 800c4fc:	07d8      	lsls	r0, r3, #31
 800c4fe:	d5ea      	bpl.n	800c4d6 <_printf_float+0x1a6>
 800c500:	1c4b      	adds	r3, r1, #1
 800c502:	e7e7      	b.n	800c4d4 <_printf_float+0x1a4>
 800c504:	2900      	cmp	r1, #0
 800c506:	bfd4      	ite	le
 800c508:	f1c1 0202 	rsble	r2, r1, #2
 800c50c:	2201      	movgt	r2, #1
 800c50e:	4413      	add	r3, r2
 800c510:	e7e0      	b.n	800c4d4 <_printf_float+0x1a4>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	055a      	lsls	r2, r3, #21
 800c516:	d407      	bmi.n	800c528 <_printf_float+0x1f8>
 800c518:	6923      	ldr	r3, [r4, #16]
 800c51a:	4642      	mov	r2, r8
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	47b8      	blx	r7
 800c522:	3001      	adds	r0, #1
 800c524:	d12c      	bne.n	800c580 <_printf_float+0x250>
 800c526:	e764      	b.n	800c3f2 <_printf_float+0xc2>
 800c528:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c52c:	f240 80e0 	bls.w	800c6f0 <_printf_float+0x3c0>
 800c530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c534:	2200      	movs	r2, #0
 800c536:	2300      	movs	r3, #0
 800c538:	f7f4 fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d034      	beq.n	800c5aa <_printf_float+0x27a>
 800c540:	4a37      	ldr	r2, [pc, #220]	; (800c620 <_printf_float+0x2f0>)
 800c542:	2301      	movs	r3, #1
 800c544:	4631      	mov	r1, r6
 800c546:	4628      	mov	r0, r5
 800c548:	47b8      	blx	r7
 800c54a:	3001      	adds	r0, #1
 800c54c:	f43f af51 	beq.w	800c3f2 <_printf_float+0xc2>
 800c550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c554:	429a      	cmp	r2, r3
 800c556:	db02      	blt.n	800c55e <_printf_float+0x22e>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	07d8      	lsls	r0, r3, #31
 800c55c:	d510      	bpl.n	800c580 <_printf_float+0x250>
 800c55e:	ee18 3a10 	vmov	r3, s16
 800c562:	4652      	mov	r2, sl
 800c564:	4631      	mov	r1, r6
 800c566:	4628      	mov	r0, r5
 800c568:	47b8      	blx	r7
 800c56a:	3001      	adds	r0, #1
 800c56c:	f43f af41 	beq.w	800c3f2 <_printf_float+0xc2>
 800c570:	f04f 0800 	mov.w	r8, #0
 800c574:	f104 091a 	add.w	r9, r4, #26
 800c578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c57a:	3b01      	subs	r3, #1
 800c57c:	4543      	cmp	r3, r8
 800c57e:	dc09      	bgt.n	800c594 <_printf_float+0x264>
 800c580:	6823      	ldr	r3, [r4, #0]
 800c582:	079b      	lsls	r3, r3, #30
 800c584:	f100 8105 	bmi.w	800c792 <_printf_float+0x462>
 800c588:	68e0      	ldr	r0, [r4, #12]
 800c58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c58c:	4298      	cmp	r0, r3
 800c58e:	bfb8      	it	lt
 800c590:	4618      	movlt	r0, r3
 800c592:	e730      	b.n	800c3f6 <_printf_float+0xc6>
 800c594:	2301      	movs	r3, #1
 800c596:	464a      	mov	r2, r9
 800c598:	4631      	mov	r1, r6
 800c59a:	4628      	mov	r0, r5
 800c59c:	47b8      	blx	r7
 800c59e:	3001      	adds	r0, #1
 800c5a0:	f43f af27 	beq.w	800c3f2 <_printf_float+0xc2>
 800c5a4:	f108 0801 	add.w	r8, r8, #1
 800c5a8:	e7e6      	b.n	800c578 <_printf_float+0x248>
 800c5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dc39      	bgt.n	800c624 <_printf_float+0x2f4>
 800c5b0:	4a1b      	ldr	r2, [pc, #108]	; (800c620 <_printf_float+0x2f0>)
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	4631      	mov	r1, r6
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	47b8      	blx	r7
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	f43f af19 	beq.w	800c3f2 <_printf_float+0xc2>
 800c5c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	d102      	bne.n	800c5ce <_printf_float+0x29e>
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	07d9      	lsls	r1, r3, #31
 800c5cc:	d5d8      	bpl.n	800c580 <_printf_float+0x250>
 800c5ce:	ee18 3a10 	vmov	r3, s16
 800c5d2:	4652      	mov	r2, sl
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	47b8      	blx	r7
 800c5da:	3001      	adds	r0, #1
 800c5dc:	f43f af09 	beq.w	800c3f2 <_printf_float+0xc2>
 800c5e0:	f04f 0900 	mov.w	r9, #0
 800c5e4:	f104 0a1a 	add.w	sl, r4, #26
 800c5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ea:	425b      	negs	r3, r3
 800c5ec:	454b      	cmp	r3, r9
 800c5ee:	dc01      	bgt.n	800c5f4 <_printf_float+0x2c4>
 800c5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f2:	e792      	b.n	800c51a <_printf_float+0x1ea>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	4652      	mov	r2, sl
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	f43f aef7 	beq.w	800c3f2 <_printf_float+0xc2>
 800c604:	f109 0901 	add.w	r9, r9, #1
 800c608:	e7ee      	b.n	800c5e8 <_printf_float+0x2b8>
 800c60a:	bf00      	nop
 800c60c:	7fefffff 	.word	0x7fefffff
 800c610:	0800ffc8 	.word	0x0800ffc8
 800c614:	0800ffcc 	.word	0x0800ffcc
 800c618:	0800ffd4 	.word	0x0800ffd4
 800c61c:	0800ffd0 	.word	0x0800ffd0
 800c620:	0800ffd8 	.word	0x0800ffd8
 800c624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c628:	429a      	cmp	r2, r3
 800c62a:	bfa8      	it	ge
 800c62c:	461a      	movge	r2, r3
 800c62e:	2a00      	cmp	r2, #0
 800c630:	4691      	mov	r9, r2
 800c632:	dc37      	bgt.n	800c6a4 <_printf_float+0x374>
 800c634:	f04f 0b00 	mov.w	fp, #0
 800c638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c63c:	f104 021a 	add.w	r2, r4, #26
 800c640:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c642:	9305      	str	r3, [sp, #20]
 800c644:	eba3 0309 	sub.w	r3, r3, r9
 800c648:	455b      	cmp	r3, fp
 800c64a:	dc33      	bgt.n	800c6b4 <_printf_float+0x384>
 800c64c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c650:	429a      	cmp	r2, r3
 800c652:	db3b      	blt.n	800c6cc <_printf_float+0x39c>
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	07da      	lsls	r2, r3, #31
 800c658:	d438      	bmi.n	800c6cc <_printf_float+0x39c>
 800c65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c65c:	9a05      	ldr	r2, [sp, #20]
 800c65e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c660:	1a9a      	subs	r2, r3, r2
 800c662:	eba3 0901 	sub.w	r9, r3, r1
 800c666:	4591      	cmp	r9, r2
 800c668:	bfa8      	it	ge
 800c66a:	4691      	movge	r9, r2
 800c66c:	f1b9 0f00 	cmp.w	r9, #0
 800c670:	dc35      	bgt.n	800c6de <_printf_float+0x3ae>
 800c672:	f04f 0800 	mov.w	r8, #0
 800c676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c67a:	f104 0a1a 	add.w	sl, r4, #26
 800c67e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	eba3 0309 	sub.w	r3, r3, r9
 800c688:	4543      	cmp	r3, r8
 800c68a:	f77f af79 	ble.w	800c580 <_printf_float+0x250>
 800c68e:	2301      	movs	r3, #1
 800c690:	4652      	mov	r2, sl
 800c692:	4631      	mov	r1, r6
 800c694:	4628      	mov	r0, r5
 800c696:	47b8      	blx	r7
 800c698:	3001      	adds	r0, #1
 800c69a:	f43f aeaa 	beq.w	800c3f2 <_printf_float+0xc2>
 800c69e:	f108 0801 	add.w	r8, r8, #1
 800c6a2:	e7ec      	b.n	800c67e <_printf_float+0x34e>
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4642      	mov	r2, r8
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	47b8      	blx	r7
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	d1c0      	bne.n	800c634 <_printf_float+0x304>
 800c6b2:	e69e      	b.n	800c3f2 <_printf_float+0xc2>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	9205      	str	r2, [sp, #20]
 800c6bc:	47b8      	blx	r7
 800c6be:	3001      	adds	r0, #1
 800c6c0:	f43f ae97 	beq.w	800c3f2 <_printf_float+0xc2>
 800c6c4:	9a05      	ldr	r2, [sp, #20]
 800c6c6:	f10b 0b01 	add.w	fp, fp, #1
 800c6ca:	e7b9      	b.n	800c640 <_printf_float+0x310>
 800c6cc:	ee18 3a10 	vmov	r3, s16
 800c6d0:	4652      	mov	r2, sl
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	d1be      	bne.n	800c65a <_printf_float+0x32a>
 800c6dc:	e689      	b.n	800c3f2 <_printf_float+0xc2>
 800c6de:	9a05      	ldr	r2, [sp, #20]
 800c6e0:	464b      	mov	r3, r9
 800c6e2:	4442      	add	r2, r8
 800c6e4:	4631      	mov	r1, r6
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	47b8      	blx	r7
 800c6ea:	3001      	adds	r0, #1
 800c6ec:	d1c1      	bne.n	800c672 <_printf_float+0x342>
 800c6ee:	e680      	b.n	800c3f2 <_printf_float+0xc2>
 800c6f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6f2:	2a01      	cmp	r2, #1
 800c6f4:	dc01      	bgt.n	800c6fa <_printf_float+0x3ca>
 800c6f6:	07db      	lsls	r3, r3, #31
 800c6f8:	d538      	bpl.n	800c76c <_printf_float+0x43c>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	4642      	mov	r2, r8
 800c6fe:	4631      	mov	r1, r6
 800c700:	4628      	mov	r0, r5
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	f43f ae74 	beq.w	800c3f2 <_printf_float+0xc2>
 800c70a:	ee18 3a10 	vmov	r3, s16
 800c70e:	4652      	mov	r2, sl
 800c710:	4631      	mov	r1, r6
 800c712:	4628      	mov	r0, r5
 800c714:	47b8      	blx	r7
 800c716:	3001      	adds	r0, #1
 800c718:	f43f ae6b 	beq.w	800c3f2 <_printf_float+0xc2>
 800c71c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c720:	2200      	movs	r2, #0
 800c722:	2300      	movs	r3, #0
 800c724:	f7f4 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c728:	b9d8      	cbnz	r0, 800c762 <_printf_float+0x432>
 800c72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c72c:	f108 0201 	add.w	r2, r8, #1
 800c730:	3b01      	subs	r3, #1
 800c732:	4631      	mov	r1, r6
 800c734:	4628      	mov	r0, r5
 800c736:	47b8      	blx	r7
 800c738:	3001      	adds	r0, #1
 800c73a:	d10e      	bne.n	800c75a <_printf_float+0x42a>
 800c73c:	e659      	b.n	800c3f2 <_printf_float+0xc2>
 800c73e:	2301      	movs	r3, #1
 800c740:	4652      	mov	r2, sl
 800c742:	4631      	mov	r1, r6
 800c744:	4628      	mov	r0, r5
 800c746:	47b8      	blx	r7
 800c748:	3001      	adds	r0, #1
 800c74a:	f43f ae52 	beq.w	800c3f2 <_printf_float+0xc2>
 800c74e:	f108 0801 	add.w	r8, r8, #1
 800c752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c754:	3b01      	subs	r3, #1
 800c756:	4543      	cmp	r3, r8
 800c758:	dcf1      	bgt.n	800c73e <_printf_float+0x40e>
 800c75a:	464b      	mov	r3, r9
 800c75c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c760:	e6dc      	b.n	800c51c <_printf_float+0x1ec>
 800c762:	f04f 0800 	mov.w	r8, #0
 800c766:	f104 0a1a 	add.w	sl, r4, #26
 800c76a:	e7f2      	b.n	800c752 <_printf_float+0x422>
 800c76c:	2301      	movs	r3, #1
 800c76e:	4642      	mov	r2, r8
 800c770:	e7df      	b.n	800c732 <_printf_float+0x402>
 800c772:	2301      	movs	r3, #1
 800c774:	464a      	mov	r2, r9
 800c776:	4631      	mov	r1, r6
 800c778:	4628      	mov	r0, r5
 800c77a:	47b8      	blx	r7
 800c77c:	3001      	adds	r0, #1
 800c77e:	f43f ae38 	beq.w	800c3f2 <_printf_float+0xc2>
 800c782:	f108 0801 	add.w	r8, r8, #1
 800c786:	68e3      	ldr	r3, [r4, #12]
 800c788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c78a:	1a5b      	subs	r3, r3, r1
 800c78c:	4543      	cmp	r3, r8
 800c78e:	dcf0      	bgt.n	800c772 <_printf_float+0x442>
 800c790:	e6fa      	b.n	800c588 <_printf_float+0x258>
 800c792:	f04f 0800 	mov.w	r8, #0
 800c796:	f104 0919 	add.w	r9, r4, #25
 800c79a:	e7f4      	b.n	800c786 <_printf_float+0x456>

0800c79c <_printf_common>:
 800c79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a0:	4616      	mov	r6, r2
 800c7a2:	4699      	mov	r9, r3
 800c7a4:	688a      	ldr	r2, [r1, #8]
 800c7a6:	690b      	ldr	r3, [r1, #16]
 800c7a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	bfb8      	it	lt
 800c7b0:	4613      	movlt	r3, r2
 800c7b2:	6033      	str	r3, [r6, #0]
 800c7b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	b10a      	cbz	r2, 800c7c2 <_printf_common+0x26>
 800c7be:	3301      	adds	r3, #1
 800c7c0:	6033      	str	r3, [r6, #0]
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	0699      	lsls	r1, r3, #26
 800c7c6:	bf42      	ittt	mi
 800c7c8:	6833      	ldrmi	r3, [r6, #0]
 800c7ca:	3302      	addmi	r3, #2
 800c7cc:	6033      	strmi	r3, [r6, #0]
 800c7ce:	6825      	ldr	r5, [r4, #0]
 800c7d0:	f015 0506 	ands.w	r5, r5, #6
 800c7d4:	d106      	bne.n	800c7e4 <_printf_common+0x48>
 800c7d6:	f104 0a19 	add.w	sl, r4, #25
 800c7da:	68e3      	ldr	r3, [r4, #12]
 800c7dc:	6832      	ldr	r2, [r6, #0]
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	42ab      	cmp	r3, r5
 800c7e2:	dc26      	bgt.n	800c832 <_printf_common+0x96>
 800c7e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7e8:	1e13      	subs	r3, r2, #0
 800c7ea:	6822      	ldr	r2, [r4, #0]
 800c7ec:	bf18      	it	ne
 800c7ee:	2301      	movne	r3, #1
 800c7f0:	0692      	lsls	r2, r2, #26
 800c7f2:	d42b      	bmi.n	800c84c <_printf_common+0xb0>
 800c7f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7f8:	4649      	mov	r1, r9
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	47c0      	blx	r8
 800c7fe:	3001      	adds	r0, #1
 800c800:	d01e      	beq.n	800c840 <_printf_common+0xa4>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	68e5      	ldr	r5, [r4, #12]
 800c806:	6832      	ldr	r2, [r6, #0]
 800c808:	f003 0306 	and.w	r3, r3, #6
 800c80c:	2b04      	cmp	r3, #4
 800c80e:	bf08      	it	eq
 800c810:	1aad      	subeq	r5, r5, r2
 800c812:	68a3      	ldr	r3, [r4, #8]
 800c814:	6922      	ldr	r2, [r4, #16]
 800c816:	bf0c      	ite	eq
 800c818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c81c:	2500      	movne	r5, #0
 800c81e:	4293      	cmp	r3, r2
 800c820:	bfc4      	itt	gt
 800c822:	1a9b      	subgt	r3, r3, r2
 800c824:	18ed      	addgt	r5, r5, r3
 800c826:	2600      	movs	r6, #0
 800c828:	341a      	adds	r4, #26
 800c82a:	42b5      	cmp	r5, r6
 800c82c:	d11a      	bne.n	800c864 <_printf_common+0xc8>
 800c82e:	2000      	movs	r0, #0
 800c830:	e008      	b.n	800c844 <_printf_common+0xa8>
 800c832:	2301      	movs	r3, #1
 800c834:	4652      	mov	r2, sl
 800c836:	4649      	mov	r1, r9
 800c838:	4638      	mov	r0, r7
 800c83a:	47c0      	blx	r8
 800c83c:	3001      	adds	r0, #1
 800c83e:	d103      	bne.n	800c848 <_printf_common+0xac>
 800c840:	f04f 30ff 	mov.w	r0, #4294967295
 800c844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c848:	3501      	adds	r5, #1
 800c84a:	e7c6      	b.n	800c7da <_printf_common+0x3e>
 800c84c:	18e1      	adds	r1, r4, r3
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	2030      	movs	r0, #48	; 0x30
 800c852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c856:	4422      	add	r2, r4
 800c858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c85c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c860:	3302      	adds	r3, #2
 800c862:	e7c7      	b.n	800c7f4 <_printf_common+0x58>
 800c864:	2301      	movs	r3, #1
 800c866:	4622      	mov	r2, r4
 800c868:	4649      	mov	r1, r9
 800c86a:	4638      	mov	r0, r7
 800c86c:	47c0      	blx	r8
 800c86e:	3001      	adds	r0, #1
 800c870:	d0e6      	beq.n	800c840 <_printf_common+0xa4>
 800c872:	3601      	adds	r6, #1
 800c874:	e7d9      	b.n	800c82a <_printf_common+0x8e>
	...

0800c878 <_printf_i>:
 800c878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c87c:	7e0f      	ldrb	r7, [r1, #24]
 800c87e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c880:	2f78      	cmp	r7, #120	; 0x78
 800c882:	4691      	mov	r9, r2
 800c884:	4680      	mov	r8, r0
 800c886:	460c      	mov	r4, r1
 800c888:	469a      	mov	sl, r3
 800c88a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c88e:	d807      	bhi.n	800c8a0 <_printf_i+0x28>
 800c890:	2f62      	cmp	r7, #98	; 0x62
 800c892:	d80a      	bhi.n	800c8aa <_printf_i+0x32>
 800c894:	2f00      	cmp	r7, #0
 800c896:	f000 80d8 	beq.w	800ca4a <_printf_i+0x1d2>
 800c89a:	2f58      	cmp	r7, #88	; 0x58
 800c89c:	f000 80a3 	beq.w	800c9e6 <_printf_i+0x16e>
 800c8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8a8:	e03a      	b.n	800c920 <_printf_i+0xa8>
 800c8aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8ae:	2b15      	cmp	r3, #21
 800c8b0:	d8f6      	bhi.n	800c8a0 <_printf_i+0x28>
 800c8b2:	a101      	add	r1, pc, #4	; (adr r1, 800c8b8 <_printf_i+0x40>)
 800c8b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8b8:	0800c911 	.word	0x0800c911
 800c8bc:	0800c925 	.word	0x0800c925
 800c8c0:	0800c8a1 	.word	0x0800c8a1
 800c8c4:	0800c8a1 	.word	0x0800c8a1
 800c8c8:	0800c8a1 	.word	0x0800c8a1
 800c8cc:	0800c8a1 	.word	0x0800c8a1
 800c8d0:	0800c925 	.word	0x0800c925
 800c8d4:	0800c8a1 	.word	0x0800c8a1
 800c8d8:	0800c8a1 	.word	0x0800c8a1
 800c8dc:	0800c8a1 	.word	0x0800c8a1
 800c8e0:	0800c8a1 	.word	0x0800c8a1
 800c8e4:	0800ca31 	.word	0x0800ca31
 800c8e8:	0800c955 	.word	0x0800c955
 800c8ec:	0800ca13 	.word	0x0800ca13
 800c8f0:	0800c8a1 	.word	0x0800c8a1
 800c8f4:	0800c8a1 	.word	0x0800c8a1
 800c8f8:	0800ca53 	.word	0x0800ca53
 800c8fc:	0800c8a1 	.word	0x0800c8a1
 800c900:	0800c955 	.word	0x0800c955
 800c904:	0800c8a1 	.word	0x0800c8a1
 800c908:	0800c8a1 	.word	0x0800c8a1
 800c90c:	0800ca1b 	.word	0x0800ca1b
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	1d1a      	adds	r2, r3, #4
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	602a      	str	r2, [r5, #0]
 800c918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c91c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c920:	2301      	movs	r3, #1
 800c922:	e0a3      	b.n	800ca6c <_printf_i+0x1f4>
 800c924:	6820      	ldr	r0, [r4, #0]
 800c926:	6829      	ldr	r1, [r5, #0]
 800c928:	0606      	lsls	r6, r0, #24
 800c92a:	f101 0304 	add.w	r3, r1, #4
 800c92e:	d50a      	bpl.n	800c946 <_printf_i+0xce>
 800c930:	680e      	ldr	r6, [r1, #0]
 800c932:	602b      	str	r3, [r5, #0]
 800c934:	2e00      	cmp	r6, #0
 800c936:	da03      	bge.n	800c940 <_printf_i+0xc8>
 800c938:	232d      	movs	r3, #45	; 0x2d
 800c93a:	4276      	negs	r6, r6
 800c93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c940:	485e      	ldr	r0, [pc, #376]	; (800cabc <_printf_i+0x244>)
 800c942:	230a      	movs	r3, #10
 800c944:	e019      	b.n	800c97a <_printf_i+0x102>
 800c946:	680e      	ldr	r6, [r1, #0]
 800c948:	602b      	str	r3, [r5, #0]
 800c94a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c94e:	bf18      	it	ne
 800c950:	b236      	sxthne	r6, r6
 800c952:	e7ef      	b.n	800c934 <_printf_i+0xbc>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	6820      	ldr	r0, [r4, #0]
 800c958:	1d19      	adds	r1, r3, #4
 800c95a:	6029      	str	r1, [r5, #0]
 800c95c:	0601      	lsls	r1, r0, #24
 800c95e:	d501      	bpl.n	800c964 <_printf_i+0xec>
 800c960:	681e      	ldr	r6, [r3, #0]
 800c962:	e002      	b.n	800c96a <_printf_i+0xf2>
 800c964:	0646      	lsls	r6, r0, #25
 800c966:	d5fb      	bpl.n	800c960 <_printf_i+0xe8>
 800c968:	881e      	ldrh	r6, [r3, #0]
 800c96a:	4854      	ldr	r0, [pc, #336]	; (800cabc <_printf_i+0x244>)
 800c96c:	2f6f      	cmp	r7, #111	; 0x6f
 800c96e:	bf0c      	ite	eq
 800c970:	2308      	moveq	r3, #8
 800c972:	230a      	movne	r3, #10
 800c974:	2100      	movs	r1, #0
 800c976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c97a:	6865      	ldr	r5, [r4, #4]
 800c97c:	60a5      	str	r5, [r4, #8]
 800c97e:	2d00      	cmp	r5, #0
 800c980:	bfa2      	ittt	ge
 800c982:	6821      	ldrge	r1, [r4, #0]
 800c984:	f021 0104 	bicge.w	r1, r1, #4
 800c988:	6021      	strge	r1, [r4, #0]
 800c98a:	b90e      	cbnz	r6, 800c990 <_printf_i+0x118>
 800c98c:	2d00      	cmp	r5, #0
 800c98e:	d04d      	beq.n	800ca2c <_printf_i+0x1b4>
 800c990:	4615      	mov	r5, r2
 800c992:	fbb6 f1f3 	udiv	r1, r6, r3
 800c996:	fb03 6711 	mls	r7, r3, r1, r6
 800c99a:	5dc7      	ldrb	r7, [r0, r7]
 800c99c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9a0:	4637      	mov	r7, r6
 800c9a2:	42bb      	cmp	r3, r7
 800c9a4:	460e      	mov	r6, r1
 800c9a6:	d9f4      	bls.n	800c992 <_printf_i+0x11a>
 800c9a8:	2b08      	cmp	r3, #8
 800c9aa:	d10b      	bne.n	800c9c4 <_printf_i+0x14c>
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	07de      	lsls	r6, r3, #31
 800c9b0:	d508      	bpl.n	800c9c4 <_printf_i+0x14c>
 800c9b2:	6923      	ldr	r3, [r4, #16]
 800c9b4:	6861      	ldr	r1, [r4, #4]
 800c9b6:	4299      	cmp	r1, r3
 800c9b8:	bfde      	ittt	le
 800c9ba:	2330      	movle	r3, #48	; 0x30
 800c9bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9c4:	1b52      	subs	r2, r2, r5
 800c9c6:	6122      	str	r2, [r4, #16]
 800c9c8:	f8cd a000 	str.w	sl, [sp]
 800c9cc:	464b      	mov	r3, r9
 800c9ce:	aa03      	add	r2, sp, #12
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	f7ff fee2 	bl	800c79c <_printf_common>
 800c9d8:	3001      	adds	r0, #1
 800c9da:	d14c      	bne.n	800ca76 <_printf_i+0x1fe>
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	b004      	add	sp, #16
 800c9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e6:	4835      	ldr	r0, [pc, #212]	; (800cabc <_printf_i+0x244>)
 800c9e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c9ec:	6829      	ldr	r1, [r5, #0]
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9f4:	6029      	str	r1, [r5, #0]
 800c9f6:	061d      	lsls	r5, r3, #24
 800c9f8:	d514      	bpl.n	800ca24 <_printf_i+0x1ac>
 800c9fa:	07df      	lsls	r7, r3, #31
 800c9fc:	bf44      	itt	mi
 800c9fe:	f043 0320 	orrmi.w	r3, r3, #32
 800ca02:	6023      	strmi	r3, [r4, #0]
 800ca04:	b91e      	cbnz	r6, 800ca0e <_printf_i+0x196>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	f023 0320 	bic.w	r3, r3, #32
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	2310      	movs	r3, #16
 800ca10:	e7b0      	b.n	800c974 <_printf_i+0xfc>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	f043 0320 	orr.w	r3, r3, #32
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	2378      	movs	r3, #120	; 0x78
 800ca1c:	4828      	ldr	r0, [pc, #160]	; (800cac0 <_printf_i+0x248>)
 800ca1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca22:	e7e3      	b.n	800c9ec <_printf_i+0x174>
 800ca24:	0659      	lsls	r1, r3, #25
 800ca26:	bf48      	it	mi
 800ca28:	b2b6      	uxthmi	r6, r6
 800ca2a:	e7e6      	b.n	800c9fa <_printf_i+0x182>
 800ca2c:	4615      	mov	r5, r2
 800ca2e:	e7bb      	b.n	800c9a8 <_printf_i+0x130>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	6826      	ldr	r6, [r4, #0]
 800ca34:	6961      	ldr	r1, [r4, #20]
 800ca36:	1d18      	adds	r0, r3, #4
 800ca38:	6028      	str	r0, [r5, #0]
 800ca3a:	0635      	lsls	r5, r6, #24
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	d501      	bpl.n	800ca44 <_printf_i+0x1cc>
 800ca40:	6019      	str	r1, [r3, #0]
 800ca42:	e002      	b.n	800ca4a <_printf_i+0x1d2>
 800ca44:	0670      	lsls	r0, r6, #25
 800ca46:	d5fb      	bpl.n	800ca40 <_printf_i+0x1c8>
 800ca48:	8019      	strh	r1, [r3, #0]
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	6123      	str	r3, [r4, #16]
 800ca4e:	4615      	mov	r5, r2
 800ca50:	e7ba      	b.n	800c9c8 <_printf_i+0x150>
 800ca52:	682b      	ldr	r3, [r5, #0]
 800ca54:	1d1a      	adds	r2, r3, #4
 800ca56:	602a      	str	r2, [r5, #0]
 800ca58:	681d      	ldr	r5, [r3, #0]
 800ca5a:	6862      	ldr	r2, [r4, #4]
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f7f3 fbbe 	bl	80001e0 <memchr>
 800ca64:	b108      	cbz	r0, 800ca6a <_printf_i+0x1f2>
 800ca66:	1b40      	subs	r0, r0, r5
 800ca68:	6060      	str	r0, [r4, #4]
 800ca6a:	6863      	ldr	r3, [r4, #4]
 800ca6c:	6123      	str	r3, [r4, #16]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca74:	e7a8      	b.n	800c9c8 <_printf_i+0x150>
 800ca76:	6923      	ldr	r3, [r4, #16]
 800ca78:	462a      	mov	r2, r5
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	47d0      	blx	sl
 800ca80:	3001      	adds	r0, #1
 800ca82:	d0ab      	beq.n	800c9dc <_printf_i+0x164>
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	079b      	lsls	r3, r3, #30
 800ca88:	d413      	bmi.n	800cab2 <_printf_i+0x23a>
 800ca8a:	68e0      	ldr	r0, [r4, #12]
 800ca8c:	9b03      	ldr	r3, [sp, #12]
 800ca8e:	4298      	cmp	r0, r3
 800ca90:	bfb8      	it	lt
 800ca92:	4618      	movlt	r0, r3
 800ca94:	e7a4      	b.n	800c9e0 <_printf_i+0x168>
 800ca96:	2301      	movs	r3, #1
 800ca98:	4632      	mov	r2, r6
 800ca9a:	4649      	mov	r1, r9
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	47d0      	blx	sl
 800caa0:	3001      	adds	r0, #1
 800caa2:	d09b      	beq.n	800c9dc <_printf_i+0x164>
 800caa4:	3501      	adds	r5, #1
 800caa6:	68e3      	ldr	r3, [r4, #12]
 800caa8:	9903      	ldr	r1, [sp, #12]
 800caaa:	1a5b      	subs	r3, r3, r1
 800caac:	42ab      	cmp	r3, r5
 800caae:	dcf2      	bgt.n	800ca96 <_printf_i+0x21e>
 800cab0:	e7eb      	b.n	800ca8a <_printf_i+0x212>
 800cab2:	2500      	movs	r5, #0
 800cab4:	f104 0619 	add.w	r6, r4, #25
 800cab8:	e7f5      	b.n	800caa6 <_printf_i+0x22e>
 800caba:	bf00      	nop
 800cabc:	0800ffda 	.word	0x0800ffda
 800cac0:	0800ffeb 	.word	0x0800ffeb

0800cac4 <siprintf>:
 800cac4:	b40e      	push	{r1, r2, r3}
 800cac6:	b500      	push	{lr}
 800cac8:	b09c      	sub	sp, #112	; 0x70
 800caca:	ab1d      	add	r3, sp, #116	; 0x74
 800cacc:	9002      	str	r0, [sp, #8]
 800cace:	9006      	str	r0, [sp, #24]
 800cad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cad4:	4809      	ldr	r0, [pc, #36]	; (800cafc <siprintf+0x38>)
 800cad6:	9107      	str	r1, [sp, #28]
 800cad8:	9104      	str	r1, [sp, #16]
 800cada:	4909      	ldr	r1, [pc, #36]	; (800cb00 <siprintf+0x3c>)
 800cadc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cae0:	9105      	str	r1, [sp, #20]
 800cae2:	6800      	ldr	r0, [r0, #0]
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	a902      	add	r1, sp, #8
 800cae8:	f001 fb6a 	bl	800e1c0 <_svfiprintf_r>
 800caec:	9b02      	ldr	r3, [sp, #8]
 800caee:	2200      	movs	r2, #0
 800caf0:	701a      	strb	r2, [r3, #0]
 800caf2:	b01c      	add	sp, #112	; 0x70
 800caf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800caf8:	b003      	add	sp, #12
 800cafa:	4770      	bx	lr
 800cafc:	20000020 	.word	0x20000020
 800cb00:	ffff0208 	.word	0xffff0208

0800cb04 <quorem>:
 800cb04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb08:	6903      	ldr	r3, [r0, #16]
 800cb0a:	690c      	ldr	r4, [r1, #16]
 800cb0c:	42a3      	cmp	r3, r4
 800cb0e:	4607      	mov	r7, r0
 800cb10:	f2c0 8081 	blt.w	800cc16 <quorem+0x112>
 800cb14:	3c01      	subs	r4, #1
 800cb16:	f101 0814 	add.w	r8, r1, #20
 800cb1a:	f100 0514 	add.w	r5, r0, #20
 800cb1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb22:	9301      	str	r3, [sp, #4]
 800cb24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb38:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb3c:	d331      	bcc.n	800cba2 <quorem+0x9e>
 800cb3e:	f04f 0e00 	mov.w	lr, #0
 800cb42:	4640      	mov	r0, r8
 800cb44:	46ac      	mov	ip, r5
 800cb46:	46f2      	mov	sl, lr
 800cb48:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb4c:	b293      	uxth	r3, r2
 800cb4e:	fb06 e303 	mla	r3, r6, r3, lr
 800cb52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	ebaa 0303 	sub.w	r3, sl, r3
 800cb5c:	f8dc a000 	ldr.w	sl, [ip]
 800cb60:	0c12      	lsrs	r2, r2, #16
 800cb62:	fa13 f38a 	uxtah	r3, r3, sl
 800cb66:	fb06 e202 	mla	r2, r6, r2, lr
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	9b00      	ldr	r3, [sp, #0]
 800cb6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb72:	b292      	uxth	r2, r2
 800cb74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb7c:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb80:	4581      	cmp	r9, r0
 800cb82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb86:	f84c 3b04 	str.w	r3, [ip], #4
 800cb8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb8e:	d2db      	bcs.n	800cb48 <quorem+0x44>
 800cb90:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb94:	b92b      	cbnz	r3, 800cba2 <quorem+0x9e>
 800cb96:	9b01      	ldr	r3, [sp, #4]
 800cb98:	3b04      	subs	r3, #4
 800cb9a:	429d      	cmp	r5, r3
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	d32e      	bcc.n	800cbfe <quorem+0xfa>
 800cba0:	613c      	str	r4, [r7, #16]
 800cba2:	4638      	mov	r0, r7
 800cba4:	f001 f8b8 	bl	800dd18 <__mcmp>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	db24      	blt.n	800cbf6 <quorem+0xf2>
 800cbac:	3601      	adds	r6, #1
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f04f 0c00 	mov.w	ip, #0
 800cbb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbb8:	f8d0 e000 	ldr.w	lr, [r0]
 800cbbc:	b293      	uxth	r3, r2
 800cbbe:	ebac 0303 	sub.w	r3, ip, r3
 800cbc2:	0c12      	lsrs	r2, r2, #16
 800cbc4:	fa13 f38e 	uxtah	r3, r3, lr
 800cbc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cbcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbd6:	45c1      	cmp	r9, r8
 800cbd8:	f840 3b04 	str.w	r3, [r0], #4
 800cbdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cbe0:	d2e8      	bcs.n	800cbb4 <quorem+0xb0>
 800cbe2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbea:	b922      	cbnz	r2, 800cbf6 <quorem+0xf2>
 800cbec:	3b04      	subs	r3, #4
 800cbee:	429d      	cmp	r5, r3
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	d30a      	bcc.n	800cc0a <quorem+0x106>
 800cbf4:	613c      	str	r4, [r7, #16]
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	b003      	add	sp, #12
 800cbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfe:	6812      	ldr	r2, [r2, #0]
 800cc00:	3b04      	subs	r3, #4
 800cc02:	2a00      	cmp	r2, #0
 800cc04:	d1cc      	bne.n	800cba0 <quorem+0x9c>
 800cc06:	3c01      	subs	r4, #1
 800cc08:	e7c7      	b.n	800cb9a <quorem+0x96>
 800cc0a:	6812      	ldr	r2, [r2, #0]
 800cc0c:	3b04      	subs	r3, #4
 800cc0e:	2a00      	cmp	r2, #0
 800cc10:	d1f0      	bne.n	800cbf4 <quorem+0xf0>
 800cc12:	3c01      	subs	r4, #1
 800cc14:	e7eb      	b.n	800cbee <quorem+0xea>
 800cc16:	2000      	movs	r0, #0
 800cc18:	e7ee      	b.n	800cbf8 <quorem+0xf4>
 800cc1a:	0000      	movs	r0, r0
 800cc1c:	0000      	movs	r0, r0
	...

0800cc20 <_dtoa_r>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	ed2d 8b04 	vpush	{d8-d9}
 800cc28:	ec57 6b10 	vmov	r6, r7, d0
 800cc2c:	b093      	sub	sp, #76	; 0x4c
 800cc2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc34:	9106      	str	r1, [sp, #24]
 800cc36:	ee10 aa10 	vmov	sl, s0
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc3e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc40:	46bb      	mov	fp, r7
 800cc42:	b975      	cbnz	r5, 800cc62 <_dtoa_r+0x42>
 800cc44:	2010      	movs	r0, #16
 800cc46:	f000 fddd 	bl	800d804 <malloc>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	6260      	str	r0, [r4, #36]	; 0x24
 800cc4e:	b920      	cbnz	r0, 800cc5a <_dtoa_r+0x3a>
 800cc50:	4ba7      	ldr	r3, [pc, #668]	; (800cef0 <_dtoa_r+0x2d0>)
 800cc52:	21ea      	movs	r1, #234	; 0xea
 800cc54:	48a7      	ldr	r0, [pc, #668]	; (800cef4 <_dtoa_r+0x2d4>)
 800cc56:	f001 fbc3 	bl	800e3e0 <__assert_func>
 800cc5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc5e:	6005      	str	r5, [r0, #0]
 800cc60:	60c5      	str	r5, [r0, #12]
 800cc62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc64:	6819      	ldr	r1, [r3, #0]
 800cc66:	b151      	cbz	r1, 800cc7e <_dtoa_r+0x5e>
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	604a      	str	r2, [r1, #4]
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	4093      	lsls	r3, r2
 800cc70:	608b      	str	r3, [r1, #8]
 800cc72:	4620      	mov	r0, r4
 800cc74:	f000 fe0e 	bl	800d894 <_Bfree>
 800cc78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	601a      	str	r2, [r3, #0]
 800cc7e:	1e3b      	subs	r3, r7, #0
 800cc80:	bfaa      	itet	ge
 800cc82:	2300      	movge	r3, #0
 800cc84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cc88:	f8c8 3000 	strge.w	r3, [r8]
 800cc8c:	4b9a      	ldr	r3, [pc, #616]	; (800cef8 <_dtoa_r+0x2d8>)
 800cc8e:	bfbc      	itt	lt
 800cc90:	2201      	movlt	r2, #1
 800cc92:	f8c8 2000 	strlt.w	r2, [r8]
 800cc96:	ea33 030b 	bics.w	r3, r3, fp
 800cc9a:	d11b      	bne.n	800ccd4 <_dtoa_r+0xb4>
 800cc9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cca2:	6013      	str	r3, [r2, #0]
 800cca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cca8:	4333      	orrs	r3, r6
 800ccaa:	f000 8592 	beq.w	800d7d2 <_dtoa_r+0xbb2>
 800ccae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccb0:	b963      	cbnz	r3, 800cccc <_dtoa_r+0xac>
 800ccb2:	4b92      	ldr	r3, [pc, #584]	; (800cefc <_dtoa_r+0x2dc>)
 800ccb4:	e022      	b.n	800ccfc <_dtoa_r+0xdc>
 800ccb6:	4b92      	ldr	r3, [pc, #584]	; (800cf00 <_dtoa_r+0x2e0>)
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	3308      	adds	r3, #8
 800ccbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ccbe:	6013      	str	r3, [r2, #0]
 800ccc0:	9801      	ldr	r0, [sp, #4]
 800ccc2:	b013      	add	sp, #76	; 0x4c
 800ccc4:	ecbd 8b04 	vpop	{d8-d9}
 800ccc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cccc:	4b8b      	ldr	r3, [pc, #556]	; (800cefc <_dtoa_r+0x2dc>)
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	3303      	adds	r3, #3
 800ccd2:	e7f3      	b.n	800ccbc <_dtoa_r+0x9c>
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	4650      	mov	r0, sl
 800ccda:	4659      	mov	r1, fp
 800ccdc:	f7f3 fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cce0:	ec4b ab19 	vmov	d9, sl, fp
 800cce4:	4680      	mov	r8, r0
 800cce6:	b158      	cbz	r0, 800cd00 <_dtoa_r+0xe0>
 800cce8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccea:	2301      	movs	r3, #1
 800ccec:	6013      	str	r3, [r2, #0]
 800ccee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f000 856b 	beq.w	800d7cc <_dtoa_r+0xbac>
 800ccf6:	4883      	ldr	r0, [pc, #524]	; (800cf04 <_dtoa_r+0x2e4>)
 800ccf8:	6018      	str	r0, [r3, #0]
 800ccfa:	1e43      	subs	r3, r0, #1
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	e7df      	b.n	800ccc0 <_dtoa_r+0xa0>
 800cd00:	ec4b ab10 	vmov	d0, sl, fp
 800cd04:	aa10      	add	r2, sp, #64	; 0x40
 800cd06:	a911      	add	r1, sp, #68	; 0x44
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f001 f8ab 	bl	800de64 <__d2b>
 800cd0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cd12:	ee08 0a10 	vmov	s16, r0
 800cd16:	2d00      	cmp	r5, #0
 800cd18:	f000 8084 	beq.w	800ce24 <_dtoa_r+0x204>
 800cd1c:	ee19 3a90 	vmov	r3, s19
 800cd20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cd28:	4656      	mov	r6, sl
 800cd2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cd2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cd36:	4b74      	ldr	r3, [pc, #464]	; (800cf08 <_dtoa_r+0x2e8>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	4639      	mov	r1, r7
 800cd3e:	f7f3 faa3 	bl	8000288 <__aeabi_dsub>
 800cd42:	a365      	add	r3, pc, #404	; (adr r3, 800ced8 <_dtoa_r+0x2b8>)
 800cd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd48:	f7f3 fc56 	bl	80005f8 <__aeabi_dmul>
 800cd4c:	a364      	add	r3, pc, #400	; (adr r3, 800cee0 <_dtoa_r+0x2c0>)
 800cd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd52:	f7f3 fa9b 	bl	800028c <__adddf3>
 800cd56:	4606      	mov	r6, r0
 800cd58:	4628      	mov	r0, r5
 800cd5a:	460f      	mov	r7, r1
 800cd5c:	f7f3 fbe2 	bl	8000524 <__aeabi_i2d>
 800cd60:	a361      	add	r3, pc, #388	; (adr r3, 800cee8 <_dtoa_r+0x2c8>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	f7f3 fc47 	bl	80005f8 <__aeabi_dmul>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4630      	mov	r0, r6
 800cd70:	4639      	mov	r1, r7
 800cd72:	f7f3 fa8b 	bl	800028c <__adddf3>
 800cd76:	4606      	mov	r6, r0
 800cd78:	460f      	mov	r7, r1
 800cd7a:	f7f3 feed 	bl	8000b58 <__aeabi_d2iz>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	9000      	str	r0, [sp, #0]
 800cd82:	2300      	movs	r3, #0
 800cd84:	4630      	mov	r0, r6
 800cd86:	4639      	mov	r1, r7
 800cd88:	f7f3 fea8 	bl	8000adc <__aeabi_dcmplt>
 800cd8c:	b150      	cbz	r0, 800cda4 <_dtoa_r+0x184>
 800cd8e:	9800      	ldr	r0, [sp, #0]
 800cd90:	f7f3 fbc8 	bl	8000524 <__aeabi_i2d>
 800cd94:	4632      	mov	r2, r6
 800cd96:	463b      	mov	r3, r7
 800cd98:	f7f3 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd9c:	b910      	cbnz	r0, 800cda4 <_dtoa_r+0x184>
 800cd9e:	9b00      	ldr	r3, [sp, #0]
 800cda0:	3b01      	subs	r3, #1
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	9b00      	ldr	r3, [sp, #0]
 800cda6:	2b16      	cmp	r3, #22
 800cda8:	d85a      	bhi.n	800ce60 <_dtoa_r+0x240>
 800cdaa:	9a00      	ldr	r2, [sp, #0]
 800cdac:	4b57      	ldr	r3, [pc, #348]	; (800cf0c <_dtoa_r+0x2ec>)
 800cdae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb6:	ec51 0b19 	vmov	r0, r1, d9
 800cdba:	f7f3 fe8f 	bl	8000adc <__aeabi_dcmplt>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d050      	beq.n	800ce64 <_dtoa_r+0x244>
 800cdc2:	9b00      	ldr	r3, [sp, #0]
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	2300      	movs	r3, #0
 800cdca:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdce:	1b5d      	subs	r5, r3, r5
 800cdd0:	1e6b      	subs	r3, r5, #1
 800cdd2:	9305      	str	r3, [sp, #20]
 800cdd4:	bf45      	ittet	mi
 800cdd6:	f1c5 0301 	rsbmi	r3, r5, #1
 800cdda:	9304      	strmi	r3, [sp, #16]
 800cddc:	2300      	movpl	r3, #0
 800cdde:	2300      	movmi	r3, #0
 800cde0:	bf4c      	ite	mi
 800cde2:	9305      	strmi	r3, [sp, #20]
 800cde4:	9304      	strpl	r3, [sp, #16]
 800cde6:	9b00      	ldr	r3, [sp, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	db3d      	blt.n	800ce68 <_dtoa_r+0x248>
 800cdec:	9b05      	ldr	r3, [sp, #20]
 800cdee:	9a00      	ldr	r2, [sp, #0]
 800cdf0:	920a      	str	r2, [sp, #40]	; 0x28
 800cdf2:	4413      	add	r3, r2
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9307      	str	r3, [sp, #28]
 800cdfa:	9b06      	ldr	r3, [sp, #24]
 800cdfc:	2b09      	cmp	r3, #9
 800cdfe:	f200 8089 	bhi.w	800cf14 <_dtoa_r+0x2f4>
 800ce02:	2b05      	cmp	r3, #5
 800ce04:	bfc4      	itt	gt
 800ce06:	3b04      	subgt	r3, #4
 800ce08:	9306      	strgt	r3, [sp, #24]
 800ce0a:	9b06      	ldr	r3, [sp, #24]
 800ce0c:	f1a3 0302 	sub.w	r3, r3, #2
 800ce10:	bfcc      	ite	gt
 800ce12:	2500      	movgt	r5, #0
 800ce14:	2501      	movle	r5, #1
 800ce16:	2b03      	cmp	r3, #3
 800ce18:	f200 8087 	bhi.w	800cf2a <_dtoa_r+0x30a>
 800ce1c:	e8df f003 	tbb	[pc, r3]
 800ce20:	59383a2d 	.word	0x59383a2d
 800ce24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ce28:	441d      	add	r5, r3
 800ce2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce2e:	2b20      	cmp	r3, #32
 800ce30:	bfc1      	itttt	gt
 800ce32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ce3a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ce3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ce42:	bfda      	itte	le
 800ce44:	f1c3 0320 	rsble	r3, r3, #32
 800ce48:	fa06 f003 	lslle.w	r0, r6, r3
 800ce4c:	4318      	orrgt	r0, r3
 800ce4e:	f7f3 fb59 	bl	8000504 <__aeabi_ui2d>
 800ce52:	2301      	movs	r3, #1
 800ce54:	4606      	mov	r6, r0
 800ce56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ce5a:	3d01      	subs	r5, #1
 800ce5c:	930e      	str	r3, [sp, #56]	; 0x38
 800ce5e:	e76a      	b.n	800cd36 <_dtoa_r+0x116>
 800ce60:	2301      	movs	r3, #1
 800ce62:	e7b2      	b.n	800cdca <_dtoa_r+0x1aa>
 800ce64:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce66:	e7b1      	b.n	800cdcc <_dtoa_r+0x1ac>
 800ce68:	9b04      	ldr	r3, [sp, #16]
 800ce6a:	9a00      	ldr	r2, [sp, #0]
 800ce6c:	1a9b      	subs	r3, r3, r2
 800ce6e:	9304      	str	r3, [sp, #16]
 800ce70:	4253      	negs	r3, r2
 800ce72:	9307      	str	r3, [sp, #28]
 800ce74:	2300      	movs	r3, #0
 800ce76:	930a      	str	r3, [sp, #40]	; 0x28
 800ce78:	e7bf      	b.n	800cdfa <_dtoa_r+0x1da>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	9308      	str	r3, [sp, #32]
 800ce7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	dc55      	bgt.n	800cf30 <_dtoa_r+0x310>
 800ce84:	2301      	movs	r3, #1
 800ce86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce8e:	e00c      	b.n	800ceaa <_dtoa_r+0x28a>
 800ce90:	2301      	movs	r3, #1
 800ce92:	e7f3      	b.n	800ce7c <_dtoa_r+0x25c>
 800ce94:	2300      	movs	r3, #0
 800ce96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce98:	9308      	str	r3, [sp, #32]
 800ce9a:	9b00      	ldr	r3, [sp, #0]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	9302      	str	r3, [sp, #8]
 800cea0:	3301      	adds	r3, #1
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	9303      	str	r3, [sp, #12]
 800cea6:	bfb8      	it	lt
 800cea8:	2301      	movlt	r3, #1
 800ceaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ceac:	2200      	movs	r2, #0
 800ceae:	6042      	str	r2, [r0, #4]
 800ceb0:	2204      	movs	r2, #4
 800ceb2:	f102 0614 	add.w	r6, r2, #20
 800ceb6:	429e      	cmp	r6, r3
 800ceb8:	6841      	ldr	r1, [r0, #4]
 800ceba:	d93d      	bls.n	800cf38 <_dtoa_r+0x318>
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 fca9 	bl	800d814 <_Balloc>
 800cec2:	9001      	str	r0, [sp, #4]
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d13b      	bne.n	800cf40 <_dtoa_r+0x320>
 800cec8:	4b11      	ldr	r3, [pc, #68]	; (800cf10 <_dtoa_r+0x2f0>)
 800ceca:	4602      	mov	r2, r0
 800cecc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ced0:	e6c0      	b.n	800cc54 <_dtoa_r+0x34>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e7df      	b.n	800ce96 <_dtoa_r+0x276>
 800ced6:	bf00      	nop
 800ced8:	636f4361 	.word	0x636f4361
 800cedc:	3fd287a7 	.word	0x3fd287a7
 800cee0:	8b60c8b3 	.word	0x8b60c8b3
 800cee4:	3fc68a28 	.word	0x3fc68a28
 800cee8:	509f79fb 	.word	0x509f79fb
 800ceec:	3fd34413 	.word	0x3fd34413
 800cef0:	08010009 	.word	0x08010009
 800cef4:	08010020 	.word	0x08010020
 800cef8:	7ff00000 	.word	0x7ff00000
 800cefc:	08010005 	.word	0x08010005
 800cf00:	0800fffc 	.word	0x0800fffc
 800cf04:	0800ffd9 	.word	0x0800ffd9
 800cf08:	3ff80000 	.word	0x3ff80000
 800cf0c:	08010110 	.word	0x08010110
 800cf10:	0801007b 	.word	0x0801007b
 800cf14:	2501      	movs	r5, #1
 800cf16:	2300      	movs	r3, #0
 800cf18:	9306      	str	r3, [sp, #24]
 800cf1a:	9508      	str	r5, [sp, #32]
 800cf1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf24:	2200      	movs	r2, #0
 800cf26:	2312      	movs	r3, #18
 800cf28:	e7b0      	b.n	800ce8c <_dtoa_r+0x26c>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	9308      	str	r3, [sp, #32]
 800cf2e:	e7f5      	b.n	800cf1c <_dtoa_r+0x2fc>
 800cf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf36:	e7b8      	b.n	800ceaa <_dtoa_r+0x28a>
 800cf38:	3101      	adds	r1, #1
 800cf3a:	6041      	str	r1, [r0, #4]
 800cf3c:	0052      	lsls	r2, r2, #1
 800cf3e:	e7b8      	b.n	800ceb2 <_dtoa_r+0x292>
 800cf40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf42:	9a01      	ldr	r2, [sp, #4]
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	9b03      	ldr	r3, [sp, #12]
 800cf48:	2b0e      	cmp	r3, #14
 800cf4a:	f200 809d 	bhi.w	800d088 <_dtoa_r+0x468>
 800cf4e:	2d00      	cmp	r5, #0
 800cf50:	f000 809a 	beq.w	800d088 <_dtoa_r+0x468>
 800cf54:	9b00      	ldr	r3, [sp, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	dd32      	ble.n	800cfc0 <_dtoa_r+0x3a0>
 800cf5a:	4ab7      	ldr	r2, [pc, #732]	; (800d238 <_dtoa_r+0x618>)
 800cf5c:	f003 030f 	and.w	r3, r3, #15
 800cf60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf68:	9b00      	ldr	r3, [sp, #0]
 800cf6a:	05d8      	lsls	r0, r3, #23
 800cf6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf70:	d516      	bpl.n	800cfa0 <_dtoa_r+0x380>
 800cf72:	4bb2      	ldr	r3, [pc, #712]	; (800d23c <_dtoa_r+0x61c>)
 800cf74:	ec51 0b19 	vmov	r0, r1, d9
 800cf78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf7c:	f7f3 fc66 	bl	800084c <__aeabi_ddiv>
 800cf80:	f007 070f 	and.w	r7, r7, #15
 800cf84:	4682      	mov	sl, r0
 800cf86:	468b      	mov	fp, r1
 800cf88:	2503      	movs	r5, #3
 800cf8a:	4eac      	ldr	r6, [pc, #688]	; (800d23c <_dtoa_r+0x61c>)
 800cf8c:	b957      	cbnz	r7, 800cfa4 <_dtoa_r+0x384>
 800cf8e:	4642      	mov	r2, r8
 800cf90:	464b      	mov	r3, r9
 800cf92:	4650      	mov	r0, sl
 800cf94:	4659      	mov	r1, fp
 800cf96:	f7f3 fc59 	bl	800084c <__aeabi_ddiv>
 800cf9a:	4682      	mov	sl, r0
 800cf9c:	468b      	mov	fp, r1
 800cf9e:	e028      	b.n	800cff2 <_dtoa_r+0x3d2>
 800cfa0:	2502      	movs	r5, #2
 800cfa2:	e7f2      	b.n	800cf8a <_dtoa_r+0x36a>
 800cfa4:	07f9      	lsls	r1, r7, #31
 800cfa6:	d508      	bpl.n	800cfba <_dtoa_r+0x39a>
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	4649      	mov	r1, r9
 800cfac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfb0:	f7f3 fb22 	bl	80005f8 <__aeabi_dmul>
 800cfb4:	3501      	adds	r5, #1
 800cfb6:	4680      	mov	r8, r0
 800cfb8:	4689      	mov	r9, r1
 800cfba:	107f      	asrs	r7, r7, #1
 800cfbc:	3608      	adds	r6, #8
 800cfbe:	e7e5      	b.n	800cf8c <_dtoa_r+0x36c>
 800cfc0:	f000 809b 	beq.w	800d0fa <_dtoa_r+0x4da>
 800cfc4:	9b00      	ldr	r3, [sp, #0]
 800cfc6:	4f9d      	ldr	r7, [pc, #628]	; (800d23c <_dtoa_r+0x61c>)
 800cfc8:	425e      	negs	r6, r3
 800cfca:	4b9b      	ldr	r3, [pc, #620]	; (800d238 <_dtoa_r+0x618>)
 800cfcc:	f006 020f 	and.w	r2, r6, #15
 800cfd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd8:	ec51 0b19 	vmov	r0, r1, d9
 800cfdc:	f7f3 fb0c 	bl	80005f8 <__aeabi_dmul>
 800cfe0:	1136      	asrs	r6, r6, #4
 800cfe2:	4682      	mov	sl, r0
 800cfe4:	468b      	mov	fp, r1
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2502      	movs	r5, #2
 800cfea:	2e00      	cmp	r6, #0
 800cfec:	d17a      	bne.n	800d0e4 <_dtoa_r+0x4c4>
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1d3      	bne.n	800cf9a <_dtoa_r+0x37a>
 800cff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f000 8082 	beq.w	800d0fe <_dtoa_r+0x4de>
 800cffa:	4b91      	ldr	r3, [pc, #580]	; (800d240 <_dtoa_r+0x620>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	4650      	mov	r0, sl
 800d000:	4659      	mov	r1, fp
 800d002:	f7f3 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800d006:	2800      	cmp	r0, #0
 800d008:	d079      	beq.n	800d0fe <_dtoa_r+0x4de>
 800d00a:	9b03      	ldr	r3, [sp, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d076      	beq.n	800d0fe <_dtoa_r+0x4de>
 800d010:	9b02      	ldr	r3, [sp, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	dd36      	ble.n	800d084 <_dtoa_r+0x464>
 800d016:	9b00      	ldr	r3, [sp, #0]
 800d018:	4650      	mov	r0, sl
 800d01a:	4659      	mov	r1, fp
 800d01c:	1e5f      	subs	r7, r3, #1
 800d01e:	2200      	movs	r2, #0
 800d020:	4b88      	ldr	r3, [pc, #544]	; (800d244 <_dtoa_r+0x624>)
 800d022:	f7f3 fae9 	bl	80005f8 <__aeabi_dmul>
 800d026:	9e02      	ldr	r6, [sp, #8]
 800d028:	4682      	mov	sl, r0
 800d02a:	468b      	mov	fp, r1
 800d02c:	3501      	adds	r5, #1
 800d02e:	4628      	mov	r0, r5
 800d030:	f7f3 fa78 	bl	8000524 <__aeabi_i2d>
 800d034:	4652      	mov	r2, sl
 800d036:	465b      	mov	r3, fp
 800d038:	f7f3 fade 	bl	80005f8 <__aeabi_dmul>
 800d03c:	4b82      	ldr	r3, [pc, #520]	; (800d248 <_dtoa_r+0x628>)
 800d03e:	2200      	movs	r2, #0
 800d040:	f7f3 f924 	bl	800028c <__adddf3>
 800d044:	46d0      	mov	r8, sl
 800d046:	46d9      	mov	r9, fp
 800d048:	4682      	mov	sl, r0
 800d04a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d04e:	2e00      	cmp	r6, #0
 800d050:	d158      	bne.n	800d104 <_dtoa_r+0x4e4>
 800d052:	4b7e      	ldr	r3, [pc, #504]	; (800d24c <_dtoa_r+0x62c>)
 800d054:	2200      	movs	r2, #0
 800d056:	4640      	mov	r0, r8
 800d058:	4649      	mov	r1, r9
 800d05a:	f7f3 f915 	bl	8000288 <__aeabi_dsub>
 800d05e:	4652      	mov	r2, sl
 800d060:	465b      	mov	r3, fp
 800d062:	4680      	mov	r8, r0
 800d064:	4689      	mov	r9, r1
 800d066:	f7f3 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	f040 8295 	bne.w	800d59a <_dtoa_r+0x97a>
 800d070:	4652      	mov	r2, sl
 800d072:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d076:	4640      	mov	r0, r8
 800d078:	4649      	mov	r1, r9
 800d07a:	f7f3 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800d07e:	2800      	cmp	r0, #0
 800d080:	f040 8289 	bne.w	800d596 <_dtoa_r+0x976>
 800d084:	ec5b ab19 	vmov	sl, fp, d9
 800d088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f2c0 8148 	blt.w	800d320 <_dtoa_r+0x700>
 800d090:	9a00      	ldr	r2, [sp, #0]
 800d092:	2a0e      	cmp	r2, #14
 800d094:	f300 8144 	bgt.w	800d320 <_dtoa_r+0x700>
 800d098:	4b67      	ldr	r3, [pc, #412]	; (800d238 <_dtoa_r+0x618>)
 800d09a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d09e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f280 80d5 	bge.w	800d254 <_dtoa_r+0x634>
 800d0aa:	9b03      	ldr	r3, [sp, #12]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f300 80d1 	bgt.w	800d254 <_dtoa_r+0x634>
 800d0b2:	f040 826f 	bne.w	800d594 <_dtoa_r+0x974>
 800d0b6:	4b65      	ldr	r3, [pc, #404]	; (800d24c <_dtoa_r+0x62c>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	4640      	mov	r0, r8
 800d0bc:	4649      	mov	r1, r9
 800d0be:	f7f3 fa9b 	bl	80005f8 <__aeabi_dmul>
 800d0c2:	4652      	mov	r2, sl
 800d0c4:	465b      	mov	r3, fp
 800d0c6:	f7f3 fd1d 	bl	8000b04 <__aeabi_dcmpge>
 800d0ca:	9e03      	ldr	r6, [sp, #12]
 800d0cc:	4637      	mov	r7, r6
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f040 8245 	bne.w	800d55e <_dtoa_r+0x93e>
 800d0d4:	9d01      	ldr	r5, [sp, #4]
 800d0d6:	2331      	movs	r3, #49	; 0x31
 800d0d8:	f805 3b01 	strb.w	r3, [r5], #1
 800d0dc:	9b00      	ldr	r3, [sp, #0]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	e240      	b.n	800d566 <_dtoa_r+0x946>
 800d0e4:	07f2      	lsls	r2, r6, #31
 800d0e6:	d505      	bpl.n	800d0f4 <_dtoa_r+0x4d4>
 800d0e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ec:	f7f3 fa84 	bl	80005f8 <__aeabi_dmul>
 800d0f0:	3501      	adds	r5, #1
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	1076      	asrs	r6, r6, #1
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	e777      	b.n	800cfea <_dtoa_r+0x3ca>
 800d0fa:	2502      	movs	r5, #2
 800d0fc:	e779      	b.n	800cff2 <_dtoa_r+0x3d2>
 800d0fe:	9f00      	ldr	r7, [sp, #0]
 800d100:	9e03      	ldr	r6, [sp, #12]
 800d102:	e794      	b.n	800d02e <_dtoa_r+0x40e>
 800d104:	9901      	ldr	r1, [sp, #4]
 800d106:	4b4c      	ldr	r3, [pc, #304]	; (800d238 <_dtoa_r+0x618>)
 800d108:	4431      	add	r1, r6
 800d10a:	910d      	str	r1, [sp, #52]	; 0x34
 800d10c:	9908      	ldr	r1, [sp, #32]
 800d10e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d112:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d116:	2900      	cmp	r1, #0
 800d118:	d043      	beq.n	800d1a2 <_dtoa_r+0x582>
 800d11a:	494d      	ldr	r1, [pc, #308]	; (800d250 <_dtoa_r+0x630>)
 800d11c:	2000      	movs	r0, #0
 800d11e:	f7f3 fb95 	bl	800084c <__aeabi_ddiv>
 800d122:	4652      	mov	r2, sl
 800d124:	465b      	mov	r3, fp
 800d126:	f7f3 f8af 	bl	8000288 <__aeabi_dsub>
 800d12a:	9d01      	ldr	r5, [sp, #4]
 800d12c:	4682      	mov	sl, r0
 800d12e:	468b      	mov	fp, r1
 800d130:	4649      	mov	r1, r9
 800d132:	4640      	mov	r0, r8
 800d134:	f7f3 fd10 	bl	8000b58 <__aeabi_d2iz>
 800d138:	4606      	mov	r6, r0
 800d13a:	f7f3 f9f3 	bl	8000524 <__aeabi_i2d>
 800d13e:	4602      	mov	r2, r0
 800d140:	460b      	mov	r3, r1
 800d142:	4640      	mov	r0, r8
 800d144:	4649      	mov	r1, r9
 800d146:	f7f3 f89f 	bl	8000288 <__aeabi_dsub>
 800d14a:	3630      	adds	r6, #48	; 0x30
 800d14c:	f805 6b01 	strb.w	r6, [r5], #1
 800d150:	4652      	mov	r2, sl
 800d152:	465b      	mov	r3, fp
 800d154:	4680      	mov	r8, r0
 800d156:	4689      	mov	r9, r1
 800d158:	f7f3 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d163      	bne.n	800d228 <_dtoa_r+0x608>
 800d160:	4642      	mov	r2, r8
 800d162:	464b      	mov	r3, r9
 800d164:	4936      	ldr	r1, [pc, #216]	; (800d240 <_dtoa_r+0x620>)
 800d166:	2000      	movs	r0, #0
 800d168:	f7f3 f88e 	bl	8000288 <__aeabi_dsub>
 800d16c:	4652      	mov	r2, sl
 800d16e:	465b      	mov	r3, fp
 800d170:	f7f3 fcb4 	bl	8000adc <__aeabi_dcmplt>
 800d174:	2800      	cmp	r0, #0
 800d176:	f040 80b5 	bne.w	800d2e4 <_dtoa_r+0x6c4>
 800d17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d17c:	429d      	cmp	r5, r3
 800d17e:	d081      	beq.n	800d084 <_dtoa_r+0x464>
 800d180:	4b30      	ldr	r3, [pc, #192]	; (800d244 <_dtoa_r+0x624>)
 800d182:	2200      	movs	r2, #0
 800d184:	4650      	mov	r0, sl
 800d186:	4659      	mov	r1, fp
 800d188:	f7f3 fa36 	bl	80005f8 <__aeabi_dmul>
 800d18c:	4b2d      	ldr	r3, [pc, #180]	; (800d244 <_dtoa_r+0x624>)
 800d18e:	4682      	mov	sl, r0
 800d190:	468b      	mov	fp, r1
 800d192:	4640      	mov	r0, r8
 800d194:	4649      	mov	r1, r9
 800d196:	2200      	movs	r2, #0
 800d198:	f7f3 fa2e 	bl	80005f8 <__aeabi_dmul>
 800d19c:	4680      	mov	r8, r0
 800d19e:	4689      	mov	r9, r1
 800d1a0:	e7c6      	b.n	800d130 <_dtoa_r+0x510>
 800d1a2:	4650      	mov	r0, sl
 800d1a4:	4659      	mov	r1, fp
 800d1a6:	f7f3 fa27 	bl	80005f8 <__aeabi_dmul>
 800d1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1ac:	9d01      	ldr	r5, [sp, #4]
 800d1ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	468b      	mov	fp, r1
 800d1b4:	4649      	mov	r1, r9
 800d1b6:	4640      	mov	r0, r8
 800d1b8:	f7f3 fcce 	bl	8000b58 <__aeabi_d2iz>
 800d1bc:	4606      	mov	r6, r0
 800d1be:	f7f3 f9b1 	bl	8000524 <__aeabi_i2d>
 800d1c2:	3630      	adds	r6, #48	; 0x30
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4640      	mov	r0, r8
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	f7f3 f85c 	bl	8000288 <__aeabi_dsub>
 800d1d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1d6:	429d      	cmp	r5, r3
 800d1d8:	4680      	mov	r8, r0
 800d1da:	4689      	mov	r9, r1
 800d1dc:	f04f 0200 	mov.w	r2, #0
 800d1e0:	d124      	bne.n	800d22c <_dtoa_r+0x60c>
 800d1e2:	4b1b      	ldr	r3, [pc, #108]	; (800d250 <_dtoa_r+0x630>)
 800d1e4:	4650      	mov	r0, sl
 800d1e6:	4659      	mov	r1, fp
 800d1e8:	f7f3 f850 	bl	800028c <__adddf3>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	f7f3 fc90 	bl	8000b18 <__aeabi_dcmpgt>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d173      	bne.n	800d2e4 <_dtoa_r+0x6c4>
 800d1fc:	4652      	mov	r2, sl
 800d1fe:	465b      	mov	r3, fp
 800d200:	4913      	ldr	r1, [pc, #76]	; (800d250 <_dtoa_r+0x630>)
 800d202:	2000      	movs	r0, #0
 800d204:	f7f3 f840 	bl	8000288 <__aeabi_dsub>
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	4640      	mov	r0, r8
 800d20e:	4649      	mov	r1, r9
 800d210:	f7f3 fc64 	bl	8000adc <__aeabi_dcmplt>
 800d214:	2800      	cmp	r0, #0
 800d216:	f43f af35 	beq.w	800d084 <_dtoa_r+0x464>
 800d21a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d21c:	1e6b      	subs	r3, r5, #1
 800d21e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d220:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d224:	2b30      	cmp	r3, #48	; 0x30
 800d226:	d0f8      	beq.n	800d21a <_dtoa_r+0x5fa>
 800d228:	9700      	str	r7, [sp, #0]
 800d22a:	e049      	b.n	800d2c0 <_dtoa_r+0x6a0>
 800d22c:	4b05      	ldr	r3, [pc, #20]	; (800d244 <_dtoa_r+0x624>)
 800d22e:	f7f3 f9e3 	bl	80005f8 <__aeabi_dmul>
 800d232:	4680      	mov	r8, r0
 800d234:	4689      	mov	r9, r1
 800d236:	e7bd      	b.n	800d1b4 <_dtoa_r+0x594>
 800d238:	08010110 	.word	0x08010110
 800d23c:	080100e8 	.word	0x080100e8
 800d240:	3ff00000 	.word	0x3ff00000
 800d244:	40240000 	.word	0x40240000
 800d248:	401c0000 	.word	0x401c0000
 800d24c:	40140000 	.word	0x40140000
 800d250:	3fe00000 	.word	0x3fe00000
 800d254:	9d01      	ldr	r5, [sp, #4]
 800d256:	4656      	mov	r6, sl
 800d258:	465f      	mov	r7, fp
 800d25a:	4642      	mov	r2, r8
 800d25c:	464b      	mov	r3, r9
 800d25e:	4630      	mov	r0, r6
 800d260:	4639      	mov	r1, r7
 800d262:	f7f3 faf3 	bl	800084c <__aeabi_ddiv>
 800d266:	f7f3 fc77 	bl	8000b58 <__aeabi_d2iz>
 800d26a:	4682      	mov	sl, r0
 800d26c:	f7f3 f95a 	bl	8000524 <__aeabi_i2d>
 800d270:	4642      	mov	r2, r8
 800d272:	464b      	mov	r3, r9
 800d274:	f7f3 f9c0 	bl	80005f8 <__aeabi_dmul>
 800d278:	4602      	mov	r2, r0
 800d27a:	460b      	mov	r3, r1
 800d27c:	4630      	mov	r0, r6
 800d27e:	4639      	mov	r1, r7
 800d280:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d284:	f7f3 f800 	bl	8000288 <__aeabi_dsub>
 800d288:	f805 6b01 	strb.w	r6, [r5], #1
 800d28c:	9e01      	ldr	r6, [sp, #4]
 800d28e:	9f03      	ldr	r7, [sp, #12]
 800d290:	1bae      	subs	r6, r5, r6
 800d292:	42b7      	cmp	r7, r6
 800d294:	4602      	mov	r2, r0
 800d296:	460b      	mov	r3, r1
 800d298:	d135      	bne.n	800d306 <_dtoa_r+0x6e6>
 800d29a:	f7f2 fff7 	bl	800028c <__adddf3>
 800d29e:	4642      	mov	r2, r8
 800d2a0:	464b      	mov	r3, r9
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	f7f3 fc37 	bl	8000b18 <__aeabi_dcmpgt>
 800d2aa:	b9d0      	cbnz	r0, 800d2e2 <_dtoa_r+0x6c2>
 800d2ac:	4642      	mov	r2, r8
 800d2ae:	464b      	mov	r3, r9
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	4639      	mov	r1, r7
 800d2b4:	f7f3 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2b8:	b110      	cbz	r0, 800d2c0 <_dtoa_r+0x6a0>
 800d2ba:	f01a 0f01 	tst.w	sl, #1
 800d2be:	d110      	bne.n	800d2e2 <_dtoa_r+0x6c2>
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	ee18 1a10 	vmov	r1, s16
 800d2c6:	f000 fae5 	bl	800d894 <_Bfree>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	9800      	ldr	r0, [sp, #0]
 800d2ce:	702b      	strb	r3, [r5, #0]
 800d2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	6018      	str	r0, [r3, #0]
 800d2d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f43f acf1 	beq.w	800ccc0 <_dtoa_r+0xa0>
 800d2de:	601d      	str	r5, [r3, #0]
 800d2e0:	e4ee      	b.n	800ccc0 <_dtoa_r+0xa0>
 800d2e2:	9f00      	ldr	r7, [sp, #0]
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	461d      	mov	r5, r3
 800d2e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2ec:	2a39      	cmp	r2, #57	; 0x39
 800d2ee:	d106      	bne.n	800d2fe <_dtoa_r+0x6de>
 800d2f0:	9a01      	ldr	r2, [sp, #4]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d1f7      	bne.n	800d2e6 <_dtoa_r+0x6c6>
 800d2f6:	9901      	ldr	r1, [sp, #4]
 800d2f8:	2230      	movs	r2, #48	; 0x30
 800d2fa:	3701      	adds	r7, #1
 800d2fc:	700a      	strb	r2, [r1, #0]
 800d2fe:	781a      	ldrb	r2, [r3, #0]
 800d300:	3201      	adds	r2, #1
 800d302:	701a      	strb	r2, [r3, #0]
 800d304:	e790      	b.n	800d228 <_dtoa_r+0x608>
 800d306:	4ba6      	ldr	r3, [pc, #664]	; (800d5a0 <_dtoa_r+0x980>)
 800d308:	2200      	movs	r2, #0
 800d30a:	f7f3 f975 	bl	80005f8 <__aeabi_dmul>
 800d30e:	2200      	movs	r2, #0
 800d310:	2300      	movs	r3, #0
 800d312:	4606      	mov	r6, r0
 800d314:	460f      	mov	r7, r1
 800d316:	f7f3 fbd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d09d      	beq.n	800d25a <_dtoa_r+0x63a>
 800d31e:	e7cf      	b.n	800d2c0 <_dtoa_r+0x6a0>
 800d320:	9a08      	ldr	r2, [sp, #32]
 800d322:	2a00      	cmp	r2, #0
 800d324:	f000 80d7 	beq.w	800d4d6 <_dtoa_r+0x8b6>
 800d328:	9a06      	ldr	r2, [sp, #24]
 800d32a:	2a01      	cmp	r2, #1
 800d32c:	f300 80ba 	bgt.w	800d4a4 <_dtoa_r+0x884>
 800d330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d332:	2a00      	cmp	r2, #0
 800d334:	f000 80b2 	beq.w	800d49c <_dtoa_r+0x87c>
 800d338:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d33c:	9e07      	ldr	r6, [sp, #28]
 800d33e:	9d04      	ldr	r5, [sp, #16]
 800d340:	9a04      	ldr	r2, [sp, #16]
 800d342:	441a      	add	r2, r3
 800d344:	9204      	str	r2, [sp, #16]
 800d346:	9a05      	ldr	r2, [sp, #20]
 800d348:	2101      	movs	r1, #1
 800d34a:	441a      	add	r2, r3
 800d34c:	4620      	mov	r0, r4
 800d34e:	9205      	str	r2, [sp, #20]
 800d350:	f000 fb58 	bl	800da04 <__i2b>
 800d354:	4607      	mov	r7, r0
 800d356:	2d00      	cmp	r5, #0
 800d358:	dd0c      	ble.n	800d374 <_dtoa_r+0x754>
 800d35a:	9b05      	ldr	r3, [sp, #20]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	dd09      	ble.n	800d374 <_dtoa_r+0x754>
 800d360:	42ab      	cmp	r3, r5
 800d362:	9a04      	ldr	r2, [sp, #16]
 800d364:	bfa8      	it	ge
 800d366:	462b      	movge	r3, r5
 800d368:	1ad2      	subs	r2, r2, r3
 800d36a:	9204      	str	r2, [sp, #16]
 800d36c:	9a05      	ldr	r2, [sp, #20]
 800d36e:	1aed      	subs	r5, r5, r3
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	9305      	str	r3, [sp, #20]
 800d374:	9b07      	ldr	r3, [sp, #28]
 800d376:	b31b      	cbz	r3, 800d3c0 <_dtoa_r+0x7a0>
 800d378:	9b08      	ldr	r3, [sp, #32]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f000 80af 	beq.w	800d4de <_dtoa_r+0x8be>
 800d380:	2e00      	cmp	r6, #0
 800d382:	dd13      	ble.n	800d3ac <_dtoa_r+0x78c>
 800d384:	4639      	mov	r1, r7
 800d386:	4632      	mov	r2, r6
 800d388:	4620      	mov	r0, r4
 800d38a:	f000 fbfb 	bl	800db84 <__pow5mult>
 800d38e:	ee18 2a10 	vmov	r2, s16
 800d392:	4601      	mov	r1, r0
 800d394:	4607      	mov	r7, r0
 800d396:	4620      	mov	r0, r4
 800d398:	f000 fb4a 	bl	800da30 <__multiply>
 800d39c:	ee18 1a10 	vmov	r1, s16
 800d3a0:	4680      	mov	r8, r0
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f000 fa76 	bl	800d894 <_Bfree>
 800d3a8:	ee08 8a10 	vmov	s16, r8
 800d3ac:	9b07      	ldr	r3, [sp, #28]
 800d3ae:	1b9a      	subs	r2, r3, r6
 800d3b0:	d006      	beq.n	800d3c0 <_dtoa_r+0x7a0>
 800d3b2:	ee18 1a10 	vmov	r1, s16
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 fbe4 	bl	800db84 <__pow5mult>
 800d3bc:	ee08 0a10 	vmov	s16, r0
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 fb1e 	bl	800da04 <__i2b>
 800d3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	4606      	mov	r6, r0
 800d3ce:	f340 8088 	ble.w	800d4e2 <_dtoa_r+0x8c2>
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	4601      	mov	r1, r0
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	f000 fbd4 	bl	800db84 <__pow5mult>
 800d3dc:	9b06      	ldr	r3, [sp, #24]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	4606      	mov	r6, r0
 800d3e2:	f340 8081 	ble.w	800d4e8 <_dtoa_r+0x8c8>
 800d3e6:	f04f 0800 	mov.w	r8, #0
 800d3ea:	6933      	ldr	r3, [r6, #16]
 800d3ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d3f0:	6918      	ldr	r0, [r3, #16]
 800d3f2:	f000 fab7 	bl	800d964 <__hi0bits>
 800d3f6:	f1c0 0020 	rsb	r0, r0, #32
 800d3fa:	9b05      	ldr	r3, [sp, #20]
 800d3fc:	4418      	add	r0, r3
 800d3fe:	f010 001f 	ands.w	r0, r0, #31
 800d402:	f000 8092 	beq.w	800d52a <_dtoa_r+0x90a>
 800d406:	f1c0 0320 	rsb	r3, r0, #32
 800d40a:	2b04      	cmp	r3, #4
 800d40c:	f340 808a 	ble.w	800d524 <_dtoa_r+0x904>
 800d410:	f1c0 001c 	rsb	r0, r0, #28
 800d414:	9b04      	ldr	r3, [sp, #16]
 800d416:	4403      	add	r3, r0
 800d418:	9304      	str	r3, [sp, #16]
 800d41a:	9b05      	ldr	r3, [sp, #20]
 800d41c:	4403      	add	r3, r0
 800d41e:	4405      	add	r5, r0
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	9b04      	ldr	r3, [sp, #16]
 800d424:	2b00      	cmp	r3, #0
 800d426:	dd07      	ble.n	800d438 <_dtoa_r+0x818>
 800d428:	ee18 1a10 	vmov	r1, s16
 800d42c:	461a      	mov	r2, r3
 800d42e:	4620      	mov	r0, r4
 800d430:	f000 fc02 	bl	800dc38 <__lshift>
 800d434:	ee08 0a10 	vmov	s16, r0
 800d438:	9b05      	ldr	r3, [sp, #20]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	dd05      	ble.n	800d44a <_dtoa_r+0x82a>
 800d43e:	4631      	mov	r1, r6
 800d440:	461a      	mov	r2, r3
 800d442:	4620      	mov	r0, r4
 800d444:	f000 fbf8 	bl	800dc38 <__lshift>
 800d448:	4606      	mov	r6, r0
 800d44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d06e      	beq.n	800d52e <_dtoa_r+0x90e>
 800d450:	ee18 0a10 	vmov	r0, s16
 800d454:	4631      	mov	r1, r6
 800d456:	f000 fc5f 	bl	800dd18 <__mcmp>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	da67      	bge.n	800d52e <_dtoa_r+0x90e>
 800d45e:	9b00      	ldr	r3, [sp, #0]
 800d460:	3b01      	subs	r3, #1
 800d462:	ee18 1a10 	vmov	r1, s16
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	220a      	movs	r2, #10
 800d46a:	2300      	movs	r3, #0
 800d46c:	4620      	mov	r0, r4
 800d46e:	f000 fa33 	bl	800d8d8 <__multadd>
 800d472:	9b08      	ldr	r3, [sp, #32]
 800d474:	ee08 0a10 	vmov	s16, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 81b1 	beq.w	800d7e0 <_dtoa_r+0xbc0>
 800d47e:	2300      	movs	r3, #0
 800d480:	4639      	mov	r1, r7
 800d482:	220a      	movs	r2, #10
 800d484:	4620      	mov	r0, r4
 800d486:	f000 fa27 	bl	800d8d8 <__multadd>
 800d48a:	9b02      	ldr	r3, [sp, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	4607      	mov	r7, r0
 800d490:	f300 808e 	bgt.w	800d5b0 <_dtoa_r+0x990>
 800d494:	9b06      	ldr	r3, [sp, #24]
 800d496:	2b02      	cmp	r3, #2
 800d498:	dc51      	bgt.n	800d53e <_dtoa_r+0x91e>
 800d49a:	e089      	b.n	800d5b0 <_dtoa_r+0x990>
 800d49c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d49e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4a2:	e74b      	b.n	800d33c <_dtoa_r+0x71c>
 800d4a4:	9b03      	ldr	r3, [sp, #12]
 800d4a6:	1e5e      	subs	r6, r3, #1
 800d4a8:	9b07      	ldr	r3, [sp, #28]
 800d4aa:	42b3      	cmp	r3, r6
 800d4ac:	bfbf      	itttt	lt
 800d4ae:	9b07      	ldrlt	r3, [sp, #28]
 800d4b0:	9607      	strlt	r6, [sp, #28]
 800d4b2:	1af2      	sublt	r2, r6, r3
 800d4b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d4b6:	bfb6      	itet	lt
 800d4b8:	189b      	addlt	r3, r3, r2
 800d4ba:	1b9e      	subge	r6, r3, r6
 800d4bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	bfb8      	it	lt
 800d4c2:	2600      	movlt	r6, #0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	bfb7      	itett	lt
 800d4c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d4cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d4d0:	1a9d      	sublt	r5, r3, r2
 800d4d2:	2300      	movlt	r3, #0
 800d4d4:	e734      	b.n	800d340 <_dtoa_r+0x720>
 800d4d6:	9e07      	ldr	r6, [sp, #28]
 800d4d8:	9d04      	ldr	r5, [sp, #16]
 800d4da:	9f08      	ldr	r7, [sp, #32]
 800d4dc:	e73b      	b.n	800d356 <_dtoa_r+0x736>
 800d4de:	9a07      	ldr	r2, [sp, #28]
 800d4e0:	e767      	b.n	800d3b2 <_dtoa_r+0x792>
 800d4e2:	9b06      	ldr	r3, [sp, #24]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	dc18      	bgt.n	800d51a <_dtoa_r+0x8fa>
 800d4e8:	f1ba 0f00 	cmp.w	sl, #0
 800d4ec:	d115      	bne.n	800d51a <_dtoa_r+0x8fa>
 800d4ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4f2:	b993      	cbnz	r3, 800d51a <_dtoa_r+0x8fa>
 800d4f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4f8:	0d1b      	lsrs	r3, r3, #20
 800d4fa:	051b      	lsls	r3, r3, #20
 800d4fc:	b183      	cbz	r3, 800d520 <_dtoa_r+0x900>
 800d4fe:	9b04      	ldr	r3, [sp, #16]
 800d500:	3301      	adds	r3, #1
 800d502:	9304      	str	r3, [sp, #16]
 800d504:	9b05      	ldr	r3, [sp, #20]
 800d506:	3301      	adds	r3, #1
 800d508:	9305      	str	r3, [sp, #20]
 800d50a:	f04f 0801 	mov.w	r8, #1
 800d50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d510:	2b00      	cmp	r3, #0
 800d512:	f47f af6a 	bne.w	800d3ea <_dtoa_r+0x7ca>
 800d516:	2001      	movs	r0, #1
 800d518:	e76f      	b.n	800d3fa <_dtoa_r+0x7da>
 800d51a:	f04f 0800 	mov.w	r8, #0
 800d51e:	e7f6      	b.n	800d50e <_dtoa_r+0x8ee>
 800d520:	4698      	mov	r8, r3
 800d522:	e7f4      	b.n	800d50e <_dtoa_r+0x8ee>
 800d524:	f43f af7d 	beq.w	800d422 <_dtoa_r+0x802>
 800d528:	4618      	mov	r0, r3
 800d52a:	301c      	adds	r0, #28
 800d52c:	e772      	b.n	800d414 <_dtoa_r+0x7f4>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	dc37      	bgt.n	800d5a4 <_dtoa_r+0x984>
 800d534:	9b06      	ldr	r3, [sp, #24]
 800d536:	2b02      	cmp	r3, #2
 800d538:	dd34      	ble.n	800d5a4 <_dtoa_r+0x984>
 800d53a:	9b03      	ldr	r3, [sp, #12]
 800d53c:	9302      	str	r3, [sp, #8]
 800d53e:	9b02      	ldr	r3, [sp, #8]
 800d540:	b96b      	cbnz	r3, 800d55e <_dtoa_r+0x93e>
 800d542:	4631      	mov	r1, r6
 800d544:	2205      	movs	r2, #5
 800d546:	4620      	mov	r0, r4
 800d548:	f000 f9c6 	bl	800d8d8 <__multadd>
 800d54c:	4601      	mov	r1, r0
 800d54e:	4606      	mov	r6, r0
 800d550:	ee18 0a10 	vmov	r0, s16
 800d554:	f000 fbe0 	bl	800dd18 <__mcmp>
 800d558:	2800      	cmp	r0, #0
 800d55a:	f73f adbb 	bgt.w	800d0d4 <_dtoa_r+0x4b4>
 800d55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d560:	9d01      	ldr	r5, [sp, #4]
 800d562:	43db      	mvns	r3, r3
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	f04f 0800 	mov.w	r8, #0
 800d56a:	4631      	mov	r1, r6
 800d56c:	4620      	mov	r0, r4
 800d56e:	f000 f991 	bl	800d894 <_Bfree>
 800d572:	2f00      	cmp	r7, #0
 800d574:	f43f aea4 	beq.w	800d2c0 <_dtoa_r+0x6a0>
 800d578:	f1b8 0f00 	cmp.w	r8, #0
 800d57c:	d005      	beq.n	800d58a <_dtoa_r+0x96a>
 800d57e:	45b8      	cmp	r8, r7
 800d580:	d003      	beq.n	800d58a <_dtoa_r+0x96a>
 800d582:	4641      	mov	r1, r8
 800d584:	4620      	mov	r0, r4
 800d586:	f000 f985 	bl	800d894 <_Bfree>
 800d58a:	4639      	mov	r1, r7
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 f981 	bl	800d894 <_Bfree>
 800d592:	e695      	b.n	800d2c0 <_dtoa_r+0x6a0>
 800d594:	2600      	movs	r6, #0
 800d596:	4637      	mov	r7, r6
 800d598:	e7e1      	b.n	800d55e <_dtoa_r+0x93e>
 800d59a:	9700      	str	r7, [sp, #0]
 800d59c:	4637      	mov	r7, r6
 800d59e:	e599      	b.n	800d0d4 <_dtoa_r+0x4b4>
 800d5a0:	40240000 	.word	0x40240000
 800d5a4:	9b08      	ldr	r3, [sp, #32]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 80ca 	beq.w	800d740 <_dtoa_r+0xb20>
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	9302      	str	r3, [sp, #8]
 800d5b0:	2d00      	cmp	r5, #0
 800d5b2:	dd05      	ble.n	800d5c0 <_dtoa_r+0x9a0>
 800d5b4:	4639      	mov	r1, r7
 800d5b6:	462a      	mov	r2, r5
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 fb3d 	bl	800dc38 <__lshift>
 800d5be:	4607      	mov	r7, r0
 800d5c0:	f1b8 0f00 	cmp.w	r8, #0
 800d5c4:	d05b      	beq.n	800d67e <_dtoa_r+0xa5e>
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 f923 	bl	800d814 <_Balloc>
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	b928      	cbnz	r0, 800d5de <_dtoa_r+0x9be>
 800d5d2:	4b87      	ldr	r3, [pc, #540]	; (800d7f0 <_dtoa_r+0xbd0>)
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d5da:	f7ff bb3b 	b.w	800cc54 <_dtoa_r+0x34>
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	3202      	adds	r2, #2
 800d5e2:	0092      	lsls	r2, r2, #2
 800d5e4:	f107 010c 	add.w	r1, r7, #12
 800d5e8:	300c      	adds	r0, #12
 800d5ea:	f7fe fdeb 	bl	800c1c4 <memcpy>
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	4629      	mov	r1, r5
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f000 fb20 	bl	800dc38 <__lshift>
 800d5f8:	9b01      	ldr	r3, [sp, #4]
 800d5fa:	f103 0901 	add.w	r9, r3, #1
 800d5fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d602:	4413      	add	r3, r2
 800d604:	9305      	str	r3, [sp, #20]
 800d606:	f00a 0301 	and.w	r3, sl, #1
 800d60a:	46b8      	mov	r8, r7
 800d60c:	9304      	str	r3, [sp, #16]
 800d60e:	4607      	mov	r7, r0
 800d610:	4631      	mov	r1, r6
 800d612:	ee18 0a10 	vmov	r0, s16
 800d616:	f7ff fa75 	bl	800cb04 <quorem>
 800d61a:	4641      	mov	r1, r8
 800d61c:	9002      	str	r0, [sp, #8]
 800d61e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d622:	ee18 0a10 	vmov	r0, s16
 800d626:	f000 fb77 	bl	800dd18 <__mcmp>
 800d62a:	463a      	mov	r2, r7
 800d62c:	9003      	str	r0, [sp, #12]
 800d62e:	4631      	mov	r1, r6
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fb8d 	bl	800dd50 <__mdiff>
 800d636:	68c2      	ldr	r2, [r0, #12]
 800d638:	f109 3bff 	add.w	fp, r9, #4294967295
 800d63c:	4605      	mov	r5, r0
 800d63e:	bb02      	cbnz	r2, 800d682 <_dtoa_r+0xa62>
 800d640:	4601      	mov	r1, r0
 800d642:	ee18 0a10 	vmov	r0, s16
 800d646:	f000 fb67 	bl	800dd18 <__mcmp>
 800d64a:	4602      	mov	r2, r0
 800d64c:	4629      	mov	r1, r5
 800d64e:	4620      	mov	r0, r4
 800d650:	9207      	str	r2, [sp, #28]
 800d652:	f000 f91f 	bl	800d894 <_Bfree>
 800d656:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d65a:	ea43 0102 	orr.w	r1, r3, r2
 800d65e:	9b04      	ldr	r3, [sp, #16]
 800d660:	430b      	orrs	r3, r1
 800d662:	464d      	mov	r5, r9
 800d664:	d10f      	bne.n	800d686 <_dtoa_r+0xa66>
 800d666:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d66a:	d02a      	beq.n	800d6c2 <_dtoa_r+0xaa2>
 800d66c:	9b03      	ldr	r3, [sp, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	dd02      	ble.n	800d678 <_dtoa_r+0xa58>
 800d672:	9b02      	ldr	r3, [sp, #8]
 800d674:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d678:	f88b a000 	strb.w	sl, [fp]
 800d67c:	e775      	b.n	800d56a <_dtoa_r+0x94a>
 800d67e:	4638      	mov	r0, r7
 800d680:	e7ba      	b.n	800d5f8 <_dtoa_r+0x9d8>
 800d682:	2201      	movs	r2, #1
 800d684:	e7e2      	b.n	800d64c <_dtoa_r+0xa2c>
 800d686:	9b03      	ldr	r3, [sp, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	db04      	blt.n	800d696 <_dtoa_r+0xa76>
 800d68c:	9906      	ldr	r1, [sp, #24]
 800d68e:	430b      	orrs	r3, r1
 800d690:	9904      	ldr	r1, [sp, #16]
 800d692:	430b      	orrs	r3, r1
 800d694:	d122      	bne.n	800d6dc <_dtoa_r+0xabc>
 800d696:	2a00      	cmp	r2, #0
 800d698:	ddee      	ble.n	800d678 <_dtoa_r+0xa58>
 800d69a:	ee18 1a10 	vmov	r1, s16
 800d69e:	2201      	movs	r2, #1
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f000 fac9 	bl	800dc38 <__lshift>
 800d6a6:	4631      	mov	r1, r6
 800d6a8:	ee08 0a10 	vmov	s16, r0
 800d6ac:	f000 fb34 	bl	800dd18 <__mcmp>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	dc03      	bgt.n	800d6bc <_dtoa_r+0xa9c>
 800d6b4:	d1e0      	bne.n	800d678 <_dtoa_r+0xa58>
 800d6b6:	f01a 0f01 	tst.w	sl, #1
 800d6ba:	d0dd      	beq.n	800d678 <_dtoa_r+0xa58>
 800d6bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6c0:	d1d7      	bne.n	800d672 <_dtoa_r+0xa52>
 800d6c2:	2339      	movs	r3, #57	; 0x39
 800d6c4:	f88b 3000 	strb.w	r3, [fp]
 800d6c8:	462b      	mov	r3, r5
 800d6ca:	461d      	mov	r5, r3
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6d2:	2a39      	cmp	r2, #57	; 0x39
 800d6d4:	d071      	beq.n	800d7ba <_dtoa_r+0xb9a>
 800d6d6:	3201      	adds	r2, #1
 800d6d8:	701a      	strb	r2, [r3, #0]
 800d6da:	e746      	b.n	800d56a <_dtoa_r+0x94a>
 800d6dc:	2a00      	cmp	r2, #0
 800d6de:	dd07      	ble.n	800d6f0 <_dtoa_r+0xad0>
 800d6e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6e4:	d0ed      	beq.n	800d6c2 <_dtoa_r+0xaa2>
 800d6e6:	f10a 0301 	add.w	r3, sl, #1
 800d6ea:	f88b 3000 	strb.w	r3, [fp]
 800d6ee:	e73c      	b.n	800d56a <_dtoa_r+0x94a>
 800d6f0:	9b05      	ldr	r3, [sp, #20]
 800d6f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d6f6:	4599      	cmp	r9, r3
 800d6f8:	d047      	beq.n	800d78a <_dtoa_r+0xb6a>
 800d6fa:	ee18 1a10 	vmov	r1, s16
 800d6fe:	2300      	movs	r3, #0
 800d700:	220a      	movs	r2, #10
 800d702:	4620      	mov	r0, r4
 800d704:	f000 f8e8 	bl	800d8d8 <__multadd>
 800d708:	45b8      	cmp	r8, r7
 800d70a:	ee08 0a10 	vmov	s16, r0
 800d70e:	f04f 0300 	mov.w	r3, #0
 800d712:	f04f 020a 	mov.w	r2, #10
 800d716:	4641      	mov	r1, r8
 800d718:	4620      	mov	r0, r4
 800d71a:	d106      	bne.n	800d72a <_dtoa_r+0xb0a>
 800d71c:	f000 f8dc 	bl	800d8d8 <__multadd>
 800d720:	4680      	mov	r8, r0
 800d722:	4607      	mov	r7, r0
 800d724:	f109 0901 	add.w	r9, r9, #1
 800d728:	e772      	b.n	800d610 <_dtoa_r+0x9f0>
 800d72a:	f000 f8d5 	bl	800d8d8 <__multadd>
 800d72e:	4639      	mov	r1, r7
 800d730:	4680      	mov	r8, r0
 800d732:	2300      	movs	r3, #0
 800d734:	220a      	movs	r2, #10
 800d736:	4620      	mov	r0, r4
 800d738:	f000 f8ce 	bl	800d8d8 <__multadd>
 800d73c:	4607      	mov	r7, r0
 800d73e:	e7f1      	b.n	800d724 <_dtoa_r+0xb04>
 800d740:	9b03      	ldr	r3, [sp, #12]
 800d742:	9302      	str	r3, [sp, #8]
 800d744:	9d01      	ldr	r5, [sp, #4]
 800d746:	ee18 0a10 	vmov	r0, s16
 800d74a:	4631      	mov	r1, r6
 800d74c:	f7ff f9da 	bl	800cb04 <quorem>
 800d750:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d754:	9b01      	ldr	r3, [sp, #4]
 800d756:	f805 ab01 	strb.w	sl, [r5], #1
 800d75a:	1aea      	subs	r2, r5, r3
 800d75c:	9b02      	ldr	r3, [sp, #8]
 800d75e:	4293      	cmp	r3, r2
 800d760:	dd09      	ble.n	800d776 <_dtoa_r+0xb56>
 800d762:	ee18 1a10 	vmov	r1, s16
 800d766:	2300      	movs	r3, #0
 800d768:	220a      	movs	r2, #10
 800d76a:	4620      	mov	r0, r4
 800d76c:	f000 f8b4 	bl	800d8d8 <__multadd>
 800d770:	ee08 0a10 	vmov	s16, r0
 800d774:	e7e7      	b.n	800d746 <_dtoa_r+0xb26>
 800d776:	9b02      	ldr	r3, [sp, #8]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	bfc8      	it	gt
 800d77c:	461d      	movgt	r5, r3
 800d77e:	9b01      	ldr	r3, [sp, #4]
 800d780:	bfd8      	it	le
 800d782:	2501      	movle	r5, #1
 800d784:	441d      	add	r5, r3
 800d786:	f04f 0800 	mov.w	r8, #0
 800d78a:	ee18 1a10 	vmov	r1, s16
 800d78e:	2201      	movs	r2, #1
 800d790:	4620      	mov	r0, r4
 800d792:	f000 fa51 	bl	800dc38 <__lshift>
 800d796:	4631      	mov	r1, r6
 800d798:	ee08 0a10 	vmov	s16, r0
 800d79c:	f000 fabc 	bl	800dd18 <__mcmp>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	dc91      	bgt.n	800d6c8 <_dtoa_r+0xaa8>
 800d7a4:	d102      	bne.n	800d7ac <_dtoa_r+0xb8c>
 800d7a6:	f01a 0f01 	tst.w	sl, #1
 800d7aa:	d18d      	bne.n	800d6c8 <_dtoa_r+0xaa8>
 800d7ac:	462b      	mov	r3, r5
 800d7ae:	461d      	mov	r5, r3
 800d7b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7b4:	2a30      	cmp	r2, #48	; 0x30
 800d7b6:	d0fa      	beq.n	800d7ae <_dtoa_r+0xb8e>
 800d7b8:	e6d7      	b.n	800d56a <_dtoa_r+0x94a>
 800d7ba:	9a01      	ldr	r2, [sp, #4]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d184      	bne.n	800d6ca <_dtoa_r+0xaaa>
 800d7c0:	9b00      	ldr	r3, [sp, #0]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	2331      	movs	r3, #49	; 0x31
 800d7c8:	7013      	strb	r3, [r2, #0]
 800d7ca:	e6ce      	b.n	800d56a <_dtoa_r+0x94a>
 800d7cc:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <_dtoa_r+0xbd4>)
 800d7ce:	f7ff ba95 	b.w	800ccfc <_dtoa_r+0xdc>
 800d7d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f47f aa6e 	bne.w	800ccb6 <_dtoa_r+0x96>
 800d7da:	4b07      	ldr	r3, [pc, #28]	; (800d7f8 <_dtoa_r+0xbd8>)
 800d7dc:	f7ff ba8e 	b.w	800ccfc <_dtoa_r+0xdc>
 800d7e0:	9b02      	ldr	r3, [sp, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	dcae      	bgt.n	800d744 <_dtoa_r+0xb24>
 800d7e6:	9b06      	ldr	r3, [sp, #24]
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	f73f aea8 	bgt.w	800d53e <_dtoa_r+0x91e>
 800d7ee:	e7a9      	b.n	800d744 <_dtoa_r+0xb24>
 800d7f0:	0801007b 	.word	0x0801007b
 800d7f4:	0800ffd8 	.word	0x0800ffd8
 800d7f8:	0800fffc 	.word	0x0800fffc

0800d7fc <_localeconv_r>:
 800d7fc:	4800      	ldr	r0, [pc, #0]	; (800d800 <_localeconv_r+0x4>)
 800d7fe:	4770      	bx	lr
 800d800:	20000174 	.word	0x20000174

0800d804 <malloc>:
 800d804:	4b02      	ldr	r3, [pc, #8]	; (800d810 <malloc+0xc>)
 800d806:	4601      	mov	r1, r0
 800d808:	6818      	ldr	r0, [r3, #0]
 800d80a:	f000 bc09 	b.w	800e020 <_malloc_r>
 800d80e:	bf00      	nop
 800d810:	20000020 	.word	0x20000020

0800d814 <_Balloc>:
 800d814:	b570      	push	{r4, r5, r6, lr}
 800d816:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d818:	4604      	mov	r4, r0
 800d81a:	460d      	mov	r5, r1
 800d81c:	b976      	cbnz	r6, 800d83c <_Balloc+0x28>
 800d81e:	2010      	movs	r0, #16
 800d820:	f7ff fff0 	bl	800d804 <malloc>
 800d824:	4602      	mov	r2, r0
 800d826:	6260      	str	r0, [r4, #36]	; 0x24
 800d828:	b920      	cbnz	r0, 800d834 <_Balloc+0x20>
 800d82a:	4b18      	ldr	r3, [pc, #96]	; (800d88c <_Balloc+0x78>)
 800d82c:	4818      	ldr	r0, [pc, #96]	; (800d890 <_Balloc+0x7c>)
 800d82e:	2166      	movs	r1, #102	; 0x66
 800d830:	f000 fdd6 	bl	800e3e0 <__assert_func>
 800d834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d838:	6006      	str	r6, [r0, #0]
 800d83a:	60c6      	str	r6, [r0, #12]
 800d83c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d83e:	68f3      	ldr	r3, [r6, #12]
 800d840:	b183      	cbz	r3, 800d864 <_Balloc+0x50>
 800d842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d84a:	b9b8      	cbnz	r0, 800d87c <_Balloc+0x68>
 800d84c:	2101      	movs	r1, #1
 800d84e:	fa01 f605 	lsl.w	r6, r1, r5
 800d852:	1d72      	adds	r2, r6, #5
 800d854:	0092      	lsls	r2, r2, #2
 800d856:	4620      	mov	r0, r4
 800d858:	f000 fb60 	bl	800df1c <_calloc_r>
 800d85c:	b160      	cbz	r0, 800d878 <_Balloc+0x64>
 800d85e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d862:	e00e      	b.n	800d882 <_Balloc+0x6e>
 800d864:	2221      	movs	r2, #33	; 0x21
 800d866:	2104      	movs	r1, #4
 800d868:	4620      	mov	r0, r4
 800d86a:	f000 fb57 	bl	800df1c <_calloc_r>
 800d86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d870:	60f0      	str	r0, [r6, #12]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1e4      	bne.n	800d842 <_Balloc+0x2e>
 800d878:	2000      	movs	r0, #0
 800d87a:	bd70      	pop	{r4, r5, r6, pc}
 800d87c:	6802      	ldr	r2, [r0, #0]
 800d87e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d882:	2300      	movs	r3, #0
 800d884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d888:	e7f7      	b.n	800d87a <_Balloc+0x66>
 800d88a:	bf00      	nop
 800d88c:	08010009 	.word	0x08010009
 800d890:	0801008c 	.word	0x0801008c

0800d894 <_Bfree>:
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d898:	4605      	mov	r5, r0
 800d89a:	460c      	mov	r4, r1
 800d89c:	b976      	cbnz	r6, 800d8bc <_Bfree+0x28>
 800d89e:	2010      	movs	r0, #16
 800d8a0:	f7ff ffb0 	bl	800d804 <malloc>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	6268      	str	r0, [r5, #36]	; 0x24
 800d8a8:	b920      	cbnz	r0, 800d8b4 <_Bfree+0x20>
 800d8aa:	4b09      	ldr	r3, [pc, #36]	; (800d8d0 <_Bfree+0x3c>)
 800d8ac:	4809      	ldr	r0, [pc, #36]	; (800d8d4 <_Bfree+0x40>)
 800d8ae:	218a      	movs	r1, #138	; 0x8a
 800d8b0:	f000 fd96 	bl	800e3e0 <__assert_func>
 800d8b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8b8:	6006      	str	r6, [r0, #0]
 800d8ba:	60c6      	str	r6, [r0, #12]
 800d8bc:	b13c      	cbz	r4, 800d8ce <_Bfree+0x3a>
 800d8be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d8c0:	6862      	ldr	r2, [r4, #4]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8c8:	6021      	str	r1, [r4, #0]
 800d8ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8ce:	bd70      	pop	{r4, r5, r6, pc}
 800d8d0:	08010009 	.word	0x08010009
 800d8d4:	0801008c 	.word	0x0801008c

0800d8d8 <__multadd>:
 800d8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8dc:	690d      	ldr	r5, [r1, #16]
 800d8de:	4607      	mov	r7, r0
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	461e      	mov	r6, r3
 800d8e4:	f101 0c14 	add.w	ip, r1, #20
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f8dc 3000 	ldr.w	r3, [ip]
 800d8ee:	b299      	uxth	r1, r3
 800d8f0:	fb02 6101 	mla	r1, r2, r1, r6
 800d8f4:	0c1e      	lsrs	r6, r3, #16
 800d8f6:	0c0b      	lsrs	r3, r1, #16
 800d8f8:	fb02 3306 	mla	r3, r2, r6, r3
 800d8fc:	b289      	uxth	r1, r1
 800d8fe:	3001      	adds	r0, #1
 800d900:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d904:	4285      	cmp	r5, r0
 800d906:	f84c 1b04 	str.w	r1, [ip], #4
 800d90a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d90e:	dcec      	bgt.n	800d8ea <__multadd+0x12>
 800d910:	b30e      	cbz	r6, 800d956 <__multadd+0x7e>
 800d912:	68a3      	ldr	r3, [r4, #8]
 800d914:	42ab      	cmp	r3, r5
 800d916:	dc19      	bgt.n	800d94c <__multadd+0x74>
 800d918:	6861      	ldr	r1, [r4, #4]
 800d91a:	4638      	mov	r0, r7
 800d91c:	3101      	adds	r1, #1
 800d91e:	f7ff ff79 	bl	800d814 <_Balloc>
 800d922:	4680      	mov	r8, r0
 800d924:	b928      	cbnz	r0, 800d932 <__multadd+0x5a>
 800d926:	4602      	mov	r2, r0
 800d928:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <__multadd+0x84>)
 800d92a:	480d      	ldr	r0, [pc, #52]	; (800d960 <__multadd+0x88>)
 800d92c:	21b5      	movs	r1, #181	; 0xb5
 800d92e:	f000 fd57 	bl	800e3e0 <__assert_func>
 800d932:	6922      	ldr	r2, [r4, #16]
 800d934:	3202      	adds	r2, #2
 800d936:	f104 010c 	add.w	r1, r4, #12
 800d93a:	0092      	lsls	r2, r2, #2
 800d93c:	300c      	adds	r0, #12
 800d93e:	f7fe fc41 	bl	800c1c4 <memcpy>
 800d942:	4621      	mov	r1, r4
 800d944:	4638      	mov	r0, r7
 800d946:	f7ff ffa5 	bl	800d894 <_Bfree>
 800d94a:	4644      	mov	r4, r8
 800d94c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d950:	3501      	adds	r5, #1
 800d952:	615e      	str	r6, [r3, #20]
 800d954:	6125      	str	r5, [r4, #16]
 800d956:	4620      	mov	r0, r4
 800d958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d95c:	0801007b 	.word	0x0801007b
 800d960:	0801008c 	.word	0x0801008c

0800d964 <__hi0bits>:
 800d964:	0c03      	lsrs	r3, r0, #16
 800d966:	041b      	lsls	r3, r3, #16
 800d968:	b9d3      	cbnz	r3, 800d9a0 <__hi0bits+0x3c>
 800d96a:	0400      	lsls	r0, r0, #16
 800d96c:	2310      	movs	r3, #16
 800d96e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d972:	bf04      	itt	eq
 800d974:	0200      	lsleq	r0, r0, #8
 800d976:	3308      	addeq	r3, #8
 800d978:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d97c:	bf04      	itt	eq
 800d97e:	0100      	lsleq	r0, r0, #4
 800d980:	3304      	addeq	r3, #4
 800d982:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d986:	bf04      	itt	eq
 800d988:	0080      	lsleq	r0, r0, #2
 800d98a:	3302      	addeq	r3, #2
 800d98c:	2800      	cmp	r0, #0
 800d98e:	db05      	blt.n	800d99c <__hi0bits+0x38>
 800d990:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d994:	f103 0301 	add.w	r3, r3, #1
 800d998:	bf08      	it	eq
 800d99a:	2320      	moveq	r3, #32
 800d99c:	4618      	mov	r0, r3
 800d99e:	4770      	bx	lr
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e7e4      	b.n	800d96e <__hi0bits+0xa>

0800d9a4 <__lo0bits>:
 800d9a4:	6803      	ldr	r3, [r0, #0]
 800d9a6:	f013 0207 	ands.w	r2, r3, #7
 800d9aa:	4601      	mov	r1, r0
 800d9ac:	d00b      	beq.n	800d9c6 <__lo0bits+0x22>
 800d9ae:	07da      	lsls	r2, r3, #31
 800d9b0:	d423      	bmi.n	800d9fa <__lo0bits+0x56>
 800d9b2:	0798      	lsls	r0, r3, #30
 800d9b4:	bf49      	itett	mi
 800d9b6:	085b      	lsrmi	r3, r3, #1
 800d9b8:	089b      	lsrpl	r3, r3, #2
 800d9ba:	2001      	movmi	r0, #1
 800d9bc:	600b      	strmi	r3, [r1, #0]
 800d9be:	bf5c      	itt	pl
 800d9c0:	600b      	strpl	r3, [r1, #0]
 800d9c2:	2002      	movpl	r0, #2
 800d9c4:	4770      	bx	lr
 800d9c6:	b298      	uxth	r0, r3
 800d9c8:	b9a8      	cbnz	r0, 800d9f6 <__lo0bits+0x52>
 800d9ca:	0c1b      	lsrs	r3, r3, #16
 800d9cc:	2010      	movs	r0, #16
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	b90a      	cbnz	r2, 800d9d6 <__lo0bits+0x32>
 800d9d2:	3008      	adds	r0, #8
 800d9d4:	0a1b      	lsrs	r3, r3, #8
 800d9d6:	071a      	lsls	r2, r3, #28
 800d9d8:	bf04      	itt	eq
 800d9da:	091b      	lsreq	r3, r3, #4
 800d9dc:	3004      	addeq	r0, #4
 800d9de:	079a      	lsls	r2, r3, #30
 800d9e0:	bf04      	itt	eq
 800d9e2:	089b      	lsreq	r3, r3, #2
 800d9e4:	3002      	addeq	r0, #2
 800d9e6:	07da      	lsls	r2, r3, #31
 800d9e8:	d403      	bmi.n	800d9f2 <__lo0bits+0x4e>
 800d9ea:	085b      	lsrs	r3, r3, #1
 800d9ec:	f100 0001 	add.w	r0, r0, #1
 800d9f0:	d005      	beq.n	800d9fe <__lo0bits+0x5a>
 800d9f2:	600b      	str	r3, [r1, #0]
 800d9f4:	4770      	bx	lr
 800d9f6:	4610      	mov	r0, r2
 800d9f8:	e7e9      	b.n	800d9ce <__lo0bits+0x2a>
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	4770      	bx	lr
 800d9fe:	2020      	movs	r0, #32
 800da00:	4770      	bx	lr
	...

0800da04 <__i2b>:
 800da04:	b510      	push	{r4, lr}
 800da06:	460c      	mov	r4, r1
 800da08:	2101      	movs	r1, #1
 800da0a:	f7ff ff03 	bl	800d814 <_Balloc>
 800da0e:	4602      	mov	r2, r0
 800da10:	b928      	cbnz	r0, 800da1e <__i2b+0x1a>
 800da12:	4b05      	ldr	r3, [pc, #20]	; (800da28 <__i2b+0x24>)
 800da14:	4805      	ldr	r0, [pc, #20]	; (800da2c <__i2b+0x28>)
 800da16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800da1a:	f000 fce1 	bl	800e3e0 <__assert_func>
 800da1e:	2301      	movs	r3, #1
 800da20:	6144      	str	r4, [r0, #20]
 800da22:	6103      	str	r3, [r0, #16]
 800da24:	bd10      	pop	{r4, pc}
 800da26:	bf00      	nop
 800da28:	0801007b 	.word	0x0801007b
 800da2c:	0801008c 	.word	0x0801008c

0800da30 <__multiply>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	4691      	mov	r9, r2
 800da36:	690a      	ldr	r2, [r1, #16]
 800da38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	bfb8      	it	lt
 800da40:	460b      	movlt	r3, r1
 800da42:	460c      	mov	r4, r1
 800da44:	bfbc      	itt	lt
 800da46:	464c      	movlt	r4, r9
 800da48:	4699      	movlt	r9, r3
 800da4a:	6927      	ldr	r7, [r4, #16]
 800da4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da50:	68a3      	ldr	r3, [r4, #8]
 800da52:	6861      	ldr	r1, [r4, #4]
 800da54:	eb07 060a 	add.w	r6, r7, sl
 800da58:	42b3      	cmp	r3, r6
 800da5a:	b085      	sub	sp, #20
 800da5c:	bfb8      	it	lt
 800da5e:	3101      	addlt	r1, #1
 800da60:	f7ff fed8 	bl	800d814 <_Balloc>
 800da64:	b930      	cbnz	r0, 800da74 <__multiply+0x44>
 800da66:	4602      	mov	r2, r0
 800da68:	4b44      	ldr	r3, [pc, #272]	; (800db7c <__multiply+0x14c>)
 800da6a:	4845      	ldr	r0, [pc, #276]	; (800db80 <__multiply+0x150>)
 800da6c:	f240 115d 	movw	r1, #349	; 0x15d
 800da70:	f000 fcb6 	bl	800e3e0 <__assert_func>
 800da74:	f100 0514 	add.w	r5, r0, #20
 800da78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da7c:	462b      	mov	r3, r5
 800da7e:	2200      	movs	r2, #0
 800da80:	4543      	cmp	r3, r8
 800da82:	d321      	bcc.n	800dac8 <__multiply+0x98>
 800da84:	f104 0314 	add.w	r3, r4, #20
 800da88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da8c:	f109 0314 	add.w	r3, r9, #20
 800da90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da94:	9202      	str	r2, [sp, #8]
 800da96:	1b3a      	subs	r2, r7, r4
 800da98:	3a15      	subs	r2, #21
 800da9a:	f022 0203 	bic.w	r2, r2, #3
 800da9e:	3204      	adds	r2, #4
 800daa0:	f104 0115 	add.w	r1, r4, #21
 800daa4:	428f      	cmp	r7, r1
 800daa6:	bf38      	it	cc
 800daa8:	2204      	movcc	r2, #4
 800daaa:	9201      	str	r2, [sp, #4]
 800daac:	9a02      	ldr	r2, [sp, #8]
 800daae:	9303      	str	r3, [sp, #12]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d80c      	bhi.n	800dace <__multiply+0x9e>
 800dab4:	2e00      	cmp	r6, #0
 800dab6:	dd03      	ble.n	800dac0 <__multiply+0x90>
 800dab8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d05a      	beq.n	800db76 <__multiply+0x146>
 800dac0:	6106      	str	r6, [r0, #16]
 800dac2:	b005      	add	sp, #20
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	f843 2b04 	str.w	r2, [r3], #4
 800dacc:	e7d8      	b.n	800da80 <__multiply+0x50>
 800dace:	f8b3 a000 	ldrh.w	sl, [r3]
 800dad2:	f1ba 0f00 	cmp.w	sl, #0
 800dad6:	d024      	beq.n	800db22 <__multiply+0xf2>
 800dad8:	f104 0e14 	add.w	lr, r4, #20
 800dadc:	46a9      	mov	r9, r5
 800dade:	f04f 0c00 	mov.w	ip, #0
 800dae2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dae6:	f8d9 1000 	ldr.w	r1, [r9]
 800daea:	fa1f fb82 	uxth.w	fp, r2
 800daee:	b289      	uxth	r1, r1
 800daf0:	fb0a 110b 	mla	r1, sl, fp, r1
 800daf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800daf8:	f8d9 2000 	ldr.w	r2, [r9]
 800dafc:	4461      	add	r1, ip
 800dafe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db02:	fb0a c20b 	mla	r2, sl, fp, ip
 800db06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800db0a:	b289      	uxth	r1, r1
 800db0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db10:	4577      	cmp	r7, lr
 800db12:	f849 1b04 	str.w	r1, [r9], #4
 800db16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db1a:	d8e2      	bhi.n	800dae2 <__multiply+0xb2>
 800db1c:	9a01      	ldr	r2, [sp, #4]
 800db1e:	f845 c002 	str.w	ip, [r5, r2]
 800db22:	9a03      	ldr	r2, [sp, #12]
 800db24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800db28:	3304      	adds	r3, #4
 800db2a:	f1b9 0f00 	cmp.w	r9, #0
 800db2e:	d020      	beq.n	800db72 <__multiply+0x142>
 800db30:	6829      	ldr	r1, [r5, #0]
 800db32:	f104 0c14 	add.w	ip, r4, #20
 800db36:	46ae      	mov	lr, r5
 800db38:	f04f 0a00 	mov.w	sl, #0
 800db3c:	f8bc b000 	ldrh.w	fp, [ip]
 800db40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800db44:	fb09 220b 	mla	r2, r9, fp, r2
 800db48:	4492      	add	sl, r2
 800db4a:	b289      	uxth	r1, r1
 800db4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800db50:	f84e 1b04 	str.w	r1, [lr], #4
 800db54:	f85c 2b04 	ldr.w	r2, [ip], #4
 800db58:	f8be 1000 	ldrh.w	r1, [lr]
 800db5c:	0c12      	lsrs	r2, r2, #16
 800db5e:	fb09 1102 	mla	r1, r9, r2, r1
 800db62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800db66:	4567      	cmp	r7, ip
 800db68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db6c:	d8e6      	bhi.n	800db3c <__multiply+0x10c>
 800db6e:	9a01      	ldr	r2, [sp, #4]
 800db70:	50a9      	str	r1, [r5, r2]
 800db72:	3504      	adds	r5, #4
 800db74:	e79a      	b.n	800daac <__multiply+0x7c>
 800db76:	3e01      	subs	r6, #1
 800db78:	e79c      	b.n	800dab4 <__multiply+0x84>
 800db7a:	bf00      	nop
 800db7c:	0801007b 	.word	0x0801007b
 800db80:	0801008c 	.word	0x0801008c

0800db84 <__pow5mult>:
 800db84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db88:	4615      	mov	r5, r2
 800db8a:	f012 0203 	ands.w	r2, r2, #3
 800db8e:	4606      	mov	r6, r0
 800db90:	460f      	mov	r7, r1
 800db92:	d007      	beq.n	800dba4 <__pow5mult+0x20>
 800db94:	4c25      	ldr	r4, [pc, #148]	; (800dc2c <__pow5mult+0xa8>)
 800db96:	3a01      	subs	r2, #1
 800db98:	2300      	movs	r3, #0
 800db9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db9e:	f7ff fe9b 	bl	800d8d8 <__multadd>
 800dba2:	4607      	mov	r7, r0
 800dba4:	10ad      	asrs	r5, r5, #2
 800dba6:	d03d      	beq.n	800dc24 <__pow5mult+0xa0>
 800dba8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dbaa:	b97c      	cbnz	r4, 800dbcc <__pow5mult+0x48>
 800dbac:	2010      	movs	r0, #16
 800dbae:	f7ff fe29 	bl	800d804 <malloc>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	6270      	str	r0, [r6, #36]	; 0x24
 800dbb6:	b928      	cbnz	r0, 800dbc4 <__pow5mult+0x40>
 800dbb8:	4b1d      	ldr	r3, [pc, #116]	; (800dc30 <__pow5mult+0xac>)
 800dbba:	481e      	ldr	r0, [pc, #120]	; (800dc34 <__pow5mult+0xb0>)
 800dbbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dbc0:	f000 fc0e 	bl	800e3e0 <__assert_func>
 800dbc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbc8:	6004      	str	r4, [r0, #0]
 800dbca:	60c4      	str	r4, [r0, #12]
 800dbcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dbd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dbd4:	b94c      	cbnz	r4, 800dbea <__pow5mult+0x66>
 800dbd6:	f240 2171 	movw	r1, #625	; 0x271
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f7ff ff12 	bl	800da04 <__i2b>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	6003      	str	r3, [r0, #0]
 800dbea:	f04f 0900 	mov.w	r9, #0
 800dbee:	07eb      	lsls	r3, r5, #31
 800dbf0:	d50a      	bpl.n	800dc08 <__pow5mult+0x84>
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	4622      	mov	r2, r4
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	f7ff ff1a 	bl	800da30 <__multiply>
 800dbfc:	4639      	mov	r1, r7
 800dbfe:	4680      	mov	r8, r0
 800dc00:	4630      	mov	r0, r6
 800dc02:	f7ff fe47 	bl	800d894 <_Bfree>
 800dc06:	4647      	mov	r7, r8
 800dc08:	106d      	asrs	r5, r5, #1
 800dc0a:	d00b      	beq.n	800dc24 <__pow5mult+0xa0>
 800dc0c:	6820      	ldr	r0, [r4, #0]
 800dc0e:	b938      	cbnz	r0, 800dc20 <__pow5mult+0x9c>
 800dc10:	4622      	mov	r2, r4
 800dc12:	4621      	mov	r1, r4
 800dc14:	4630      	mov	r0, r6
 800dc16:	f7ff ff0b 	bl	800da30 <__multiply>
 800dc1a:	6020      	str	r0, [r4, #0]
 800dc1c:	f8c0 9000 	str.w	r9, [r0]
 800dc20:	4604      	mov	r4, r0
 800dc22:	e7e4      	b.n	800dbee <__pow5mult+0x6a>
 800dc24:	4638      	mov	r0, r7
 800dc26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc2a:	bf00      	nop
 800dc2c:	080101d8 	.word	0x080101d8
 800dc30:	08010009 	.word	0x08010009
 800dc34:	0801008c 	.word	0x0801008c

0800dc38 <__lshift>:
 800dc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	6849      	ldr	r1, [r1, #4]
 800dc40:	6923      	ldr	r3, [r4, #16]
 800dc42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc46:	68a3      	ldr	r3, [r4, #8]
 800dc48:	4607      	mov	r7, r0
 800dc4a:	4691      	mov	r9, r2
 800dc4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc50:	f108 0601 	add.w	r6, r8, #1
 800dc54:	42b3      	cmp	r3, r6
 800dc56:	db0b      	blt.n	800dc70 <__lshift+0x38>
 800dc58:	4638      	mov	r0, r7
 800dc5a:	f7ff fddb 	bl	800d814 <_Balloc>
 800dc5e:	4605      	mov	r5, r0
 800dc60:	b948      	cbnz	r0, 800dc76 <__lshift+0x3e>
 800dc62:	4602      	mov	r2, r0
 800dc64:	4b2a      	ldr	r3, [pc, #168]	; (800dd10 <__lshift+0xd8>)
 800dc66:	482b      	ldr	r0, [pc, #172]	; (800dd14 <__lshift+0xdc>)
 800dc68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dc6c:	f000 fbb8 	bl	800e3e0 <__assert_func>
 800dc70:	3101      	adds	r1, #1
 800dc72:	005b      	lsls	r3, r3, #1
 800dc74:	e7ee      	b.n	800dc54 <__lshift+0x1c>
 800dc76:	2300      	movs	r3, #0
 800dc78:	f100 0114 	add.w	r1, r0, #20
 800dc7c:	f100 0210 	add.w	r2, r0, #16
 800dc80:	4618      	mov	r0, r3
 800dc82:	4553      	cmp	r3, sl
 800dc84:	db37      	blt.n	800dcf6 <__lshift+0xbe>
 800dc86:	6920      	ldr	r0, [r4, #16]
 800dc88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc8c:	f104 0314 	add.w	r3, r4, #20
 800dc90:	f019 091f 	ands.w	r9, r9, #31
 800dc94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc9c:	d02f      	beq.n	800dcfe <__lshift+0xc6>
 800dc9e:	f1c9 0e20 	rsb	lr, r9, #32
 800dca2:	468a      	mov	sl, r1
 800dca4:	f04f 0c00 	mov.w	ip, #0
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	fa02 f209 	lsl.w	r2, r2, r9
 800dcae:	ea42 020c 	orr.w	r2, r2, ip
 800dcb2:	f84a 2b04 	str.w	r2, [sl], #4
 800dcb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcba:	4298      	cmp	r0, r3
 800dcbc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dcc0:	d8f2      	bhi.n	800dca8 <__lshift+0x70>
 800dcc2:	1b03      	subs	r3, r0, r4
 800dcc4:	3b15      	subs	r3, #21
 800dcc6:	f023 0303 	bic.w	r3, r3, #3
 800dcca:	3304      	adds	r3, #4
 800dccc:	f104 0215 	add.w	r2, r4, #21
 800dcd0:	4290      	cmp	r0, r2
 800dcd2:	bf38      	it	cc
 800dcd4:	2304      	movcc	r3, #4
 800dcd6:	f841 c003 	str.w	ip, [r1, r3]
 800dcda:	f1bc 0f00 	cmp.w	ip, #0
 800dcde:	d001      	beq.n	800dce4 <__lshift+0xac>
 800dce0:	f108 0602 	add.w	r6, r8, #2
 800dce4:	3e01      	subs	r6, #1
 800dce6:	4638      	mov	r0, r7
 800dce8:	612e      	str	r6, [r5, #16]
 800dcea:	4621      	mov	r1, r4
 800dcec:	f7ff fdd2 	bl	800d894 <_Bfree>
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	e7c1      	b.n	800dc82 <__lshift+0x4a>
 800dcfe:	3904      	subs	r1, #4
 800dd00:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd04:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd08:	4298      	cmp	r0, r3
 800dd0a:	d8f9      	bhi.n	800dd00 <__lshift+0xc8>
 800dd0c:	e7ea      	b.n	800dce4 <__lshift+0xac>
 800dd0e:	bf00      	nop
 800dd10:	0801007b 	.word	0x0801007b
 800dd14:	0801008c 	.word	0x0801008c

0800dd18 <__mcmp>:
 800dd18:	b530      	push	{r4, r5, lr}
 800dd1a:	6902      	ldr	r2, [r0, #16]
 800dd1c:	690c      	ldr	r4, [r1, #16]
 800dd1e:	1b12      	subs	r2, r2, r4
 800dd20:	d10e      	bne.n	800dd40 <__mcmp+0x28>
 800dd22:	f100 0314 	add.w	r3, r0, #20
 800dd26:	3114      	adds	r1, #20
 800dd28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dd2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dd30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dd34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd38:	42a5      	cmp	r5, r4
 800dd3a:	d003      	beq.n	800dd44 <__mcmp+0x2c>
 800dd3c:	d305      	bcc.n	800dd4a <__mcmp+0x32>
 800dd3e:	2201      	movs	r2, #1
 800dd40:	4610      	mov	r0, r2
 800dd42:	bd30      	pop	{r4, r5, pc}
 800dd44:	4283      	cmp	r3, r0
 800dd46:	d3f3      	bcc.n	800dd30 <__mcmp+0x18>
 800dd48:	e7fa      	b.n	800dd40 <__mcmp+0x28>
 800dd4a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd4e:	e7f7      	b.n	800dd40 <__mcmp+0x28>

0800dd50 <__mdiff>:
 800dd50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	460c      	mov	r4, r1
 800dd56:	4606      	mov	r6, r0
 800dd58:	4611      	mov	r1, r2
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	4690      	mov	r8, r2
 800dd5e:	f7ff ffdb 	bl	800dd18 <__mcmp>
 800dd62:	1e05      	subs	r5, r0, #0
 800dd64:	d110      	bne.n	800dd88 <__mdiff+0x38>
 800dd66:	4629      	mov	r1, r5
 800dd68:	4630      	mov	r0, r6
 800dd6a:	f7ff fd53 	bl	800d814 <_Balloc>
 800dd6e:	b930      	cbnz	r0, 800dd7e <__mdiff+0x2e>
 800dd70:	4b3a      	ldr	r3, [pc, #232]	; (800de5c <__mdiff+0x10c>)
 800dd72:	4602      	mov	r2, r0
 800dd74:	f240 2132 	movw	r1, #562	; 0x232
 800dd78:	4839      	ldr	r0, [pc, #228]	; (800de60 <__mdiff+0x110>)
 800dd7a:	f000 fb31 	bl	800e3e0 <__assert_func>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd88:	bfa4      	itt	ge
 800dd8a:	4643      	movge	r3, r8
 800dd8c:	46a0      	movge	r8, r4
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd94:	bfa6      	itte	ge
 800dd96:	461c      	movge	r4, r3
 800dd98:	2500      	movge	r5, #0
 800dd9a:	2501      	movlt	r5, #1
 800dd9c:	f7ff fd3a 	bl	800d814 <_Balloc>
 800dda0:	b920      	cbnz	r0, 800ddac <__mdiff+0x5c>
 800dda2:	4b2e      	ldr	r3, [pc, #184]	; (800de5c <__mdiff+0x10c>)
 800dda4:	4602      	mov	r2, r0
 800dda6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ddaa:	e7e5      	b.n	800dd78 <__mdiff+0x28>
 800ddac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ddb0:	6926      	ldr	r6, [r4, #16]
 800ddb2:	60c5      	str	r5, [r0, #12]
 800ddb4:	f104 0914 	add.w	r9, r4, #20
 800ddb8:	f108 0514 	add.w	r5, r8, #20
 800ddbc:	f100 0e14 	add.w	lr, r0, #20
 800ddc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ddc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ddc8:	f108 0210 	add.w	r2, r8, #16
 800ddcc:	46f2      	mov	sl, lr
 800ddce:	2100      	movs	r1, #0
 800ddd0:	f859 3b04 	ldr.w	r3, [r9], #4
 800ddd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ddd8:	fa1f f883 	uxth.w	r8, r3
 800dddc:	fa11 f18b 	uxtah	r1, r1, fp
 800dde0:	0c1b      	lsrs	r3, r3, #16
 800dde2:	eba1 0808 	sub.w	r8, r1, r8
 800dde6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ddea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ddee:	fa1f f888 	uxth.w	r8, r8
 800ddf2:	1419      	asrs	r1, r3, #16
 800ddf4:	454e      	cmp	r6, r9
 800ddf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ddfa:	f84a 3b04 	str.w	r3, [sl], #4
 800ddfe:	d8e7      	bhi.n	800ddd0 <__mdiff+0x80>
 800de00:	1b33      	subs	r3, r6, r4
 800de02:	3b15      	subs	r3, #21
 800de04:	f023 0303 	bic.w	r3, r3, #3
 800de08:	3304      	adds	r3, #4
 800de0a:	3415      	adds	r4, #21
 800de0c:	42a6      	cmp	r6, r4
 800de0e:	bf38      	it	cc
 800de10:	2304      	movcc	r3, #4
 800de12:	441d      	add	r5, r3
 800de14:	4473      	add	r3, lr
 800de16:	469e      	mov	lr, r3
 800de18:	462e      	mov	r6, r5
 800de1a:	4566      	cmp	r6, ip
 800de1c:	d30e      	bcc.n	800de3c <__mdiff+0xec>
 800de1e:	f10c 0203 	add.w	r2, ip, #3
 800de22:	1b52      	subs	r2, r2, r5
 800de24:	f022 0203 	bic.w	r2, r2, #3
 800de28:	3d03      	subs	r5, #3
 800de2a:	45ac      	cmp	ip, r5
 800de2c:	bf38      	it	cc
 800de2e:	2200      	movcc	r2, #0
 800de30:	441a      	add	r2, r3
 800de32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800de36:	b17b      	cbz	r3, 800de58 <__mdiff+0x108>
 800de38:	6107      	str	r7, [r0, #16]
 800de3a:	e7a3      	b.n	800dd84 <__mdiff+0x34>
 800de3c:	f856 8b04 	ldr.w	r8, [r6], #4
 800de40:	fa11 f288 	uxtah	r2, r1, r8
 800de44:	1414      	asrs	r4, r2, #16
 800de46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800de4a:	b292      	uxth	r2, r2
 800de4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800de50:	f84e 2b04 	str.w	r2, [lr], #4
 800de54:	1421      	asrs	r1, r4, #16
 800de56:	e7e0      	b.n	800de1a <__mdiff+0xca>
 800de58:	3f01      	subs	r7, #1
 800de5a:	e7ea      	b.n	800de32 <__mdiff+0xe2>
 800de5c:	0801007b 	.word	0x0801007b
 800de60:	0801008c 	.word	0x0801008c

0800de64 <__d2b>:
 800de64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de68:	4689      	mov	r9, r1
 800de6a:	2101      	movs	r1, #1
 800de6c:	ec57 6b10 	vmov	r6, r7, d0
 800de70:	4690      	mov	r8, r2
 800de72:	f7ff fccf 	bl	800d814 <_Balloc>
 800de76:	4604      	mov	r4, r0
 800de78:	b930      	cbnz	r0, 800de88 <__d2b+0x24>
 800de7a:	4602      	mov	r2, r0
 800de7c:	4b25      	ldr	r3, [pc, #148]	; (800df14 <__d2b+0xb0>)
 800de7e:	4826      	ldr	r0, [pc, #152]	; (800df18 <__d2b+0xb4>)
 800de80:	f240 310a 	movw	r1, #778	; 0x30a
 800de84:	f000 faac 	bl	800e3e0 <__assert_func>
 800de88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de90:	bb35      	cbnz	r5, 800dee0 <__d2b+0x7c>
 800de92:	2e00      	cmp	r6, #0
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	d028      	beq.n	800deea <__d2b+0x86>
 800de98:	4668      	mov	r0, sp
 800de9a:	9600      	str	r6, [sp, #0]
 800de9c:	f7ff fd82 	bl	800d9a4 <__lo0bits>
 800dea0:	9900      	ldr	r1, [sp, #0]
 800dea2:	b300      	cbz	r0, 800dee6 <__d2b+0x82>
 800dea4:	9a01      	ldr	r2, [sp, #4]
 800dea6:	f1c0 0320 	rsb	r3, r0, #32
 800deaa:	fa02 f303 	lsl.w	r3, r2, r3
 800deae:	430b      	orrs	r3, r1
 800deb0:	40c2      	lsrs	r2, r0
 800deb2:	6163      	str	r3, [r4, #20]
 800deb4:	9201      	str	r2, [sp, #4]
 800deb6:	9b01      	ldr	r3, [sp, #4]
 800deb8:	61a3      	str	r3, [r4, #24]
 800deba:	2b00      	cmp	r3, #0
 800debc:	bf14      	ite	ne
 800debe:	2202      	movne	r2, #2
 800dec0:	2201      	moveq	r2, #1
 800dec2:	6122      	str	r2, [r4, #16]
 800dec4:	b1d5      	cbz	r5, 800defc <__d2b+0x98>
 800dec6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800deca:	4405      	add	r5, r0
 800decc:	f8c9 5000 	str.w	r5, [r9]
 800ded0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ded4:	f8c8 0000 	str.w	r0, [r8]
 800ded8:	4620      	mov	r0, r4
 800deda:	b003      	add	sp, #12
 800dedc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dee4:	e7d5      	b.n	800de92 <__d2b+0x2e>
 800dee6:	6161      	str	r1, [r4, #20]
 800dee8:	e7e5      	b.n	800deb6 <__d2b+0x52>
 800deea:	a801      	add	r0, sp, #4
 800deec:	f7ff fd5a 	bl	800d9a4 <__lo0bits>
 800def0:	9b01      	ldr	r3, [sp, #4]
 800def2:	6163      	str	r3, [r4, #20]
 800def4:	2201      	movs	r2, #1
 800def6:	6122      	str	r2, [r4, #16]
 800def8:	3020      	adds	r0, #32
 800defa:	e7e3      	b.n	800dec4 <__d2b+0x60>
 800defc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df04:	f8c9 0000 	str.w	r0, [r9]
 800df08:	6918      	ldr	r0, [r3, #16]
 800df0a:	f7ff fd2b 	bl	800d964 <__hi0bits>
 800df0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df12:	e7df      	b.n	800ded4 <__d2b+0x70>
 800df14:	0801007b 	.word	0x0801007b
 800df18:	0801008c 	.word	0x0801008c

0800df1c <_calloc_r>:
 800df1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df1e:	fba1 2402 	umull	r2, r4, r1, r2
 800df22:	b94c      	cbnz	r4, 800df38 <_calloc_r+0x1c>
 800df24:	4611      	mov	r1, r2
 800df26:	9201      	str	r2, [sp, #4]
 800df28:	f000 f87a 	bl	800e020 <_malloc_r>
 800df2c:	9a01      	ldr	r2, [sp, #4]
 800df2e:	4605      	mov	r5, r0
 800df30:	b930      	cbnz	r0, 800df40 <_calloc_r+0x24>
 800df32:	4628      	mov	r0, r5
 800df34:	b003      	add	sp, #12
 800df36:	bd30      	pop	{r4, r5, pc}
 800df38:	220c      	movs	r2, #12
 800df3a:	6002      	str	r2, [r0, #0]
 800df3c:	2500      	movs	r5, #0
 800df3e:	e7f8      	b.n	800df32 <_calloc_r+0x16>
 800df40:	4621      	mov	r1, r4
 800df42:	f7fe f94d 	bl	800c1e0 <memset>
 800df46:	e7f4      	b.n	800df32 <_calloc_r+0x16>

0800df48 <_free_r>:
 800df48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df4a:	2900      	cmp	r1, #0
 800df4c:	d044      	beq.n	800dfd8 <_free_r+0x90>
 800df4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df52:	9001      	str	r0, [sp, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	f1a1 0404 	sub.w	r4, r1, #4
 800df5a:	bfb8      	it	lt
 800df5c:	18e4      	addlt	r4, r4, r3
 800df5e:	f000 fa9b 	bl	800e498 <__malloc_lock>
 800df62:	4a1e      	ldr	r2, [pc, #120]	; (800dfdc <_free_r+0x94>)
 800df64:	9801      	ldr	r0, [sp, #4]
 800df66:	6813      	ldr	r3, [r2, #0]
 800df68:	b933      	cbnz	r3, 800df78 <_free_r+0x30>
 800df6a:	6063      	str	r3, [r4, #4]
 800df6c:	6014      	str	r4, [r2, #0]
 800df6e:	b003      	add	sp, #12
 800df70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df74:	f000 ba96 	b.w	800e4a4 <__malloc_unlock>
 800df78:	42a3      	cmp	r3, r4
 800df7a:	d908      	bls.n	800df8e <_free_r+0x46>
 800df7c:	6825      	ldr	r5, [r4, #0]
 800df7e:	1961      	adds	r1, r4, r5
 800df80:	428b      	cmp	r3, r1
 800df82:	bf01      	itttt	eq
 800df84:	6819      	ldreq	r1, [r3, #0]
 800df86:	685b      	ldreq	r3, [r3, #4]
 800df88:	1949      	addeq	r1, r1, r5
 800df8a:	6021      	streq	r1, [r4, #0]
 800df8c:	e7ed      	b.n	800df6a <_free_r+0x22>
 800df8e:	461a      	mov	r2, r3
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	b10b      	cbz	r3, 800df98 <_free_r+0x50>
 800df94:	42a3      	cmp	r3, r4
 800df96:	d9fa      	bls.n	800df8e <_free_r+0x46>
 800df98:	6811      	ldr	r1, [r2, #0]
 800df9a:	1855      	adds	r5, r2, r1
 800df9c:	42a5      	cmp	r5, r4
 800df9e:	d10b      	bne.n	800dfb8 <_free_r+0x70>
 800dfa0:	6824      	ldr	r4, [r4, #0]
 800dfa2:	4421      	add	r1, r4
 800dfa4:	1854      	adds	r4, r2, r1
 800dfa6:	42a3      	cmp	r3, r4
 800dfa8:	6011      	str	r1, [r2, #0]
 800dfaa:	d1e0      	bne.n	800df6e <_free_r+0x26>
 800dfac:	681c      	ldr	r4, [r3, #0]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	6053      	str	r3, [r2, #4]
 800dfb2:	4421      	add	r1, r4
 800dfb4:	6011      	str	r1, [r2, #0]
 800dfb6:	e7da      	b.n	800df6e <_free_r+0x26>
 800dfb8:	d902      	bls.n	800dfc0 <_free_r+0x78>
 800dfba:	230c      	movs	r3, #12
 800dfbc:	6003      	str	r3, [r0, #0]
 800dfbe:	e7d6      	b.n	800df6e <_free_r+0x26>
 800dfc0:	6825      	ldr	r5, [r4, #0]
 800dfc2:	1961      	adds	r1, r4, r5
 800dfc4:	428b      	cmp	r3, r1
 800dfc6:	bf04      	itt	eq
 800dfc8:	6819      	ldreq	r1, [r3, #0]
 800dfca:	685b      	ldreq	r3, [r3, #4]
 800dfcc:	6063      	str	r3, [r4, #4]
 800dfce:	bf04      	itt	eq
 800dfd0:	1949      	addeq	r1, r1, r5
 800dfd2:	6021      	streq	r1, [r4, #0]
 800dfd4:	6054      	str	r4, [r2, #4]
 800dfd6:	e7ca      	b.n	800df6e <_free_r+0x26>
 800dfd8:	b003      	add	sp, #12
 800dfda:	bd30      	pop	{r4, r5, pc}
 800dfdc:	2000535c 	.word	0x2000535c

0800dfe0 <sbrk_aligned>:
 800dfe0:	b570      	push	{r4, r5, r6, lr}
 800dfe2:	4e0e      	ldr	r6, [pc, #56]	; (800e01c <sbrk_aligned+0x3c>)
 800dfe4:	460c      	mov	r4, r1
 800dfe6:	6831      	ldr	r1, [r6, #0]
 800dfe8:	4605      	mov	r5, r0
 800dfea:	b911      	cbnz	r1, 800dff2 <sbrk_aligned+0x12>
 800dfec:	f000 f9e8 	bl	800e3c0 <_sbrk_r>
 800dff0:	6030      	str	r0, [r6, #0]
 800dff2:	4621      	mov	r1, r4
 800dff4:	4628      	mov	r0, r5
 800dff6:	f000 f9e3 	bl	800e3c0 <_sbrk_r>
 800dffa:	1c43      	adds	r3, r0, #1
 800dffc:	d00a      	beq.n	800e014 <sbrk_aligned+0x34>
 800dffe:	1cc4      	adds	r4, r0, #3
 800e000:	f024 0403 	bic.w	r4, r4, #3
 800e004:	42a0      	cmp	r0, r4
 800e006:	d007      	beq.n	800e018 <sbrk_aligned+0x38>
 800e008:	1a21      	subs	r1, r4, r0
 800e00a:	4628      	mov	r0, r5
 800e00c:	f000 f9d8 	bl	800e3c0 <_sbrk_r>
 800e010:	3001      	adds	r0, #1
 800e012:	d101      	bne.n	800e018 <sbrk_aligned+0x38>
 800e014:	f04f 34ff 	mov.w	r4, #4294967295
 800e018:	4620      	mov	r0, r4
 800e01a:	bd70      	pop	{r4, r5, r6, pc}
 800e01c:	20005360 	.word	0x20005360

0800e020 <_malloc_r>:
 800e020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e024:	1ccd      	adds	r5, r1, #3
 800e026:	f025 0503 	bic.w	r5, r5, #3
 800e02a:	3508      	adds	r5, #8
 800e02c:	2d0c      	cmp	r5, #12
 800e02e:	bf38      	it	cc
 800e030:	250c      	movcc	r5, #12
 800e032:	2d00      	cmp	r5, #0
 800e034:	4607      	mov	r7, r0
 800e036:	db01      	blt.n	800e03c <_malloc_r+0x1c>
 800e038:	42a9      	cmp	r1, r5
 800e03a:	d905      	bls.n	800e048 <_malloc_r+0x28>
 800e03c:	230c      	movs	r3, #12
 800e03e:	603b      	str	r3, [r7, #0]
 800e040:	2600      	movs	r6, #0
 800e042:	4630      	mov	r0, r6
 800e044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e048:	4e2e      	ldr	r6, [pc, #184]	; (800e104 <_malloc_r+0xe4>)
 800e04a:	f000 fa25 	bl	800e498 <__malloc_lock>
 800e04e:	6833      	ldr	r3, [r6, #0]
 800e050:	461c      	mov	r4, r3
 800e052:	bb34      	cbnz	r4, 800e0a2 <_malloc_r+0x82>
 800e054:	4629      	mov	r1, r5
 800e056:	4638      	mov	r0, r7
 800e058:	f7ff ffc2 	bl	800dfe0 <sbrk_aligned>
 800e05c:	1c43      	adds	r3, r0, #1
 800e05e:	4604      	mov	r4, r0
 800e060:	d14d      	bne.n	800e0fe <_malloc_r+0xde>
 800e062:	6834      	ldr	r4, [r6, #0]
 800e064:	4626      	mov	r6, r4
 800e066:	2e00      	cmp	r6, #0
 800e068:	d140      	bne.n	800e0ec <_malloc_r+0xcc>
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	4631      	mov	r1, r6
 800e06e:	4638      	mov	r0, r7
 800e070:	eb04 0803 	add.w	r8, r4, r3
 800e074:	f000 f9a4 	bl	800e3c0 <_sbrk_r>
 800e078:	4580      	cmp	r8, r0
 800e07a:	d13a      	bne.n	800e0f2 <_malloc_r+0xd2>
 800e07c:	6821      	ldr	r1, [r4, #0]
 800e07e:	3503      	adds	r5, #3
 800e080:	1a6d      	subs	r5, r5, r1
 800e082:	f025 0503 	bic.w	r5, r5, #3
 800e086:	3508      	adds	r5, #8
 800e088:	2d0c      	cmp	r5, #12
 800e08a:	bf38      	it	cc
 800e08c:	250c      	movcc	r5, #12
 800e08e:	4629      	mov	r1, r5
 800e090:	4638      	mov	r0, r7
 800e092:	f7ff ffa5 	bl	800dfe0 <sbrk_aligned>
 800e096:	3001      	adds	r0, #1
 800e098:	d02b      	beq.n	800e0f2 <_malloc_r+0xd2>
 800e09a:	6823      	ldr	r3, [r4, #0]
 800e09c:	442b      	add	r3, r5
 800e09e:	6023      	str	r3, [r4, #0]
 800e0a0:	e00e      	b.n	800e0c0 <_malloc_r+0xa0>
 800e0a2:	6822      	ldr	r2, [r4, #0]
 800e0a4:	1b52      	subs	r2, r2, r5
 800e0a6:	d41e      	bmi.n	800e0e6 <_malloc_r+0xc6>
 800e0a8:	2a0b      	cmp	r2, #11
 800e0aa:	d916      	bls.n	800e0da <_malloc_r+0xba>
 800e0ac:	1961      	adds	r1, r4, r5
 800e0ae:	42a3      	cmp	r3, r4
 800e0b0:	6025      	str	r5, [r4, #0]
 800e0b2:	bf18      	it	ne
 800e0b4:	6059      	strne	r1, [r3, #4]
 800e0b6:	6863      	ldr	r3, [r4, #4]
 800e0b8:	bf08      	it	eq
 800e0ba:	6031      	streq	r1, [r6, #0]
 800e0bc:	5162      	str	r2, [r4, r5]
 800e0be:	604b      	str	r3, [r1, #4]
 800e0c0:	4638      	mov	r0, r7
 800e0c2:	f104 060b 	add.w	r6, r4, #11
 800e0c6:	f000 f9ed 	bl	800e4a4 <__malloc_unlock>
 800e0ca:	f026 0607 	bic.w	r6, r6, #7
 800e0ce:	1d23      	adds	r3, r4, #4
 800e0d0:	1af2      	subs	r2, r6, r3
 800e0d2:	d0b6      	beq.n	800e042 <_malloc_r+0x22>
 800e0d4:	1b9b      	subs	r3, r3, r6
 800e0d6:	50a3      	str	r3, [r4, r2]
 800e0d8:	e7b3      	b.n	800e042 <_malloc_r+0x22>
 800e0da:	6862      	ldr	r2, [r4, #4]
 800e0dc:	42a3      	cmp	r3, r4
 800e0de:	bf0c      	ite	eq
 800e0e0:	6032      	streq	r2, [r6, #0]
 800e0e2:	605a      	strne	r2, [r3, #4]
 800e0e4:	e7ec      	b.n	800e0c0 <_malloc_r+0xa0>
 800e0e6:	4623      	mov	r3, r4
 800e0e8:	6864      	ldr	r4, [r4, #4]
 800e0ea:	e7b2      	b.n	800e052 <_malloc_r+0x32>
 800e0ec:	4634      	mov	r4, r6
 800e0ee:	6876      	ldr	r6, [r6, #4]
 800e0f0:	e7b9      	b.n	800e066 <_malloc_r+0x46>
 800e0f2:	230c      	movs	r3, #12
 800e0f4:	603b      	str	r3, [r7, #0]
 800e0f6:	4638      	mov	r0, r7
 800e0f8:	f000 f9d4 	bl	800e4a4 <__malloc_unlock>
 800e0fc:	e7a1      	b.n	800e042 <_malloc_r+0x22>
 800e0fe:	6025      	str	r5, [r4, #0]
 800e100:	e7de      	b.n	800e0c0 <_malloc_r+0xa0>
 800e102:	bf00      	nop
 800e104:	2000535c 	.word	0x2000535c

0800e108 <__ssputs_r>:
 800e108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e10c:	688e      	ldr	r6, [r1, #8]
 800e10e:	429e      	cmp	r6, r3
 800e110:	4682      	mov	sl, r0
 800e112:	460c      	mov	r4, r1
 800e114:	4690      	mov	r8, r2
 800e116:	461f      	mov	r7, r3
 800e118:	d838      	bhi.n	800e18c <__ssputs_r+0x84>
 800e11a:	898a      	ldrh	r2, [r1, #12]
 800e11c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e120:	d032      	beq.n	800e188 <__ssputs_r+0x80>
 800e122:	6825      	ldr	r5, [r4, #0]
 800e124:	6909      	ldr	r1, [r1, #16]
 800e126:	eba5 0901 	sub.w	r9, r5, r1
 800e12a:	6965      	ldr	r5, [r4, #20]
 800e12c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e134:	3301      	adds	r3, #1
 800e136:	444b      	add	r3, r9
 800e138:	106d      	asrs	r5, r5, #1
 800e13a:	429d      	cmp	r5, r3
 800e13c:	bf38      	it	cc
 800e13e:	461d      	movcc	r5, r3
 800e140:	0553      	lsls	r3, r2, #21
 800e142:	d531      	bpl.n	800e1a8 <__ssputs_r+0xa0>
 800e144:	4629      	mov	r1, r5
 800e146:	f7ff ff6b 	bl	800e020 <_malloc_r>
 800e14a:	4606      	mov	r6, r0
 800e14c:	b950      	cbnz	r0, 800e164 <__ssputs_r+0x5c>
 800e14e:	230c      	movs	r3, #12
 800e150:	f8ca 3000 	str.w	r3, [sl]
 800e154:	89a3      	ldrh	r3, [r4, #12]
 800e156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e15a:	81a3      	strh	r3, [r4, #12]
 800e15c:	f04f 30ff 	mov.w	r0, #4294967295
 800e160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e164:	6921      	ldr	r1, [r4, #16]
 800e166:	464a      	mov	r2, r9
 800e168:	f7fe f82c 	bl	800c1c4 <memcpy>
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e176:	81a3      	strh	r3, [r4, #12]
 800e178:	6126      	str	r6, [r4, #16]
 800e17a:	6165      	str	r5, [r4, #20]
 800e17c:	444e      	add	r6, r9
 800e17e:	eba5 0509 	sub.w	r5, r5, r9
 800e182:	6026      	str	r6, [r4, #0]
 800e184:	60a5      	str	r5, [r4, #8]
 800e186:	463e      	mov	r6, r7
 800e188:	42be      	cmp	r6, r7
 800e18a:	d900      	bls.n	800e18e <__ssputs_r+0x86>
 800e18c:	463e      	mov	r6, r7
 800e18e:	6820      	ldr	r0, [r4, #0]
 800e190:	4632      	mov	r2, r6
 800e192:	4641      	mov	r1, r8
 800e194:	f000 f966 	bl	800e464 <memmove>
 800e198:	68a3      	ldr	r3, [r4, #8]
 800e19a:	1b9b      	subs	r3, r3, r6
 800e19c:	60a3      	str	r3, [r4, #8]
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	4433      	add	r3, r6
 800e1a2:	6023      	str	r3, [r4, #0]
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	e7db      	b.n	800e160 <__ssputs_r+0x58>
 800e1a8:	462a      	mov	r2, r5
 800e1aa:	f000 f981 	bl	800e4b0 <_realloc_r>
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d1e1      	bne.n	800e178 <__ssputs_r+0x70>
 800e1b4:	6921      	ldr	r1, [r4, #16]
 800e1b6:	4650      	mov	r0, sl
 800e1b8:	f7ff fec6 	bl	800df48 <_free_r>
 800e1bc:	e7c7      	b.n	800e14e <__ssputs_r+0x46>
	...

0800e1c0 <_svfiprintf_r>:
 800e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	4698      	mov	r8, r3
 800e1c6:	898b      	ldrh	r3, [r1, #12]
 800e1c8:	061b      	lsls	r3, r3, #24
 800e1ca:	b09d      	sub	sp, #116	; 0x74
 800e1cc:	4607      	mov	r7, r0
 800e1ce:	460d      	mov	r5, r1
 800e1d0:	4614      	mov	r4, r2
 800e1d2:	d50e      	bpl.n	800e1f2 <_svfiprintf_r+0x32>
 800e1d4:	690b      	ldr	r3, [r1, #16]
 800e1d6:	b963      	cbnz	r3, 800e1f2 <_svfiprintf_r+0x32>
 800e1d8:	2140      	movs	r1, #64	; 0x40
 800e1da:	f7ff ff21 	bl	800e020 <_malloc_r>
 800e1de:	6028      	str	r0, [r5, #0]
 800e1e0:	6128      	str	r0, [r5, #16]
 800e1e2:	b920      	cbnz	r0, 800e1ee <_svfiprintf_r+0x2e>
 800e1e4:	230c      	movs	r3, #12
 800e1e6:	603b      	str	r3, [r7, #0]
 800e1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ec:	e0d1      	b.n	800e392 <_svfiprintf_r+0x1d2>
 800e1ee:	2340      	movs	r3, #64	; 0x40
 800e1f0:	616b      	str	r3, [r5, #20]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e1f6:	2320      	movs	r3, #32
 800e1f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e200:	2330      	movs	r3, #48	; 0x30
 800e202:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e3ac <_svfiprintf_r+0x1ec>
 800e206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e20a:	f04f 0901 	mov.w	r9, #1
 800e20e:	4623      	mov	r3, r4
 800e210:	469a      	mov	sl, r3
 800e212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e216:	b10a      	cbz	r2, 800e21c <_svfiprintf_r+0x5c>
 800e218:	2a25      	cmp	r2, #37	; 0x25
 800e21a:	d1f9      	bne.n	800e210 <_svfiprintf_r+0x50>
 800e21c:	ebba 0b04 	subs.w	fp, sl, r4
 800e220:	d00b      	beq.n	800e23a <_svfiprintf_r+0x7a>
 800e222:	465b      	mov	r3, fp
 800e224:	4622      	mov	r2, r4
 800e226:	4629      	mov	r1, r5
 800e228:	4638      	mov	r0, r7
 800e22a:	f7ff ff6d 	bl	800e108 <__ssputs_r>
 800e22e:	3001      	adds	r0, #1
 800e230:	f000 80aa 	beq.w	800e388 <_svfiprintf_r+0x1c8>
 800e234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e236:	445a      	add	r2, fp
 800e238:	9209      	str	r2, [sp, #36]	; 0x24
 800e23a:	f89a 3000 	ldrb.w	r3, [sl]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	f000 80a2 	beq.w	800e388 <_svfiprintf_r+0x1c8>
 800e244:	2300      	movs	r3, #0
 800e246:	f04f 32ff 	mov.w	r2, #4294967295
 800e24a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e24e:	f10a 0a01 	add.w	sl, sl, #1
 800e252:	9304      	str	r3, [sp, #16]
 800e254:	9307      	str	r3, [sp, #28]
 800e256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e25a:	931a      	str	r3, [sp, #104]	; 0x68
 800e25c:	4654      	mov	r4, sl
 800e25e:	2205      	movs	r2, #5
 800e260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e264:	4851      	ldr	r0, [pc, #324]	; (800e3ac <_svfiprintf_r+0x1ec>)
 800e266:	f7f1 ffbb 	bl	80001e0 <memchr>
 800e26a:	9a04      	ldr	r2, [sp, #16]
 800e26c:	b9d8      	cbnz	r0, 800e2a6 <_svfiprintf_r+0xe6>
 800e26e:	06d0      	lsls	r0, r2, #27
 800e270:	bf44      	itt	mi
 800e272:	2320      	movmi	r3, #32
 800e274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e278:	0711      	lsls	r1, r2, #28
 800e27a:	bf44      	itt	mi
 800e27c:	232b      	movmi	r3, #43	; 0x2b
 800e27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e282:	f89a 3000 	ldrb.w	r3, [sl]
 800e286:	2b2a      	cmp	r3, #42	; 0x2a
 800e288:	d015      	beq.n	800e2b6 <_svfiprintf_r+0xf6>
 800e28a:	9a07      	ldr	r2, [sp, #28]
 800e28c:	4654      	mov	r4, sl
 800e28e:	2000      	movs	r0, #0
 800e290:	f04f 0c0a 	mov.w	ip, #10
 800e294:	4621      	mov	r1, r4
 800e296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e29a:	3b30      	subs	r3, #48	; 0x30
 800e29c:	2b09      	cmp	r3, #9
 800e29e:	d94e      	bls.n	800e33e <_svfiprintf_r+0x17e>
 800e2a0:	b1b0      	cbz	r0, 800e2d0 <_svfiprintf_r+0x110>
 800e2a2:	9207      	str	r2, [sp, #28]
 800e2a4:	e014      	b.n	800e2d0 <_svfiprintf_r+0x110>
 800e2a6:	eba0 0308 	sub.w	r3, r0, r8
 800e2aa:	fa09 f303 	lsl.w	r3, r9, r3
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	9304      	str	r3, [sp, #16]
 800e2b2:	46a2      	mov	sl, r4
 800e2b4:	e7d2      	b.n	800e25c <_svfiprintf_r+0x9c>
 800e2b6:	9b03      	ldr	r3, [sp, #12]
 800e2b8:	1d19      	adds	r1, r3, #4
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	9103      	str	r1, [sp, #12]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	bfbb      	ittet	lt
 800e2c2:	425b      	neglt	r3, r3
 800e2c4:	f042 0202 	orrlt.w	r2, r2, #2
 800e2c8:	9307      	strge	r3, [sp, #28]
 800e2ca:	9307      	strlt	r3, [sp, #28]
 800e2cc:	bfb8      	it	lt
 800e2ce:	9204      	strlt	r2, [sp, #16]
 800e2d0:	7823      	ldrb	r3, [r4, #0]
 800e2d2:	2b2e      	cmp	r3, #46	; 0x2e
 800e2d4:	d10c      	bne.n	800e2f0 <_svfiprintf_r+0x130>
 800e2d6:	7863      	ldrb	r3, [r4, #1]
 800e2d8:	2b2a      	cmp	r3, #42	; 0x2a
 800e2da:	d135      	bne.n	800e348 <_svfiprintf_r+0x188>
 800e2dc:	9b03      	ldr	r3, [sp, #12]
 800e2de:	1d1a      	adds	r2, r3, #4
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	9203      	str	r2, [sp, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	bfb8      	it	lt
 800e2e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2ec:	3402      	adds	r4, #2
 800e2ee:	9305      	str	r3, [sp, #20]
 800e2f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3bc <_svfiprintf_r+0x1fc>
 800e2f4:	7821      	ldrb	r1, [r4, #0]
 800e2f6:	2203      	movs	r2, #3
 800e2f8:	4650      	mov	r0, sl
 800e2fa:	f7f1 ff71 	bl	80001e0 <memchr>
 800e2fe:	b140      	cbz	r0, 800e312 <_svfiprintf_r+0x152>
 800e300:	2340      	movs	r3, #64	; 0x40
 800e302:	eba0 000a 	sub.w	r0, r0, sl
 800e306:	fa03 f000 	lsl.w	r0, r3, r0
 800e30a:	9b04      	ldr	r3, [sp, #16]
 800e30c:	4303      	orrs	r3, r0
 800e30e:	3401      	adds	r4, #1
 800e310:	9304      	str	r3, [sp, #16]
 800e312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e316:	4826      	ldr	r0, [pc, #152]	; (800e3b0 <_svfiprintf_r+0x1f0>)
 800e318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e31c:	2206      	movs	r2, #6
 800e31e:	f7f1 ff5f 	bl	80001e0 <memchr>
 800e322:	2800      	cmp	r0, #0
 800e324:	d038      	beq.n	800e398 <_svfiprintf_r+0x1d8>
 800e326:	4b23      	ldr	r3, [pc, #140]	; (800e3b4 <_svfiprintf_r+0x1f4>)
 800e328:	bb1b      	cbnz	r3, 800e372 <_svfiprintf_r+0x1b2>
 800e32a:	9b03      	ldr	r3, [sp, #12]
 800e32c:	3307      	adds	r3, #7
 800e32e:	f023 0307 	bic.w	r3, r3, #7
 800e332:	3308      	adds	r3, #8
 800e334:	9303      	str	r3, [sp, #12]
 800e336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e338:	4433      	add	r3, r6
 800e33a:	9309      	str	r3, [sp, #36]	; 0x24
 800e33c:	e767      	b.n	800e20e <_svfiprintf_r+0x4e>
 800e33e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e342:	460c      	mov	r4, r1
 800e344:	2001      	movs	r0, #1
 800e346:	e7a5      	b.n	800e294 <_svfiprintf_r+0xd4>
 800e348:	2300      	movs	r3, #0
 800e34a:	3401      	adds	r4, #1
 800e34c:	9305      	str	r3, [sp, #20]
 800e34e:	4619      	mov	r1, r3
 800e350:	f04f 0c0a 	mov.w	ip, #10
 800e354:	4620      	mov	r0, r4
 800e356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e35a:	3a30      	subs	r2, #48	; 0x30
 800e35c:	2a09      	cmp	r2, #9
 800e35e:	d903      	bls.n	800e368 <_svfiprintf_r+0x1a8>
 800e360:	2b00      	cmp	r3, #0
 800e362:	d0c5      	beq.n	800e2f0 <_svfiprintf_r+0x130>
 800e364:	9105      	str	r1, [sp, #20]
 800e366:	e7c3      	b.n	800e2f0 <_svfiprintf_r+0x130>
 800e368:	fb0c 2101 	mla	r1, ip, r1, r2
 800e36c:	4604      	mov	r4, r0
 800e36e:	2301      	movs	r3, #1
 800e370:	e7f0      	b.n	800e354 <_svfiprintf_r+0x194>
 800e372:	ab03      	add	r3, sp, #12
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	462a      	mov	r2, r5
 800e378:	4b0f      	ldr	r3, [pc, #60]	; (800e3b8 <_svfiprintf_r+0x1f8>)
 800e37a:	a904      	add	r1, sp, #16
 800e37c:	4638      	mov	r0, r7
 800e37e:	f7fd ffd7 	bl	800c330 <_printf_float>
 800e382:	1c42      	adds	r2, r0, #1
 800e384:	4606      	mov	r6, r0
 800e386:	d1d6      	bne.n	800e336 <_svfiprintf_r+0x176>
 800e388:	89ab      	ldrh	r3, [r5, #12]
 800e38a:	065b      	lsls	r3, r3, #25
 800e38c:	f53f af2c 	bmi.w	800e1e8 <_svfiprintf_r+0x28>
 800e390:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e392:	b01d      	add	sp, #116	; 0x74
 800e394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e398:	ab03      	add	r3, sp, #12
 800e39a:	9300      	str	r3, [sp, #0]
 800e39c:	462a      	mov	r2, r5
 800e39e:	4b06      	ldr	r3, [pc, #24]	; (800e3b8 <_svfiprintf_r+0x1f8>)
 800e3a0:	a904      	add	r1, sp, #16
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	f7fe fa68 	bl	800c878 <_printf_i>
 800e3a8:	e7eb      	b.n	800e382 <_svfiprintf_r+0x1c2>
 800e3aa:	bf00      	nop
 800e3ac:	080101e4 	.word	0x080101e4
 800e3b0:	080101ee 	.word	0x080101ee
 800e3b4:	0800c331 	.word	0x0800c331
 800e3b8:	0800e109 	.word	0x0800e109
 800e3bc:	080101ea 	.word	0x080101ea

0800e3c0 <_sbrk_r>:
 800e3c0:	b538      	push	{r3, r4, r5, lr}
 800e3c2:	4d06      	ldr	r5, [pc, #24]	; (800e3dc <_sbrk_r+0x1c>)
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	4608      	mov	r0, r1
 800e3ca:	602b      	str	r3, [r5, #0]
 800e3cc:	f7f5 f982 	bl	80036d4 <_sbrk>
 800e3d0:	1c43      	adds	r3, r0, #1
 800e3d2:	d102      	bne.n	800e3da <_sbrk_r+0x1a>
 800e3d4:	682b      	ldr	r3, [r5, #0]
 800e3d6:	b103      	cbz	r3, 800e3da <_sbrk_r+0x1a>
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	bd38      	pop	{r3, r4, r5, pc}
 800e3dc:	20005364 	.word	0x20005364

0800e3e0 <__assert_func>:
 800e3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3e2:	4614      	mov	r4, r2
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	4b09      	ldr	r3, [pc, #36]	; (800e40c <__assert_func+0x2c>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	68d8      	ldr	r0, [r3, #12]
 800e3ee:	b14c      	cbz	r4, 800e404 <__assert_func+0x24>
 800e3f0:	4b07      	ldr	r3, [pc, #28]	; (800e410 <__assert_func+0x30>)
 800e3f2:	9100      	str	r1, [sp, #0]
 800e3f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3f8:	4906      	ldr	r1, [pc, #24]	; (800e414 <__assert_func+0x34>)
 800e3fa:	462b      	mov	r3, r5
 800e3fc:	f000 f80e 	bl	800e41c <fiprintf>
 800e400:	f000 faac 	bl	800e95c <abort>
 800e404:	4b04      	ldr	r3, [pc, #16]	; (800e418 <__assert_func+0x38>)
 800e406:	461c      	mov	r4, r3
 800e408:	e7f3      	b.n	800e3f2 <__assert_func+0x12>
 800e40a:	bf00      	nop
 800e40c:	20000020 	.word	0x20000020
 800e410:	080101f5 	.word	0x080101f5
 800e414:	08010202 	.word	0x08010202
 800e418:	08010230 	.word	0x08010230

0800e41c <fiprintf>:
 800e41c:	b40e      	push	{r1, r2, r3}
 800e41e:	b503      	push	{r0, r1, lr}
 800e420:	4601      	mov	r1, r0
 800e422:	ab03      	add	r3, sp, #12
 800e424:	4805      	ldr	r0, [pc, #20]	; (800e43c <fiprintf+0x20>)
 800e426:	f853 2b04 	ldr.w	r2, [r3], #4
 800e42a:	6800      	ldr	r0, [r0, #0]
 800e42c:	9301      	str	r3, [sp, #4]
 800e42e:	f000 f897 	bl	800e560 <_vfiprintf_r>
 800e432:	b002      	add	sp, #8
 800e434:	f85d eb04 	ldr.w	lr, [sp], #4
 800e438:	b003      	add	sp, #12
 800e43a:	4770      	bx	lr
 800e43c:	20000020 	.word	0x20000020

0800e440 <__ascii_mbtowc>:
 800e440:	b082      	sub	sp, #8
 800e442:	b901      	cbnz	r1, 800e446 <__ascii_mbtowc+0x6>
 800e444:	a901      	add	r1, sp, #4
 800e446:	b142      	cbz	r2, 800e45a <__ascii_mbtowc+0x1a>
 800e448:	b14b      	cbz	r3, 800e45e <__ascii_mbtowc+0x1e>
 800e44a:	7813      	ldrb	r3, [r2, #0]
 800e44c:	600b      	str	r3, [r1, #0]
 800e44e:	7812      	ldrb	r2, [r2, #0]
 800e450:	1e10      	subs	r0, r2, #0
 800e452:	bf18      	it	ne
 800e454:	2001      	movne	r0, #1
 800e456:	b002      	add	sp, #8
 800e458:	4770      	bx	lr
 800e45a:	4610      	mov	r0, r2
 800e45c:	e7fb      	b.n	800e456 <__ascii_mbtowc+0x16>
 800e45e:	f06f 0001 	mvn.w	r0, #1
 800e462:	e7f8      	b.n	800e456 <__ascii_mbtowc+0x16>

0800e464 <memmove>:
 800e464:	4288      	cmp	r0, r1
 800e466:	b510      	push	{r4, lr}
 800e468:	eb01 0402 	add.w	r4, r1, r2
 800e46c:	d902      	bls.n	800e474 <memmove+0x10>
 800e46e:	4284      	cmp	r4, r0
 800e470:	4623      	mov	r3, r4
 800e472:	d807      	bhi.n	800e484 <memmove+0x20>
 800e474:	1e43      	subs	r3, r0, #1
 800e476:	42a1      	cmp	r1, r4
 800e478:	d008      	beq.n	800e48c <memmove+0x28>
 800e47a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e47e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e482:	e7f8      	b.n	800e476 <memmove+0x12>
 800e484:	4402      	add	r2, r0
 800e486:	4601      	mov	r1, r0
 800e488:	428a      	cmp	r2, r1
 800e48a:	d100      	bne.n	800e48e <memmove+0x2a>
 800e48c:	bd10      	pop	{r4, pc}
 800e48e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e496:	e7f7      	b.n	800e488 <memmove+0x24>

0800e498 <__malloc_lock>:
 800e498:	4801      	ldr	r0, [pc, #4]	; (800e4a0 <__malloc_lock+0x8>)
 800e49a:	f000 bc1f 	b.w	800ecdc <__retarget_lock_acquire_recursive>
 800e49e:	bf00      	nop
 800e4a0:	20005368 	.word	0x20005368

0800e4a4 <__malloc_unlock>:
 800e4a4:	4801      	ldr	r0, [pc, #4]	; (800e4ac <__malloc_unlock+0x8>)
 800e4a6:	f000 bc1a 	b.w	800ecde <__retarget_lock_release_recursive>
 800e4aa:	bf00      	nop
 800e4ac:	20005368 	.word	0x20005368

0800e4b0 <_realloc_r>:
 800e4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	4614      	mov	r4, r2
 800e4b8:	460e      	mov	r6, r1
 800e4ba:	b921      	cbnz	r1, 800e4c6 <_realloc_r+0x16>
 800e4bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c0:	4611      	mov	r1, r2
 800e4c2:	f7ff bdad 	b.w	800e020 <_malloc_r>
 800e4c6:	b92a      	cbnz	r2, 800e4d4 <_realloc_r+0x24>
 800e4c8:	f7ff fd3e 	bl	800df48 <_free_r>
 800e4cc:	4625      	mov	r5, r4
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d4:	f000 fc6a 	bl	800edac <_malloc_usable_size_r>
 800e4d8:	4284      	cmp	r4, r0
 800e4da:	4607      	mov	r7, r0
 800e4dc:	d802      	bhi.n	800e4e4 <_realloc_r+0x34>
 800e4de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4e2:	d812      	bhi.n	800e50a <_realloc_r+0x5a>
 800e4e4:	4621      	mov	r1, r4
 800e4e6:	4640      	mov	r0, r8
 800e4e8:	f7ff fd9a 	bl	800e020 <_malloc_r>
 800e4ec:	4605      	mov	r5, r0
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d0ed      	beq.n	800e4ce <_realloc_r+0x1e>
 800e4f2:	42bc      	cmp	r4, r7
 800e4f4:	4622      	mov	r2, r4
 800e4f6:	4631      	mov	r1, r6
 800e4f8:	bf28      	it	cs
 800e4fa:	463a      	movcs	r2, r7
 800e4fc:	f7fd fe62 	bl	800c1c4 <memcpy>
 800e500:	4631      	mov	r1, r6
 800e502:	4640      	mov	r0, r8
 800e504:	f7ff fd20 	bl	800df48 <_free_r>
 800e508:	e7e1      	b.n	800e4ce <_realloc_r+0x1e>
 800e50a:	4635      	mov	r5, r6
 800e50c:	e7df      	b.n	800e4ce <_realloc_r+0x1e>

0800e50e <__sfputc_r>:
 800e50e:	6893      	ldr	r3, [r2, #8]
 800e510:	3b01      	subs	r3, #1
 800e512:	2b00      	cmp	r3, #0
 800e514:	b410      	push	{r4}
 800e516:	6093      	str	r3, [r2, #8]
 800e518:	da08      	bge.n	800e52c <__sfputc_r+0x1e>
 800e51a:	6994      	ldr	r4, [r2, #24]
 800e51c:	42a3      	cmp	r3, r4
 800e51e:	db01      	blt.n	800e524 <__sfputc_r+0x16>
 800e520:	290a      	cmp	r1, #10
 800e522:	d103      	bne.n	800e52c <__sfputc_r+0x1e>
 800e524:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e528:	f000 b94a 	b.w	800e7c0 <__swbuf_r>
 800e52c:	6813      	ldr	r3, [r2, #0]
 800e52e:	1c58      	adds	r0, r3, #1
 800e530:	6010      	str	r0, [r2, #0]
 800e532:	7019      	strb	r1, [r3, #0]
 800e534:	4608      	mov	r0, r1
 800e536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <__sfputs_r>:
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	4606      	mov	r6, r0
 800e540:	460f      	mov	r7, r1
 800e542:	4614      	mov	r4, r2
 800e544:	18d5      	adds	r5, r2, r3
 800e546:	42ac      	cmp	r4, r5
 800e548:	d101      	bne.n	800e54e <__sfputs_r+0x12>
 800e54a:	2000      	movs	r0, #0
 800e54c:	e007      	b.n	800e55e <__sfputs_r+0x22>
 800e54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e552:	463a      	mov	r2, r7
 800e554:	4630      	mov	r0, r6
 800e556:	f7ff ffda 	bl	800e50e <__sfputc_r>
 800e55a:	1c43      	adds	r3, r0, #1
 800e55c:	d1f3      	bne.n	800e546 <__sfputs_r+0xa>
 800e55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e560 <_vfiprintf_r>:
 800e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e564:	460d      	mov	r5, r1
 800e566:	b09d      	sub	sp, #116	; 0x74
 800e568:	4614      	mov	r4, r2
 800e56a:	4698      	mov	r8, r3
 800e56c:	4606      	mov	r6, r0
 800e56e:	b118      	cbz	r0, 800e578 <_vfiprintf_r+0x18>
 800e570:	6983      	ldr	r3, [r0, #24]
 800e572:	b90b      	cbnz	r3, 800e578 <_vfiprintf_r+0x18>
 800e574:	f000 fb14 	bl	800eba0 <__sinit>
 800e578:	4b89      	ldr	r3, [pc, #548]	; (800e7a0 <_vfiprintf_r+0x240>)
 800e57a:	429d      	cmp	r5, r3
 800e57c:	d11b      	bne.n	800e5b6 <_vfiprintf_r+0x56>
 800e57e:	6875      	ldr	r5, [r6, #4]
 800e580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e582:	07d9      	lsls	r1, r3, #31
 800e584:	d405      	bmi.n	800e592 <_vfiprintf_r+0x32>
 800e586:	89ab      	ldrh	r3, [r5, #12]
 800e588:	059a      	lsls	r2, r3, #22
 800e58a:	d402      	bmi.n	800e592 <_vfiprintf_r+0x32>
 800e58c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e58e:	f000 fba5 	bl	800ecdc <__retarget_lock_acquire_recursive>
 800e592:	89ab      	ldrh	r3, [r5, #12]
 800e594:	071b      	lsls	r3, r3, #28
 800e596:	d501      	bpl.n	800e59c <_vfiprintf_r+0x3c>
 800e598:	692b      	ldr	r3, [r5, #16]
 800e59a:	b9eb      	cbnz	r3, 800e5d8 <_vfiprintf_r+0x78>
 800e59c:	4629      	mov	r1, r5
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f000 f96e 	bl	800e880 <__swsetup_r>
 800e5a4:	b1c0      	cbz	r0, 800e5d8 <_vfiprintf_r+0x78>
 800e5a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5a8:	07dc      	lsls	r4, r3, #31
 800e5aa:	d50e      	bpl.n	800e5ca <_vfiprintf_r+0x6a>
 800e5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b0:	b01d      	add	sp, #116	; 0x74
 800e5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b6:	4b7b      	ldr	r3, [pc, #492]	; (800e7a4 <_vfiprintf_r+0x244>)
 800e5b8:	429d      	cmp	r5, r3
 800e5ba:	d101      	bne.n	800e5c0 <_vfiprintf_r+0x60>
 800e5bc:	68b5      	ldr	r5, [r6, #8]
 800e5be:	e7df      	b.n	800e580 <_vfiprintf_r+0x20>
 800e5c0:	4b79      	ldr	r3, [pc, #484]	; (800e7a8 <_vfiprintf_r+0x248>)
 800e5c2:	429d      	cmp	r5, r3
 800e5c4:	bf08      	it	eq
 800e5c6:	68f5      	ldreq	r5, [r6, #12]
 800e5c8:	e7da      	b.n	800e580 <_vfiprintf_r+0x20>
 800e5ca:	89ab      	ldrh	r3, [r5, #12]
 800e5cc:	0598      	lsls	r0, r3, #22
 800e5ce:	d4ed      	bmi.n	800e5ac <_vfiprintf_r+0x4c>
 800e5d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5d2:	f000 fb84 	bl	800ecde <__retarget_lock_release_recursive>
 800e5d6:	e7e9      	b.n	800e5ac <_vfiprintf_r+0x4c>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	9309      	str	r3, [sp, #36]	; 0x24
 800e5dc:	2320      	movs	r3, #32
 800e5de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5e6:	2330      	movs	r3, #48	; 0x30
 800e5e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e7ac <_vfiprintf_r+0x24c>
 800e5ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5f0:	f04f 0901 	mov.w	r9, #1
 800e5f4:	4623      	mov	r3, r4
 800e5f6:	469a      	mov	sl, r3
 800e5f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5fc:	b10a      	cbz	r2, 800e602 <_vfiprintf_r+0xa2>
 800e5fe:	2a25      	cmp	r2, #37	; 0x25
 800e600:	d1f9      	bne.n	800e5f6 <_vfiprintf_r+0x96>
 800e602:	ebba 0b04 	subs.w	fp, sl, r4
 800e606:	d00b      	beq.n	800e620 <_vfiprintf_r+0xc0>
 800e608:	465b      	mov	r3, fp
 800e60a:	4622      	mov	r2, r4
 800e60c:	4629      	mov	r1, r5
 800e60e:	4630      	mov	r0, r6
 800e610:	f7ff ff94 	bl	800e53c <__sfputs_r>
 800e614:	3001      	adds	r0, #1
 800e616:	f000 80aa 	beq.w	800e76e <_vfiprintf_r+0x20e>
 800e61a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e61c:	445a      	add	r2, fp
 800e61e:	9209      	str	r2, [sp, #36]	; 0x24
 800e620:	f89a 3000 	ldrb.w	r3, [sl]
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 80a2 	beq.w	800e76e <_vfiprintf_r+0x20e>
 800e62a:	2300      	movs	r3, #0
 800e62c:	f04f 32ff 	mov.w	r2, #4294967295
 800e630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e634:	f10a 0a01 	add.w	sl, sl, #1
 800e638:	9304      	str	r3, [sp, #16]
 800e63a:	9307      	str	r3, [sp, #28]
 800e63c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e640:	931a      	str	r3, [sp, #104]	; 0x68
 800e642:	4654      	mov	r4, sl
 800e644:	2205      	movs	r2, #5
 800e646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e64a:	4858      	ldr	r0, [pc, #352]	; (800e7ac <_vfiprintf_r+0x24c>)
 800e64c:	f7f1 fdc8 	bl	80001e0 <memchr>
 800e650:	9a04      	ldr	r2, [sp, #16]
 800e652:	b9d8      	cbnz	r0, 800e68c <_vfiprintf_r+0x12c>
 800e654:	06d1      	lsls	r1, r2, #27
 800e656:	bf44      	itt	mi
 800e658:	2320      	movmi	r3, #32
 800e65a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e65e:	0713      	lsls	r3, r2, #28
 800e660:	bf44      	itt	mi
 800e662:	232b      	movmi	r3, #43	; 0x2b
 800e664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e668:	f89a 3000 	ldrb.w	r3, [sl]
 800e66c:	2b2a      	cmp	r3, #42	; 0x2a
 800e66e:	d015      	beq.n	800e69c <_vfiprintf_r+0x13c>
 800e670:	9a07      	ldr	r2, [sp, #28]
 800e672:	4654      	mov	r4, sl
 800e674:	2000      	movs	r0, #0
 800e676:	f04f 0c0a 	mov.w	ip, #10
 800e67a:	4621      	mov	r1, r4
 800e67c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e680:	3b30      	subs	r3, #48	; 0x30
 800e682:	2b09      	cmp	r3, #9
 800e684:	d94e      	bls.n	800e724 <_vfiprintf_r+0x1c4>
 800e686:	b1b0      	cbz	r0, 800e6b6 <_vfiprintf_r+0x156>
 800e688:	9207      	str	r2, [sp, #28]
 800e68a:	e014      	b.n	800e6b6 <_vfiprintf_r+0x156>
 800e68c:	eba0 0308 	sub.w	r3, r0, r8
 800e690:	fa09 f303 	lsl.w	r3, r9, r3
 800e694:	4313      	orrs	r3, r2
 800e696:	9304      	str	r3, [sp, #16]
 800e698:	46a2      	mov	sl, r4
 800e69a:	e7d2      	b.n	800e642 <_vfiprintf_r+0xe2>
 800e69c:	9b03      	ldr	r3, [sp, #12]
 800e69e:	1d19      	adds	r1, r3, #4
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	9103      	str	r1, [sp, #12]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	bfbb      	ittet	lt
 800e6a8:	425b      	neglt	r3, r3
 800e6aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e6ae:	9307      	strge	r3, [sp, #28]
 800e6b0:	9307      	strlt	r3, [sp, #28]
 800e6b2:	bfb8      	it	lt
 800e6b4:	9204      	strlt	r2, [sp, #16]
 800e6b6:	7823      	ldrb	r3, [r4, #0]
 800e6b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e6ba:	d10c      	bne.n	800e6d6 <_vfiprintf_r+0x176>
 800e6bc:	7863      	ldrb	r3, [r4, #1]
 800e6be:	2b2a      	cmp	r3, #42	; 0x2a
 800e6c0:	d135      	bne.n	800e72e <_vfiprintf_r+0x1ce>
 800e6c2:	9b03      	ldr	r3, [sp, #12]
 800e6c4:	1d1a      	adds	r2, r3, #4
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	9203      	str	r2, [sp, #12]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	bfb8      	it	lt
 800e6ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6d2:	3402      	adds	r4, #2
 800e6d4:	9305      	str	r3, [sp, #20]
 800e6d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e7bc <_vfiprintf_r+0x25c>
 800e6da:	7821      	ldrb	r1, [r4, #0]
 800e6dc:	2203      	movs	r2, #3
 800e6de:	4650      	mov	r0, sl
 800e6e0:	f7f1 fd7e 	bl	80001e0 <memchr>
 800e6e4:	b140      	cbz	r0, 800e6f8 <_vfiprintf_r+0x198>
 800e6e6:	2340      	movs	r3, #64	; 0x40
 800e6e8:	eba0 000a 	sub.w	r0, r0, sl
 800e6ec:	fa03 f000 	lsl.w	r0, r3, r0
 800e6f0:	9b04      	ldr	r3, [sp, #16]
 800e6f2:	4303      	orrs	r3, r0
 800e6f4:	3401      	adds	r4, #1
 800e6f6:	9304      	str	r3, [sp, #16]
 800e6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6fc:	482c      	ldr	r0, [pc, #176]	; (800e7b0 <_vfiprintf_r+0x250>)
 800e6fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e702:	2206      	movs	r2, #6
 800e704:	f7f1 fd6c 	bl	80001e0 <memchr>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d03f      	beq.n	800e78c <_vfiprintf_r+0x22c>
 800e70c:	4b29      	ldr	r3, [pc, #164]	; (800e7b4 <_vfiprintf_r+0x254>)
 800e70e:	bb1b      	cbnz	r3, 800e758 <_vfiprintf_r+0x1f8>
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	3307      	adds	r3, #7
 800e714:	f023 0307 	bic.w	r3, r3, #7
 800e718:	3308      	adds	r3, #8
 800e71a:	9303      	str	r3, [sp, #12]
 800e71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e71e:	443b      	add	r3, r7
 800e720:	9309      	str	r3, [sp, #36]	; 0x24
 800e722:	e767      	b.n	800e5f4 <_vfiprintf_r+0x94>
 800e724:	fb0c 3202 	mla	r2, ip, r2, r3
 800e728:	460c      	mov	r4, r1
 800e72a:	2001      	movs	r0, #1
 800e72c:	e7a5      	b.n	800e67a <_vfiprintf_r+0x11a>
 800e72e:	2300      	movs	r3, #0
 800e730:	3401      	adds	r4, #1
 800e732:	9305      	str	r3, [sp, #20]
 800e734:	4619      	mov	r1, r3
 800e736:	f04f 0c0a 	mov.w	ip, #10
 800e73a:	4620      	mov	r0, r4
 800e73c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e740:	3a30      	subs	r2, #48	; 0x30
 800e742:	2a09      	cmp	r2, #9
 800e744:	d903      	bls.n	800e74e <_vfiprintf_r+0x1ee>
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0c5      	beq.n	800e6d6 <_vfiprintf_r+0x176>
 800e74a:	9105      	str	r1, [sp, #20]
 800e74c:	e7c3      	b.n	800e6d6 <_vfiprintf_r+0x176>
 800e74e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e752:	4604      	mov	r4, r0
 800e754:	2301      	movs	r3, #1
 800e756:	e7f0      	b.n	800e73a <_vfiprintf_r+0x1da>
 800e758:	ab03      	add	r3, sp, #12
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	462a      	mov	r2, r5
 800e75e:	4b16      	ldr	r3, [pc, #88]	; (800e7b8 <_vfiprintf_r+0x258>)
 800e760:	a904      	add	r1, sp, #16
 800e762:	4630      	mov	r0, r6
 800e764:	f7fd fde4 	bl	800c330 <_printf_float>
 800e768:	4607      	mov	r7, r0
 800e76a:	1c78      	adds	r0, r7, #1
 800e76c:	d1d6      	bne.n	800e71c <_vfiprintf_r+0x1bc>
 800e76e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e770:	07d9      	lsls	r1, r3, #31
 800e772:	d405      	bmi.n	800e780 <_vfiprintf_r+0x220>
 800e774:	89ab      	ldrh	r3, [r5, #12]
 800e776:	059a      	lsls	r2, r3, #22
 800e778:	d402      	bmi.n	800e780 <_vfiprintf_r+0x220>
 800e77a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e77c:	f000 faaf 	bl	800ecde <__retarget_lock_release_recursive>
 800e780:	89ab      	ldrh	r3, [r5, #12]
 800e782:	065b      	lsls	r3, r3, #25
 800e784:	f53f af12 	bmi.w	800e5ac <_vfiprintf_r+0x4c>
 800e788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e78a:	e711      	b.n	800e5b0 <_vfiprintf_r+0x50>
 800e78c:	ab03      	add	r3, sp, #12
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	462a      	mov	r2, r5
 800e792:	4b09      	ldr	r3, [pc, #36]	; (800e7b8 <_vfiprintf_r+0x258>)
 800e794:	a904      	add	r1, sp, #16
 800e796:	4630      	mov	r0, r6
 800e798:	f7fe f86e 	bl	800c878 <_printf_i>
 800e79c:	e7e4      	b.n	800e768 <_vfiprintf_r+0x208>
 800e79e:	bf00      	nop
 800e7a0:	0801035c 	.word	0x0801035c
 800e7a4:	0801037c 	.word	0x0801037c
 800e7a8:	0801033c 	.word	0x0801033c
 800e7ac:	080101e4 	.word	0x080101e4
 800e7b0:	080101ee 	.word	0x080101ee
 800e7b4:	0800c331 	.word	0x0800c331
 800e7b8:	0800e53d 	.word	0x0800e53d
 800e7bc:	080101ea 	.word	0x080101ea

0800e7c0 <__swbuf_r>:
 800e7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c2:	460e      	mov	r6, r1
 800e7c4:	4614      	mov	r4, r2
 800e7c6:	4605      	mov	r5, r0
 800e7c8:	b118      	cbz	r0, 800e7d2 <__swbuf_r+0x12>
 800e7ca:	6983      	ldr	r3, [r0, #24]
 800e7cc:	b90b      	cbnz	r3, 800e7d2 <__swbuf_r+0x12>
 800e7ce:	f000 f9e7 	bl	800eba0 <__sinit>
 800e7d2:	4b21      	ldr	r3, [pc, #132]	; (800e858 <__swbuf_r+0x98>)
 800e7d4:	429c      	cmp	r4, r3
 800e7d6:	d12b      	bne.n	800e830 <__swbuf_r+0x70>
 800e7d8:	686c      	ldr	r4, [r5, #4]
 800e7da:	69a3      	ldr	r3, [r4, #24]
 800e7dc:	60a3      	str	r3, [r4, #8]
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	071a      	lsls	r2, r3, #28
 800e7e2:	d52f      	bpl.n	800e844 <__swbuf_r+0x84>
 800e7e4:	6923      	ldr	r3, [r4, #16]
 800e7e6:	b36b      	cbz	r3, 800e844 <__swbuf_r+0x84>
 800e7e8:	6923      	ldr	r3, [r4, #16]
 800e7ea:	6820      	ldr	r0, [r4, #0]
 800e7ec:	1ac0      	subs	r0, r0, r3
 800e7ee:	6963      	ldr	r3, [r4, #20]
 800e7f0:	b2f6      	uxtb	r6, r6
 800e7f2:	4283      	cmp	r3, r0
 800e7f4:	4637      	mov	r7, r6
 800e7f6:	dc04      	bgt.n	800e802 <__swbuf_r+0x42>
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	f000 f93c 	bl	800ea78 <_fflush_r>
 800e800:	bb30      	cbnz	r0, 800e850 <__swbuf_r+0x90>
 800e802:	68a3      	ldr	r3, [r4, #8]
 800e804:	3b01      	subs	r3, #1
 800e806:	60a3      	str	r3, [r4, #8]
 800e808:	6823      	ldr	r3, [r4, #0]
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	6022      	str	r2, [r4, #0]
 800e80e:	701e      	strb	r6, [r3, #0]
 800e810:	6963      	ldr	r3, [r4, #20]
 800e812:	3001      	adds	r0, #1
 800e814:	4283      	cmp	r3, r0
 800e816:	d004      	beq.n	800e822 <__swbuf_r+0x62>
 800e818:	89a3      	ldrh	r3, [r4, #12]
 800e81a:	07db      	lsls	r3, r3, #31
 800e81c:	d506      	bpl.n	800e82c <__swbuf_r+0x6c>
 800e81e:	2e0a      	cmp	r6, #10
 800e820:	d104      	bne.n	800e82c <__swbuf_r+0x6c>
 800e822:	4621      	mov	r1, r4
 800e824:	4628      	mov	r0, r5
 800e826:	f000 f927 	bl	800ea78 <_fflush_r>
 800e82a:	b988      	cbnz	r0, 800e850 <__swbuf_r+0x90>
 800e82c:	4638      	mov	r0, r7
 800e82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e830:	4b0a      	ldr	r3, [pc, #40]	; (800e85c <__swbuf_r+0x9c>)
 800e832:	429c      	cmp	r4, r3
 800e834:	d101      	bne.n	800e83a <__swbuf_r+0x7a>
 800e836:	68ac      	ldr	r4, [r5, #8]
 800e838:	e7cf      	b.n	800e7da <__swbuf_r+0x1a>
 800e83a:	4b09      	ldr	r3, [pc, #36]	; (800e860 <__swbuf_r+0xa0>)
 800e83c:	429c      	cmp	r4, r3
 800e83e:	bf08      	it	eq
 800e840:	68ec      	ldreq	r4, [r5, #12]
 800e842:	e7ca      	b.n	800e7da <__swbuf_r+0x1a>
 800e844:	4621      	mov	r1, r4
 800e846:	4628      	mov	r0, r5
 800e848:	f000 f81a 	bl	800e880 <__swsetup_r>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d0cb      	beq.n	800e7e8 <__swbuf_r+0x28>
 800e850:	f04f 37ff 	mov.w	r7, #4294967295
 800e854:	e7ea      	b.n	800e82c <__swbuf_r+0x6c>
 800e856:	bf00      	nop
 800e858:	0801035c 	.word	0x0801035c
 800e85c:	0801037c 	.word	0x0801037c
 800e860:	0801033c 	.word	0x0801033c

0800e864 <__ascii_wctomb>:
 800e864:	b149      	cbz	r1, 800e87a <__ascii_wctomb+0x16>
 800e866:	2aff      	cmp	r2, #255	; 0xff
 800e868:	bf85      	ittet	hi
 800e86a:	238a      	movhi	r3, #138	; 0x8a
 800e86c:	6003      	strhi	r3, [r0, #0]
 800e86e:	700a      	strbls	r2, [r1, #0]
 800e870:	f04f 30ff 	movhi.w	r0, #4294967295
 800e874:	bf98      	it	ls
 800e876:	2001      	movls	r0, #1
 800e878:	4770      	bx	lr
 800e87a:	4608      	mov	r0, r1
 800e87c:	4770      	bx	lr
	...

0800e880 <__swsetup_r>:
 800e880:	4b32      	ldr	r3, [pc, #200]	; (800e94c <__swsetup_r+0xcc>)
 800e882:	b570      	push	{r4, r5, r6, lr}
 800e884:	681d      	ldr	r5, [r3, #0]
 800e886:	4606      	mov	r6, r0
 800e888:	460c      	mov	r4, r1
 800e88a:	b125      	cbz	r5, 800e896 <__swsetup_r+0x16>
 800e88c:	69ab      	ldr	r3, [r5, #24]
 800e88e:	b913      	cbnz	r3, 800e896 <__swsetup_r+0x16>
 800e890:	4628      	mov	r0, r5
 800e892:	f000 f985 	bl	800eba0 <__sinit>
 800e896:	4b2e      	ldr	r3, [pc, #184]	; (800e950 <__swsetup_r+0xd0>)
 800e898:	429c      	cmp	r4, r3
 800e89a:	d10f      	bne.n	800e8bc <__swsetup_r+0x3c>
 800e89c:	686c      	ldr	r4, [r5, #4]
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8a4:	0719      	lsls	r1, r3, #28
 800e8a6:	d42c      	bmi.n	800e902 <__swsetup_r+0x82>
 800e8a8:	06dd      	lsls	r5, r3, #27
 800e8aa:	d411      	bmi.n	800e8d0 <__swsetup_r+0x50>
 800e8ac:	2309      	movs	r3, #9
 800e8ae:	6033      	str	r3, [r6, #0]
 800e8b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8b4:	81a3      	strh	r3, [r4, #12]
 800e8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ba:	e03e      	b.n	800e93a <__swsetup_r+0xba>
 800e8bc:	4b25      	ldr	r3, [pc, #148]	; (800e954 <__swsetup_r+0xd4>)
 800e8be:	429c      	cmp	r4, r3
 800e8c0:	d101      	bne.n	800e8c6 <__swsetup_r+0x46>
 800e8c2:	68ac      	ldr	r4, [r5, #8]
 800e8c4:	e7eb      	b.n	800e89e <__swsetup_r+0x1e>
 800e8c6:	4b24      	ldr	r3, [pc, #144]	; (800e958 <__swsetup_r+0xd8>)
 800e8c8:	429c      	cmp	r4, r3
 800e8ca:	bf08      	it	eq
 800e8cc:	68ec      	ldreq	r4, [r5, #12]
 800e8ce:	e7e6      	b.n	800e89e <__swsetup_r+0x1e>
 800e8d0:	0758      	lsls	r0, r3, #29
 800e8d2:	d512      	bpl.n	800e8fa <__swsetup_r+0x7a>
 800e8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8d6:	b141      	cbz	r1, 800e8ea <__swsetup_r+0x6a>
 800e8d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8dc:	4299      	cmp	r1, r3
 800e8de:	d002      	beq.n	800e8e6 <__swsetup_r+0x66>
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	f7ff fb31 	bl	800df48 <_free_r>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	6363      	str	r3, [r4, #52]	; 0x34
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8f0:	81a3      	strh	r3, [r4, #12]
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	6063      	str	r3, [r4, #4]
 800e8f6:	6923      	ldr	r3, [r4, #16]
 800e8f8:	6023      	str	r3, [r4, #0]
 800e8fa:	89a3      	ldrh	r3, [r4, #12]
 800e8fc:	f043 0308 	orr.w	r3, r3, #8
 800e900:	81a3      	strh	r3, [r4, #12]
 800e902:	6923      	ldr	r3, [r4, #16]
 800e904:	b94b      	cbnz	r3, 800e91a <__swsetup_r+0x9a>
 800e906:	89a3      	ldrh	r3, [r4, #12]
 800e908:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e910:	d003      	beq.n	800e91a <__swsetup_r+0x9a>
 800e912:	4621      	mov	r1, r4
 800e914:	4630      	mov	r0, r6
 800e916:	f000 fa09 	bl	800ed2c <__smakebuf_r>
 800e91a:	89a0      	ldrh	r0, [r4, #12]
 800e91c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e920:	f010 0301 	ands.w	r3, r0, #1
 800e924:	d00a      	beq.n	800e93c <__swsetup_r+0xbc>
 800e926:	2300      	movs	r3, #0
 800e928:	60a3      	str	r3, [r4, #8]
 800e92a:	6963      	ldr	r3, [r4, #20]
 800e92c:	425b      	negs	r3, r3
 800e92e:	61a3      	str	r3, [r4, #24]
 800e930:	6923      	ldr	r3, [r4, #16]
 800e932:	b943      	cbnz	r3, 800e946 <__swsetup_r+0xc6>
 800e934:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e938:	d1ba      	bne.n	800e8b0 <__swsetup_r+0x30>
 800e93a:	bd70      	pop	{r4, r5, r6, pc}
 800e93c:	0781      	lsls	r1, r0, #30
 800e93e:	bf58      	it	pl
 800e940:	6963      	ldrpl	r3, [r4, #20]
 800e942:	60a3      	str	r3, [r4, #8]
 800e944:	e7f4      	b.n	800e930 <__swsetup_r+0xb0>
 800e946:	2000      	movs	r0, #0
 800e948:	e7f7      	b.n	800e93a <__swsetup_r+0xba>
 800e94a:	bf00      	nop
 800e94c:	20000020 	.word	0x20000020
 800e950:	0801035c 	.word	0x0801035c
 800e954:	0801037c 	.word	0x0801037c
 800e958:	0801033c 	.word	0x0801033c

0800e95c <abort>:
 800e95c:	b508      	push	{r3, lr}
 800e95e:	2006      	movs	r0, #6
 800e960:	f000 fa54 	bl	800ee0c <raise>
 800e964:	2001      	movs	r0, #1
 800e966:	f7f4 fe3d 	bl	80035e4 <_exit>
	...

0800e96c <__sflush_r>:
 800e96c:	898a      	ldrh	r2, [r1, #12]
 800e96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e972:	4605      	mov	r5, r0
 800e974:	0710      	lsls	r0, r2, #28
 800e976:	460c      	mov	r4, r1
 800e978:	d458      	bmi.n	800ea2c <__sflush_r+0xc0>
 800e97a:	684b      	ldr	r3, [r1, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	dc05      	bgt.n	800e98c <__sflush_r+0x20>
 800e980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e982:	2b00      	cmp	r3, #0
 800e984:	dc02      	bgt.n	800e98c <__sflush_r+0x20>
 800e986:	2000      	movs	r0, #0
 800e988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e98c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e98e:	2e00      	cmp	r6, #0
 800e990:	d0f9      	beq.n	800e986 <__sflush_r+0x1a>
 800e992:	2300      	movs	r3, #0
 800e994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e998:	682f      	ldr	r7, [r5, #0]
 800e99a:	602b      	str	r3, [r5, #0]
 800e99c:	d032      	beq.n	800ea04 <__sflush_r+0x98>
 800e99e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9a0:	89a3      	ldrh	r3, [r4, #12]
 800e9a2:	075a      	lsls	r2, r3, #29
 800e9a4:	d505      	bpl.n	800e9b2 <__sflush_r+0x46>
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	1ac0      	subs	r0, r0, r3
 800e9aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9ac:	b10b      	cbz	r3, 800e9b2 <__sflush_r+0x46>
 800e9ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9b0:	1ac0      	subs	r0, r0, r3
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9b8:	6a21      	ldr	r1, [r4, #32]
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	47b0      	blx	r6
 800e9be:	1c43      	adds	r3, r0, #1
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	d106      	bne.n	800e9d2 <__sflush_r+0x66>
 800e9c4:	6829      	ldr	r1, [r5, #0]
 800e9c6:	291d      	cmp	r1, #29
 800e9c8:	d82c      	bhi.n	800ea24 <__sflush_r+0xb8>
 800e9ca:	4a2a      	ldr	r2, [pc, #168]	; (800ea74 <__sflush_r+0x108>)
 800e9cc:	40ca      	lsrs	r2, r1
 800e9ce:	07d6      	lsls	r6, r2, #31
 800e9d0:	d528      	bpl.n	800ea24 <__sflush_r+0xb8>
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	6062      	str	r2, [r4, #4]
 800e9d6:	04d9      	lsls	r1, r3, #19
 800e9d8:	6922      	ldr	r2, [r4, #16]
 800e9da:	6022      	str	r2, [r4, #0]
 800e9dc:	d504      	bpl.n	800e9e8 <__sflush_r+0x7c>
 800e9de:	1c42      	adds	r2, r0, #1
 800e9e0:	d101      	bne.n	800e9e6 <__sflush_r+0x7a>
 800e9e2:	682b      	ldr	r3, [r5, #0]
 800e9e4:	b903      	cbnz	r3, 800e9e8 <__sflush_r+0x7c>
 800e9e6:	6560      	str	r0, [r4, #84]	; 0x54
 800e9e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9ea:	602f      	str	r7, [r5, #0]
 800e9ec:	2900      	cmp	r1, #0
 800e9ee:	d0ca      	beq.n	800e986 <__sflush_r+0x1a>
 800e9f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9f4:	4299      	cmp	r1, r3
 800e9f6:	d002      	beq.n	800e9fe <__sflush_r+0x92>
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	f7ff faa5 	bl	800df48 <_free_r>
 800e9fe:	2000      	movs	r0, #0
 800ea00:	6360      	str	r0, [r4, #52]	; 0x34
 800ea02:	e7c1      	b.n	800e988 <__sflush_r+0x1c>
 800ea04:	6a21      	ldr	r1, [r4, #32]
 800ea06:	2301      	movs	r3, #1
 800ea08:	4628      	mov	r0, r5
 800ea0a:	47b0      	blx	r6
 800ea0c:	1c41      	adds	r1, r0, #1
 800ea0e:	d1c7      	bne.n	800e9a0 <__sflush_r+0x34>
 800ea10:	682b      	ldr	r3, [r5, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d0c4      	beq.n	800e9a0 <__sflush_r+0x34>
 800ea16:	2b1d      	cmp	r3, #29
 800ea18:	d001      	beq.n	800ea1e <__sflush_r+0xb2>
 800ea1a:	2b16      	cmp	r3, #22
 800ea1c:	d101      	bne.n	800ea22 <__sflush_r+0xb6>
 800ea1e:	602f      	str	r7, [r5, #0]
 800ea20:	e7b1      	b.n	800e986 <__sflush_r+0x1a>
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea28:	81a3      	strh	r3, [r4, #12]
 800ea2a:	e7ad      	b.n	800e988 <__sflush_r+0x1c>
 800ea2c:	690f      	ldr	r7, [r1, #16]
 800ea2e:	2f00      	cmp	r7, #0
 800ea30:	d0a9      	beq.n	800e986 <__sflush_r+0x1a>
 800ea32:	0793      	lsls	r3, r2, #30
 800ea34:	680e      	ldr	r6, [r1, #0]
 800ea36:	bf08      	it	eq
 800ea38:	694b      	ldreq	r3, [r1, #20]
 800ea3a:	600f      	str	r7, [r1, #0]
 800ea3c:	bf18      	it	ne
 800ea3e:	2300      	movne	r3, #0
 800ea40:	eba6 0807 	sub.w	r8, r6, r7
 800ea44:	608b      	str	r3, [r1, #8]
 800ea46:	f1b8 0f00 	cmp.w	r8, #0
 800ea4a:	dd9c      	ble.n	800e986 <__sflush_r+0x1a>
 800ea4c:	6a21      	ldr	r1, [r4, #32]
 800ea4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea50:	4643      	mov	r3, r8
 800ea52:	463a      	mov	r2, r7
 800ea54:	4628      	mov	r0, r5
 800ea56:	47b0      	blx	r6
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	dc06      	bgt.n	800ea6a <__sflush_r+0xfe>
 800ea5c:	89a3      	ldrh	r3, [r4, #12]
 800ea5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea62:	81a3      	strh	r3, [r4, #12]
 800ea64:	f04f 30ff 	mov.w	r0, #4294967295
 800ea68:	e78e      	b.n	800e988 <__sflush_r+0x1c>
 800ea6a:	4407      	add	r7, r0
 800ea6c:	eba8 0800 	sub.w	r8, r8, r0
 800ea70:	e7e9      	b.n	800ea46 <__sflush_r+0xda>
 800ea72:	bf00      	nop
 800ea74:	20400001 	.word	0x20400001

0800ea78 <_fflush_r>:
 800ea78:	b538      	push	{r3, r4, r5, lr}
 800ea7a:	690b      	ldr	r3, [r1, #16]
 800ea7c:	4605      	mov	r5, r0
 800ea7e:	460c      	mov	r4, r1
 800ea80:	b913      	cbnz	r3, 800ea88 <_fflush_r+0x10>
 800ea82:	2500      	movs	r5, #0
 800ea84:	4628      	mov	r0, r5
 800ea86:	bd38      	pop	{r3, r4, r5, pc}
 800ea88:	b118      	cbz	r0, 800ea92 <_fflush_r+0x1a>
 800ea8a:	6983      	ldr	r3, [r0, #24]
 800ea8c:	b90b      	cbnz	r3, 800ea92 <_fflush_r+0x1a>
 800ea8e:	f000 f887 	bl	800eba0 <__sinit>
 800ea92:	4b14      	ldr	r3, [pc, #80]	; (800eae4 <_fflush_r+0x6c>)
 800ea94:	429c      	cmp	r4, r3
 800ea96:	d11b      	bne.n	800ead0 <_fflush_r+0x58>
 800ea98:	686c      	ldr	r4, [r5, #4]
 800ea9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d0ef      	beq.n	800ea82 <_fflush_r+0xa>
 800eaa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eaa4:	07d0      	lsls	r0, r2, #31
 800eaa6:	d404      	bmi.n	800eab2 <_fflush_r+0x3a>
 800eaa8:	0599      	lsls	r1, r3, #22
 800eaaa:	d402      	bmi.n	800eab2 <_fflush_r+0x3a>
 800eaac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaae:	f000 f915 	bl	800ecdc <__retarget_lock_acquire_recursive>
 800eab2:	4628      	mov	r0, r5
 800eab4:	4621      	mov	r1, r4
 800eab6:	f7ff ff59 	bl	800e96c <__sflush_r>
 800eaba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eabc:	07da      	lsls	r2, r3, #31
 800eabe:	4605      	mov	r5, r0
 800eac0:	d4e0      	bmi.n	800ea84 <_fflush_r+0xc>
 800eac2:	89a3      	ldrh	r3, [r4, #12]
 800eac4:	059b      	lsls	r3, r3, #22
 800eac6:	d4dd      	bmi.n	800ea84 <_fflush_r+0xc>
 800eac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaca:	f000 f908 	bl	800ecde <__retarget_lock_release_recursive>
 800eace:	e7d9      	b.n	800ea84 <_fflush_r+0xc>
 800ead0:	4b05      	ldr	r3, [pc, #20]	; (800eae8 <_fflush_r+0x70>)
 800ead2:	429c      	cmp	r4, r3
 800ead4:	d101      	bne.n	800eada <_fflush_r+0x62>
 800ead6:	68ac      	ldr	r4, [r5, #8]
 800ead8:	e7df      	b.n	800ea9a <_fflush_r+0x22>
 800eada:	4b04      	ldr	r3, [pc, #16]	; (800eaec <_fflush_r+0x74>)
 800eadc:	429c      	cmp	r4, r3
 800eade:	bf08      	it	eq
 800eae0:	68ec      	ldreq	r4, [r5, #12]
 800eae2:	e7da      	b.n	800ea9a <_fflush_r+0x22>
 800eae4:	0801035c 	.word	0x0801035c
 800eae8:	0801037c 	.word	0x0801037c
 800eaec:	0801033c 	.word	0x0801033c

0800eaf0 <std>:
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	b510      	push	{r4, lr}
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	e9c0 3300 	strd	r3, r3, [r0]
 800eafa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eafe:	6083      	str	r3, [r0, #8]
 800eb00:	8181      	strh	r1, [r0, #12]
 800eb02:	6643      	str	r3, [r0, #100]	; 0x64
 800eb04:	81c2      	strh	r2, [r0, #14]
 800eb06:	6183      	str	r3, [r0, #24]
 800eb08:	4619      	mov	r1, r3
 800eb0a:	2208      	movs	r2, #8
 800eb0c:	305c      	adds	r0, #92	; 0x5c
 800eb0e:	f7fd fb67 	bl	800c1e0 <memset>
 800eb12:	4b05      	ldr	r3, [pc, #20]	; (800eb28 <std+0x38>)
 800eb14:	6263      	str	r3, [r4, #36]	; 0x24
 800eb16:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <std+0x3c>)
 800eb18:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb1a:	4b05      	ldr	r3, [pc, #20]	; (800eb30 <std+0x40>)
 800eb1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb1e:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <std+0x44>)
 800eb20:	6224      	str	r4, [r4, #32]
 800eb22:	6323      	str	r3, [r4, #48]	; 0x30
 800eb24:	bd10      	pop	{r4, pc}
 800eb26:	bf00      	nop
 800eb28:	0800ee45 	.word	0x0800ee45
 800eb2c:	0800ee67 	.word	0x0800ee67
 800eb30:	0800ee9f 	.word	0x0800ee9f
 800eb34:	0800eec3 	.word	0x0800eec3

0800eb38 <_cleanup_r>:
 800eb38:	4901      	ldr	r1, [pc, #4]	; (800eb40 <_cleanup_r+0x8>)
 800eb3a:	f000 b8af 	b.w	800ec9c <_fwalk_reent>
 800eb3e:	bf00      	nop
 800eb40:	0800ea79 	.word	0x0800ea79

0800eb44 <__sfmoreglue>:
 800eb44:	b570      	push	{r4, r5, r6, lr}
 800eb46:	2268      	movs	r2, #104	; 0x68
 800eb48:	1e4d      	subs	r5, r1, #1
 800eb4a:	4355      	muls	r5, r2
 800eb4c:	460e      	mov	r6, r1
 800eb4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb52:	f7ff fa65 	bl	800e020 <_malloc_r>
 800eb56:	4604      	mov	r4, r0
 800eb58:	b140      	cbz	r0, 800eb6c <__sfmoreglue+0x28>
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	e9c0 1600 	strd	r1, r6, [r0]
 800eb60:	300c      	adds	r0, #12
 800eb62:	60a0      	str	r0, [r4, #8]
 800eb64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb68:	f7fd fb3a 	bl	800c1e0 <memset>
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	bd70      	pop	{r4, r5, r6, pc}

0800eb70 <__sfp_lock_acquire>:
 800eb70:	4801      	ldr	r0, [pc, #4]	; (800eb78 <__sfp_lock_acquire+0x8>)
 800eb72:	f000 b8b3 	b.w	800ecdc <__retarget_lock_acquire_recursive>
 800eb76:	bf00      	nop
 800eb78:	20005369 	.word	0x20005369

0800eb7c <__sfp_lock_release>:
 800eb7c:	4801      	ldr	r0, [pc, #4]	; (800eb84 <__sfp_lock_release+0x8>)
 800eb7e:	f000 b8ae 	b.w	800ecde <__retarget_lock_release_recursive>
 800eb82:	bf00      	nop
 800eb84:	20005369 	.word	0x20005369

0800eb88 <__sinit_lock_acquire>:
 800eb88:	4801      	ldr	r0, [pc, #4]	; (800eb90 <__sinit_lock_acquire+0x8>)
 800eb8a:	f000 b8a7 	b.w	800ecdc <__retarget_lock_acquire_recursive>
 800eb8e:	bf00      	nop
 800eb90:	2000536a 	.word	0x2000536a

0800eb94 <__sinit_lock_release>:
 800eb94:	4801      	ldr	r0, [pc, #4]	; (800eb9c <__sinit_lock_release+0x8>)
 800eb96:	f000 b8a2 	b.w	800ecde <__retarget_lock_release_recursive>
 800eb9a:	bf00      	nop
 800eb9c:	2000536a 	.word	0x2000536a

0800eba0 <__sinit>:
 800eba0:	b510      	push	{r4, lr}
 800eba2:	4604      	mov	r4, r0
 800eba4:	f7ff fff0 	bl	800eb88 <__sinit_lock_acquire>
 800eba8:	69a3      	ldr	r3, [r4, #24]
 800ebaa:	b11b      	cbz	r3, 800ebb4 <__sinit+0x14>
 800ebac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebb0:	f7ff bff0 	b.w	800eb94 <__sinit_lock_release>
 800ebb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebb8:	6523      	str	r3, [r4, #80]	; 0x50
 800ebba:	4b13      	ldr	r3, [pc, #76]	; (800ec08 <__sinit+0x68>)
 800ebbc:	4a13      	ldr	r2, [pc, #76]	; (800ec0c <__sinit+0x6c>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebc2:	42a3      	cmp	r3, r4
 800ebc4:	bf04      	itt	eq
 800ebc6:	2301      	moveq	r3, #1
 800ebc8:	61a3      	streq	r3, [r4, #24]
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 f820 	bl	800ec10 <__sfp>
 800ebd0:	6060      	str	r0, [r4, #4]
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f000 f81c 	bl	800ec10 <__sfp>
 800ebd8:	60a0      	str	r0, [r4, #8]
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 f818 	bl	800ec10 <__sfp>
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	60e0      	str	r0, [r4, #12]
 800ebe4:	2104      	movs	r1, #4
 800ebe6:	6860      	ldr	r0, [r4, #4]
 800ebe8:	f7ff ff82 	bl	800eaf0 <std>
 800ebec:	68a0      	ldr	r0, [r4, #8]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	2109      	movs	r1, #9
 800ebf2:	f7ff ff7d 	bl	800eaf0 <std>
 800ebf6:	68e0      	ldr	r0, [r4, #12]
 800ebf8:	2202      	movs	r2, #2
 800ebfa:	2112      	movs	r1, #18
 800ebfc:	f7ff ff78 	bl	800eaf0 <std>
 800ec00:	2301      	movs	r3, #1
 800ec02:	61a3      	str	r3, [r4, #24]
 800ec04:	e7d2      	b.n	800ebac <__sinit+0xc>
 800ec06:	bf00      	nop
 800ec08:	0800ffc4 	.word	0x0800ffc4
 800ec0c:	0800eb39 	.word	0x0800eb39

0800ec10 <__sfp>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	4607      	mov	r7, r0
 800ec14:	f7ff ffac 	bl	800eb70 <__sfp_lock_acquire>
 800ec18:	4b1e      	ldr	r3, [pc, #120]	; (800ec94 <__sfp+0x84>)
 800ec1a:	681e      	ldr	r6, [r3, #0]
 800ec1c:	69b3      	ldr	r3, [r6, #24]
 800ec1e:	b913      	cbnz	r3, 800ec26 <__sfp+0x16>
 800ec20:	4630      	mov	r0, r6
 800ec22:	f7ff ffbd 	bl	800eba0 <__sinit>
 800ec26:	3648      	adds	r6, #72	; 0x48
 800ec28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	d503      	bpl.n	800ec38 <__sfp+0x28>
 800ec30:	6833      	ldr	r3, [r6, #0]
 800ec32:	b30b      	cbz	r3, 800ec78 <__sfp+0x68>
 800ec34:	6836      	ldr	r6, [r6, #0]
 800ec36:	e7f7      	b.n	800ec28 <__sfp+0x18>
 800ec38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec3c:	b9d5      	cbnz	r5, 800ec74 <__sfp+0x64>
 800ec3e:	4b16      	ldr	r3, [pc, #88]	; (800ec98 <__sfp+0x88>)
 800ec40:	60e3      	str	r3, [r4, #12]
 800ec42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec46:	6665      	str	r5, [r4, #100]	; 0x64
 800ec48:	f000 f847 	bl	800ecda <__retarget_lock_init_recursive>
 800ec4c:	f7ff ff96 	bl	800eb7c <__sfp_lock_release>
 800ec50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec58:	6025      	str	r5, [r4, #0]
 800ec5a:	61a5      	str	r5, [r4, #24]
 800ec5c:	2208      	movs	r2, #8
 800ec5e:	4629      	mov	r1, r5
 800ec60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec64:	f7fd fabc 	bl	800c1e0 <memset>
 800ec68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec70:	4620      	mov	r0, r4
 800ec72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec74:	3468      	adds	r4, #104	; 0x68
 800ec76:	e7d9      	b.n	800ec2c <__sfp+0x1c>
 800ec78:	2104      	movs	r1, #4
 800ec7a:	4638      	mov	r0, r7
 800ec7c:	f7ff ff62 	bl	800eb44 <__sfmoreglue>
 800ec80:	4604      	mov	r4, r0
 800ec82:	6030      	str	r0, [r6, #0]
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d1d5      	bne.n	800ec34 <__sfp+0x24>
 800ec88:	f7ff ff78 	bl	800eb7c <__sfp_lock_release>
 800ec8c:	230c      	movs	r3, #12
 800ec8e:	603b      	str	r3, [r7, #0]
 800ec90:	e7ee      	b.n	800ec70 <__sfp+0x60>
 800ec92:	bf00      	nop
 800ec94:	0800ffc4 	.word	0x0800ffc4
 800ec98:	ffff0001 	.word	0xffff0001

0800ec9c <_fwalk_reent>:
 800ec9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eca0:	4606      	mov	r6, r0
 800eca2:	4688      	mov	r8, r1
 800eca4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eca8:	2700      	movs	r7, #0
 800ecaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecae:	f1b9 0901 	subs.w	r9, r9, #1
 800ecb2:	d505      	bpl.n	800ecc0 <_fwalk_reent+0x24>
 800ecb4:	6824      	ldr	r4, [r4, #0]
 800ecb6:	2c00      	cmp	r4, #0
 800ecb8:	d1f7      	bne.n	800ecaa <_fwalk_reent+0xe>
 800ecba:	4638      	mov	r0, r7
 800ecbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecc0:	89ab      	ldrh	r3, [r5, #12]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d907      	bls.n	800ecd6 <_fwalk_reent+0x3a>
 800ecc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecca:	3301      	adds	r3, #1
 800eccc:	d003      	beq.n	800ecd6 <_fwalk_reent+0x3a>
 800ecce:	4629      	mov	r1, r5
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	47c0      	blx	r8
 800ecd4:	4307      	orrs	r7, r0
 800ecd6:	3568      	adds	r5, #104	; 0x68
 800ecd8:	e7e9      	b.n	800ecae <_fwalk_reent+0x12>

0800ecda <__retarget_lock_init_recursive>:
 800ecda:	4770      	bx	lr

0800ecdc <__retarget_lock_acquire_recursive>:
 800ecdc:	4770      	bx	lr

0800ecde <__retarget_lock_release_recursive>:
 800ecde:	4770      	bx	lr

0800ece0 <__swhatbuf_r>:
 800ece0:	b570      	push	{r4, r5, r6, lr}
 800ece2:	460e      	mov	r6, r1
 800ece4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ece8:	2900      	cmp	r1, #0
 800ecea:	b096      	sub	sp, #88	; 0x58
 800ecec:	4614      	mov	r4, r2
 800ecee:	461d      	mov	r5, r3
 800ecf0:	da08      	bge.n	800ed04 <__swhatbuf_r+0x24>
 800ecf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	602a      	str	r2, [r5, #0]
 800ecfa:	061a      	lsls	r2, r3, #24
 800ecfc:	d410      	bmi.n	800ed20 <__swhatbuf_r+0x40>
 800ecfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed02:	e00e      	b.n	800ed22 <__swhatbuf_r+0x42>
 800ed04:	466a      	mov	r2, sp
 800ed06:	f000 f903 	bl	800ef10 <_fstat_r>
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	dbf1      	blt.n	800ecf2 <__swhatbuf_r+0x12>
 800ed0e:	9a01      	ldr	r2, [sp, #4]
 800ed10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed18:	425a      	negs	r2, r3
 800ed1a:	415a      	adcs	r2, r3
 800ed1c:	602a      	str	r2, [r5, #0]
 800ed1e:	e7ee      	b.n	800ecfe <__swhatbuf_r+0x1e>
 800ed20:	2340      	movs	r3, #64	; 0x40
 800ed22:	2000      	movs	r0, #0
 800ed24:	6023      	str	r3, [r4, #0]
 800ed26:	b016      	add	sp, #88	; 0x58
 800ed28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed2c <__smakebuf_r>:
 800ed2c:	898b      	ldrh	r3, [r1, #12]
 800ed2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed30:	079d      	lsls	r5, r3, #30
 800ed32:	4606      	mov	r6, r0
 800ed34:	460c      	mov	r4, r1
 800ed36:	d507      	bpl.n	800ed48 <__smakebuf_r+0x1c>
 800ed38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	6123      	str	r3, [r4, #16]
 800ed40:	2301      	movs	r3, #1
 800ed42:	6163      	str	r3, [r4, #20]
 800ed44:	b002      	add	sp, #8
 800ed46:	bd70      	pop	{r4, r5, r6, pc}
 800ed48:	ab01      	add	r3, sp, #4
 800ed4a:	466a      	mov	r2, sp
 800ed4c:	f7ff ffc8 	bl	800ece0 <__swhatbuf_r>
 800ed50:	9900      	ldr	r1, [sp, #0]
 800ed52:	4605      	mov	r5, r0
 800ed54:	4630      	mov	r0, r6
 800ed56:	f7ff f963 	bl	800e020 <_malloc_r>
 800ed5a:	b948      	cbnz	r0, 800ed70 <__smakebuf_r+0x44>
 800ed5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed60:	059a      	lsls	r2, r3, #22
 800ed62:	d4ef      	bmi.n	800ed44 <__smakebuf_r+0x18>
 800ed64:	f023 0303 	bic.w	r3, r3, #3
 800ed68:	f043 0302 	orr.w	r3, r3, #2
 800ed6c:	81a3      	strh	r3, [r4, #12]
 800ed6e:	e7e3      	b.n	800ed38 <__smakebuf_r+0xc>
 800ed70:	4b0d      	ldr	r3, [pc, #52]	; (800eda8 <__smakebuf_r+0x7c>)
 800ed72:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed74:	89a3      	ldrh	r3, [r4, #12]
 800ed76:	6020      	str	r0, [r4, #0]
 800ed78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed7c:	81a3      	strh	r3, [r4, #12]
 800ed7e:	9b00      	ldr	r3, [sp, #0]
 800ed80:	6163      	str	r3, [r4, #20]
 800ed82:	9b01      	ldr	r3, [sp, #4]
 800ed84:	6120      	str	r0, [r4, #16]
 800ed86:	b15b      	cbz	r3, 800eda0 <__smakebuf_r+0x74>
 800ed88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	f000 f8d1 	bl	800ef34 <_isatty_r>
 800ed92:	b128      	cbz	r0, 800eda0 <__smakebuf_r+0x74>
 800ed94:	89a3      	ldrh	r3, [r4, #12]
 800ed96:	f023 0303 	bic.w	r3, r3, #3
 800ed9a:	f043 0301 	orr.w	r3, r3, #1
 800ed9e:	81a3      	strh	r3, [r4, #12]
 800eda0:	89a0      	ldrh	r0, [r4, #12]
 800eda2:	4305      	orrs	r5, r0
 800eda4:	81a5      	strh	r5, [r4, #12]
 800eda6:	e7cd      	b.n	800ed44 <__smakebuf_r+0x18>
 800eda8:	0800eb39 	.word	0x0800eb39

0800edac <_malloc_usable_size_r>:
 800edac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edb0:	1f18      	subs	r0, r3, #4
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	bfbc      	itt	lt
 800edb6:	580b      	ldrlt	r3, [r1, r0]
 800edb8:	18c0      	addlt	r0, r0, r3
 800edba:	4770      	bx	lr

0800edbc <_raise_r>:
 800edbc:	291f      	cmp	r1, #31
 800edbe:	b538      	push	{r3, r4, r5, lr}
 800edc0:	4604      	mov	r4, r0
 800edc2:	460d      	mov	r5, r1
 800edc4:	d904      	bls.n	800edd0 <_raise_r+0x14>
 800edc6:	2316      	movs	r3, #22
 800edc8:	6003      	str	r3, [r0, #0]
 800edca:	f04f 30ff 	mov.w	r0, #4294967295
 800edce:	bd38      	pop	{r3, r4, r5, pc}
 800edd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edd2:	b112      	cbz	r2, 800edda <_raise_r+0x1e>
 800edd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edd8:	b94b      	cbnz	r3, 800edee <_raise_r+0x32>
 800edda:	4620      	mov	r0, r4
 800eddc:	f000 f830 	bl	800ee40 <_getpid_r>
 800ede0:	462a      	mov	r2, r5
 800ede2:	4601      	mov	r1, r0
 800ede4:	4620      	mov	r0, r4
 800ede6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edea:	f000 b817 	b.w	800ee1c <_kill_r>
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d00a      	beq.n	800ee08 <_raise_r+0x4c>
 800edf2:	1c59      	adds	r1, r3, #1
 800edf4:	d103      	bne.n	800edfe <_raise_r+0x42>
 800edf6:	2316      	movs	r3, #22
 800edf8:	6003      	str	r3, [r0, #0]
 800edfa:	2001      	movs	r0, #1
 800edfc:	e7e7      	b.n	800edce <_raise_r+0x12>
 800edfe:	2400      	movs	r4, #0
 800ee00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee04:	4628      	mov	r0, r5
 800ee06:	4798      	blx	r3
 800ee08:	2000      	movs	r0, #0
 800ee0a:	e7e0      	b.n	800edce <_raise_r+0x12>

0800ee0c <raise>:
 800ee0c:	4b02      	ldr	r3, [pc, #8]	; (800ee18 <raise+0xc>)
 800ee0e:	4601      	mov	r1, r0
 800ee10:	6818      	ldr	r0, [r3, #0]
 800ee12:	f7ff bfd3 	b.w	800edbc <_raise_r>
 800ee16:	bf00      	nop
 800ee18:	20000020 	.word	0x20000020

0800ee1c <_kill_r>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	4d07      	ldr	r5, [pc, #28]	; (800ee3c <_kill_r+0x20>)
 800ee20:	2300      	movs	r3, #0
 800ee22:	4604      	mov	r4, r0
 800ee24:	4608      	mov	r0, r1
 800ee26:	4611      	mov	r1, r2
 800ee28:	602b      	str	r3, [r5, #0]
 800ee2a:	f7f4 fbcb 	bl	80035c4 <_kill>
 800ee2e:	1c43      	adds	r3, r0, #1
 800ee30:	d102      	bne.n	800ee38 <_kill_r+0x1c>
 800ee32:	682b      	ldr	r3, [r5, #0]
 800ee34:	b103      	cbz	r3, 800ee38 <_kill_r+0x1c>
 800ee36:	6023      	str	r3, [r4, #0]
 800ee38:	bd38      	pop	{r3, r4, r5, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20005364 	.word	0x20005364

0800ee40 <_getpid_r>:
 800ee40:	f7f4 bbb8 	b.w	80035b4 <_getpid>

0800ee44 <__sread>:
 800ee44:	b510      	push	{r4, lr}
 800ee46:	460c      	mov	r4, r1
 800ee48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee4c:	f000 f894 	bl	800ef78 <_read_r>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	bfab      	itete	ge
 800ee54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee56:	89a3      	ldrhlt	r3, [r4, #12]
 800ee58:	181b      	addge	r3, r3, r0
 800ee5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee5e:	bfac      	ite	ge
 800ee60:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee62:	81a3      	strhlt	r3, [r4, #12]
 800ee64:	bd10      	pop	{r4, pc}

0800ee66 <__swrite>:
 800ee66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee6a:	461f      	mov	r7, r3
 800ee6c:	898b      	ldrh	r3, [r1, #12]
 800ee6e:	05db      	lsls	r3, r3, #23
 800ee70:	4605      	mov	r5, r0
 800ee72:	460c      	mov	r4, r1
 800ee74:	4616      	mov	r6, r2
 800ee76:	d505      	bpl.n	800ee84 <__swrite+0x1e>
 800ee78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee7c:	2302      	movs	r3, #2
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f000 f868 	bl	800ef54 <_lseek_r>
 800ee84:	89a3      	ldrh	r3, [r4, #12]
 800ee86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee8e:	81a3      	strh	r3, [r4, #12]
 800ee90:	4632      	mov	r2, r6
 800ee92:	463b      	mov	r3, r7
 800ee94:	4628      	mov	r0, r5
 800ee96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9a:	f000 b817 	b.w	800eecc <_write_r>

0800ee9e <__sseek>:
 800ee9e:	b510      	push	{r4, lr}
 800eea0:	460c      	mov	r4, r1
 800eea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea6:	f000 f855 	bl	800ef54 <_lseek_r>
 800eeaa:	1c43      	adds	r3, r0, #1
 800eeac:	89a3      	ldrh	r3, [r4, #12]
 800eeae:	bf15      	itete	ne
 800eeb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eeb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eeba:	81a3      	strheq	r3, [r4, #12]
 800eebc:	bf18      	it	ne
 800eebe:	81a3      	strhne	r3, [r4, #12]
 800eec0:	bd10      	pop	{r4, pc}

0800eec2 <__sclose>:
 800eec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec6:	f000 b813 	b.w	800eef0 <_close_r>
	...

0800eecc <_write_r>:
 800eecc:	b538      	push	{r3, r4, r5, lr}
 800eece:	4d07      	ldr	r5, [pc, #28]	; (800eeec <_write_r+0x20>)
 800eed0:	4604      	mov	r4, r0
 800eed2:	4608      	mov	r0, r1
 800eed4:	4611      	mov	r1, r2
 800eed6:	2200      	movs	r2, #0
 800eed8:	602a      	str	r2, [r5, #0]
 800eeda:	461a      	mov	r2, r3
 800eedc:	f7f4 fba9 	bl	8003632 <_write>
 800eee0:	1c43      	adds	r3, r0, #1
 800eee2:	d102      	bne.n	800eeea <_write_r+0x1e>
 800eee4:	682b      	ldr	r3, [r5, #0]
 800eee6:	b103      	cbz	r3, 800eeea <_write_r+0x1e>
 800eee8:	6023      	str	r3, [r4, #0]
 800eeea:	bd38      	pop	{r3, r4, r5, pc}
 800eeec:	20005364 	.word	0x20005364

0800eef0 <_close_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	4d06      	ldr	r5, [pc, #24]	; (800ef0c <_close_r+0x1c>)
 800eef4:	2300      	movs	r3, #0
 800eef6:	4604      	mov	r4, r0
 800eef8:	4608      	mov	r0, r1
 800eefa:	602b      	str	r3, [r5, #0]
 800eefc:	f7f4 fbb5 	bl	800366a <_close>
 800ef00:	1c43      	adds	r3, r0, #1
 800ef02:	d102      	bne.n	800ef0a <_close_r+0x1a>
 800ef04:	682b      	ldr	r3, [r5, #0]
 800ef06:	b103      	cbz	r3, 800ef0a <_close_r+0x1a>
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	bd38      	pop	{r3, r4, r5, pc}
 800ef0c:	20005364 	.word	0x20005364

0800ef10 <_fstat_r>:
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	4d07      	ldr	r5, [pc, #28]	; (800ef30 <_fstat_r+0x20>)
 800ef14:	2300      	movs	r3, #0
 800ef16:	4604      	mov	r4, r0
 800ef18:	4608      	mov	r0, r1
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	602b      	str	r3, [r5, #0]
 800ef1e:	f7f4 fbb0 	bl	8003682 <_fstat>
 800ef22:	1c43      	adds	r3, r0, #1
 800ef24:	d102      	bne.n	800ef2c <_fstat_r+0x1c>
 800ef26:	682b      	ldr	r3, [r5, #0]
 800ef28:	b103      	cbz	r3, 800ef2c <_fstat_r+0x1c>
 800ef2a:	6023      	str	r3, [r4, #0]
 800ef2c:	bd38      	pop	{r3, r4, r5, pc}
 800ef2e:	bf00      	nop
 800ef30:	20005364 	.word	0x20005364

0800ef34 <_isatty_r>:
 800ef34:	b538      	push	{r3, r4, r5, lr}
 800ef36:	4d06      	ldr	r5, [pc, #24]	; (800ef50 <_isatty_r+0x1c>)
 800ef38:	2300      	movs	r3, #0
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	4608      	mov	r0, r1
 800ef3e:	602b      	str	r3, [r5, #0]
 800ef40:	f7f4 fbaf 	bl	80036a2 <_isatty>
 800ef44:	1c43      	adds	r3, r0, #1
 800ef46:	d102      	bne.n	800ef4e <_isatty_r+0x1a>
 800ef48:	682b      	ldr	r3, [r5, #0]
 800ef4a:	b103      	cbz	r3, 800ef4e <_isatty_r+0x1a>
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	bd38      	pop	{r3, r4, r5, pc}
 800ef50:	20005364 	.word	0x20005364

0800ef54 <_lseek_r>:
 800ef54:	b538      	push	{r3, r4, r5, lr}
 800ef56:	4d07      	ldr	r5, [pc, #28]	; (800ef74 <_lseek_r+0x20>)
 800ef58:	4604      	mov	r4, r0
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	2200      	movs	r2, #0
 800ef60:	602a      	str	r2, [r5, #0]
 800ef62:	461a      	mov	r2, r3
 800ef64:	f7f4 fba8 	bl	80036b8 <_lseek>
 800ef68:	1c43      	adds	r3, r0, #1
 800ef6a:	d102      	bne.n	800ef72 <_lseek_r+0x1e>
 800ef6c:	682b      	ldr	r3, [r5, #0]
 800ef6e:	b103      	cbz	r3, 800ef72 <_lseek_r+0x1e>
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	bd38      	pop	{r3, r4, r5, pc}
 800ef74:	20005364 	.word	0x20005364

0800ef78 <_read_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d07      	ldr	r5, [pc, #28]	; (800ef98 <_read_r+0x20>)
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	4608      	mov	r0, r1
 800ef80:	4611      	mov	r1, r2
 800ef82:	2200      	movs	r2, #0
 800ef84:	602a      	str	r2, [r5, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	f7f4 fb36 	bl	80035f8 <_read>
 800ef8c:	1c43      	adds	r3, r0, #1
 800ef8e:	d102      	bne.n	800ef96 <_read_r+0x1e>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	b103      	cbz	r3, 800ef96 <_read_r+0x1e>
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
 800ef98:	20005364 	.word	0x20005364

0800ef9c <roundf>:
 800ef9c:	ee10 0a10 	vmov	r0, s0
 800efa0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800efa4:	3a7f      	subs	r2, #127	; 0x7f
 800efa6:	2a16      	cmp	r2, #22
 800efa8:	dc15      	bgt.n	800efd6 <roundf+0x3a>
 800efaa:	2a00      	cmp	r2, #0
 800efac:	da08      	bge.n	800efc0 <roundf+0x24>
 800efae:	3201      	adds	r2, #1
 800efb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800efb4:	d101      	bne.n	800efba <roundf+0x1e>
 800efb6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800efba:	ee00 3a10 	vmov	s0, r3
 800efbe:	4770      	bx	lr
 800efc0:	4907      	ldr	r1, [pc, #28]	; (800efe0 <roundf+0x44>)
 800efc2:	4111      	asrs	r1, r2
 800efc4:	4208      	tst	r0, r1
 800efc6:	d0fa      	beq.n	800efbe <roundf+0x22>
 800efc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800efcc:	4113      	asrs	r3, r2
 800efce:	4403      	add	r3, r0
 800efd0:	ea23 0301 	bic.w	r3, r3, r1
 800efd4:	e7f1      	b.n	800efba <roundf+0x1e>
 800efd6:	2a80      	cmp	r2, #128	; 0x80
 800efd8:	d1f1      	bne.n	800efbe <roundf+0x22>
 800efda:	ee30 0a00 	vadd.f32	s0, s0, s0
 800efde:	4770      	bx	lr
 800efe0:	007fffff 	.word	0x007fffff
 800efe4:	00000000 	.word	0x00000000

0800efe8 <log>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	ed2d 8b02 	vpush	{d8}
 800efee:	ec55 4b10 	vmov	r4, r5, d0
 800eff2:	f000 f839 	bl	800f068 <__ieee754_log>
 800eff6:	4622      	mov	r2, r4
 800eff8:	462b      	mov	r3, r5
 800effa:	4620      	mov	r0, r4
 800effc:	4629      	mov	r1, r5
 800effe:	eeb0 8a40 	vmov.f32	s16, s0
 800f002:	eef0 8a60 	vmov.f32	s17, s1
 800f006:	f7f1 fd91 	bl	8000b2c <__aeabi_dcmpun>
 800f00a:	b998      	cbnz	r0, 800f034 <log+0x4c>
 800f00c:	2200      	movs	r2, #0
 800f00e:	2300      	movs	r3, #0
 800f010:	4620      	mov	r0, r4
 800f012:	4629      	mov	r1, r5
 800f014:	f7f1 fd80 	bl	8000b18 <__aeabi_dcmpgt>
 800f018:	b960      	cbnz	r0, 800f034 <log+0x4c>
 800f01a:	2200      	movs	r2, #0
 800f01c:	2300      	movs	r3, #0
 800f01e:	4620      	mov	r0, r4
 800f020:	4629      	mov	r1, r5
 800f022:	f7f1 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 800f026:	b160      	cbz	r0, 800f042 <log+0x5a>
 800f028:	f7fd f8a2 	bl	800c170 <__errno>
 800f02c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800f058 <log+0x70>
 800f030:	2322      	movs	r3, #34	; 0x22
 800f032:	6003      	str	r3, [r0, #0]
 800f034:	eeb0 0a48 	vmov.f32	s0, s16
 800f038:	eef0 0a68 	vmov.f32	s1, s17
 800f03c:	ecbd 8b02 	vpop	{d8}
 800f040:	bd38      	pop	{r3, r4, r5, pc}
 800f042:	f7fd f895 	bl	800c170 <__errno>
 800f046:	ecbd 8b02 	vpop	{d8}
 800f04a:	2321      	movs	r3, #33	; 0x21
 800f04c:	6003      	str	r3, [r0, #0]
 800f04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f052:	4803      	ldr	r0, [pc, #12]	; (800f060 <log+0x78>)
 800f054:	f000 b9c4 	b.w	800f3e0 <nan>
 800f058:	00000000 	.word	0x00000000
 800f05c:	fff00000 	.word	0xfff00000
 800f060:	08010230 	.word	0x08010230
 800f064:	00000000 	.word	0x00000000

0800f068 <__ieee754_log>:
 800f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06c:	ec51 0b10 	vmov	r0, r1, d0
 800f070:	ed2d 8b04 	vpush	{d8-d9}
 800f074:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f078:	b083      	sub	sp, #12
 800f07a:	460d      	mov	r5, r1
 800f07c:	da29      	bge.n	800f0d2 <__ieee754_log+0x6a>
 800f07e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f082:	4303      	orrs	r3, r0
 800f084:	ee10 2a10 	vmov	r2, s0
 800f088:	d10c      	bne.n	800f0a4 <__ieee754_log+0x3c>
 800f08a:	49cf      	ldr	r1, [pc, #828]	; (800f3c8 <__ieee754_log+0x360>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	2300      	movs	r3, #0
 800f090:	2000      	movs	r0, #0
 800f092:	f7f1 fbdb 	bl	800084c <__aeabi_ddiv>
 800f096:	ec41 0b10 	vmov	d0, r0, r1
 800f09a:	b003      	add	sp, #12
 800f09c:	ecbd 8b04 	vpop	{d8-d9}
 800f0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a4:	2900      	cmp	r1, #0
 800f0a6:	da05      	bge.n	800f0b4 <__ieee754_log+0x4c>
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	f7f1 f8ed 	bl	8000288 <__aeabi_dsub>
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	e7ee      	b.n	800f092 <__ieee754_log+0x2a>
 800f0b4:	4bc5      	ldr	r3, [pc, #788]	; (800f3cc <__ieee754_log+0x364>)
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f7f1 fa9e 	bl	80005f8 <__aeabi_dmul>
 800f0bc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800f0c0:	460d      	mov	r5, r1
 800f0c2:	4ac3      	ldr	r2, [pc, #780]	; (800f3d0 <__ieee754_log+0x368>)
 800f0c4:	4295      	cmp	r5, r2
 800f0c6:	dd06      	ble.n	800f0d6 <__ieee754_log+0x6e>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	f7f1 f8de 	bl	800028c <__adddf3>
 800f0d0:	e7e1      	b.n	800f096 <__ieee754_log+0x2e>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	e7f5      	b.n	800f0c2 <__ieee754_log+0x5a>
 800f0d6:	152c      	asrs	r4, r5, #20
 800f0d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f0dc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f0e0:	441c      	add	r4, r3
 800f0e2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800f0e6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800f0ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f0ee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800f0f2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800f0f6:	ea42 0105 	orr.w	r1, r2, r5
 800f0fa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f0fe:	2200      	movs	r2, #0
 800f100:	4bb4      	ldr	r3, [pc, #720]	; (800f3d4 <__ieee754_log+0x36c>)
 800f102:	f7f1 f8c1 	bl	8000288 <__aeabi_dsub>
 800f106:	1cab      	adds	r3, r5, #2
 800f108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	4682      	mov	sl, r0
 800f110:	468b      	mov	fp, r1
 800f112:	f04f 0200 	mov.w	r2, #0
 800f116:	dc53      	bgt.n	800f1c0 <__ieee754_log+0x158>
 800f118:	2300      	movs	r3, #0
 800f11a:	f7f1 fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f11e:	b1d0      	cbz	r0, 800f156 <__ieee754_log+0xee>
 800f120:	2c00      	cmp	r4, #0
 800f122:	f000 8122 	beq.w	800f36a <__ieee754_log+0x302>
 800f126:	4620      	mov	r0, r4
 800f128:	f7f1 f9fc 	bl	8000524 <__aeabi_i2d>
 800f12c:	a390      	add	r3, pc, #576	; (adr r3, 800f370 <__ieee754_log+0x308>)
 800f12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f132:	4606      	mov	r6, r0
 800f134:	460f      	mov	r7, r1
 800f136:	f7f1 fa5f 	bl	80005f8 <__aeabi_dmul>
 800f13a:	a38f      	add	r3, pc, #572	; (adr r3, 800f378 <__ieee754_log+0x310>)
 800f13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f140:	4604      	mov	r4, r0
 800f142:	460d      	mov	r5, r1
 800f144:	4630      	mov	r0, r6
 800f146:	4639      	mov	r1, r7
 800f148:	f7f1 fa56 	bl	80005f8 <__aeabi_dmul>
 800f14c:	4602      	mov	r2, r0
 800f14e:	460b      	mov	r3, r1
 800f150:	4620      	mov	r0, r4
 800f152:	4629      	mov	r1, r5
 800f154:	e7ba      	b.n	800f0cc <__ieee754_log+0x64>
 800f156:	a38a      	add	r3, pc, #552	; (adr r3, 800f380 <__ieee754_log+0x318>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	4650      	mov	r0, sl
 800f15e:	4659      	mov	r1, fp
 800f160:	f7f1 fa4a 	bl	80005f8 <__aeabi_dmul>
 800f164:	4602      	mov	r2, r0
 800f166:	460b      	mov	r3, r1
 800f168:	2000      	movs	r0, #0
 800f16a:	499b      	ldr	r1, [pc, #620]	; (800f3d8 <__ieee754_log+0x370>)
 800f16c:	f7f1 f88c 	bl	8000288 <__aeabi_dsub>
 800f170:	4652      	mov	r2, sl
 800f172:	4606      	mov	r6, r0
 800f174:	460f      	mov	r7, r1
 800f176:	465b      	mov	r3, fp
 800f178:	4650      	mov	r0, sl
 800f17a:	4659      	mov	r1, fp
 800f17c:	f7f1 fa3c 	bl	80005f8 <__aeabi_dmul>
 800f180:	4602      	mov	r2, r0
 800f182:	460b      	mov	r3, r1
 800f184:	4630      	mov	r0, r6
 800f186:	4639      	mov	r1, r7
 800f188:	f7f1 fa36 	bl	80005f8 <__aeabi_dmul>
 800f18c:	4606      	mov	r6, r0
 800f18e:	460f      	mov	r7, r1
 800f190:	b914      	cbnz	r4, 800f198 <__ieee754_log+0x130>
 800f192:	4632      	mov	r2, r6
 800f194:	463b      	mov	r3, r7
 800f196:	e0a2      	b.n	800f2de <__ieee754_log+0x276>
 800f198:	4620      	mov	r0, r4
 800f19a:	f7f1 f9c3 	bl	8000524 <__aeabi_i2d>
 800f19e:	a374      	add	r3, pc, #464	; (adr r3, 800f370 <__ieee754_log+0x308>)
 800f1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a4:	4680      	mov	r8, r0
 800f1a6:	4689      	mov	r9, r1
 800f1a8:	f7f1 fa26 	bl	80005f8 <__aeabi_dmul>
 800f1ac:	a372      	add	r3, pc, #456	; (adr r3, 800f378 <__ieee754_log+0x310>)
 800f1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	460d      	mov	r5, r1
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	4649      	mov	r1, r9
 800f1ba:	f7f1 fa1d 	bl	80005f8 <__aeabi_dmul>
 800f1be:	e0a7      	b.n	800f310 <__ieee754_log+0x2a8>
 800f1c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f1c4:	f7f1 f862 	bl	800028c <__adddf3>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4650      	mov	r0, sl
 800f1ce:	4659      	mov	r1, fp
 800f1d0:	f7f1 fb3c 	bl	800084c <__aeabi_ddiv>
 800f1d4:	ec41 0b18 	vmov	d8, r0, r1
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f7f1 f9a3 	bl	8000524 <__aeabi_i2d>
 800f1de:	ec53 2b18 	vmov	r2, r3, d8
 800f1e2:	ec41 0b19 	vmov	d9, r0, r1
 800f1e6:	ec51 0b18 	vmov	r0, r1, d8
 800f1ea:	f7f1 fa05 	bl	80005f8 <__aeabi_dmul>
 800f1ee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800f1f2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800f1f6:	9301      	str	r3, [sp, #4]
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	4680      	mov	r8, r0
 800f1fe:	4689      	mov	r9, r1
 800f200:	f7f1 f9fa 	bl	80005f8 <__aeabi_dmul>
 800f204:	a360      	add	r3, pc, #384	; (adr r3, 800f388 <__ieee754_log+0x320>)
 800f206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20a:	4606      	mov	r6, r0
 800f20c:	460f      	mov	r7, r1
 800f20e:	f7f1 f9f3 	bl	80005f8 <__aeabi_dmul>
 800f212:	a35f      	add	r3, pc, #380	; (adr r3, 800f390 <__ieee754_log+0x328>)
 800f214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f218:	f7f1 f838 	bl	800028c <__adddf3>
 800f21c:	4632      	mov	r2, r6
 800f21e:	463b      	mov	r3, r7
 800f220:	f7f1 f9ea 	bl	80005f8 <__aeabi_dmul>
 800f224:	a35c      	add	r3, pc, #368	; (adr r3, 800f398 <__ieee754_log+0x330>)
 800f226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22a:	f7f1 f82f 	bl	800028c <__adddf3>
 800f22e:	4632      	mov	r2, r6
 800f230:	463b      	mov	r3, r7
 800f232:	f7f1 f9e1 	bl	80005f8 <__aeabi_dmul>
 800f236:	a35a      	add	r3, pc, #360	; (adr r3, 800f3a0 <__ieee754_log+0x338>)
 800f238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23c:	f7f1 f826 	bl	800028c <__adddf3>
 800f240:	4642      	mov	r2, r8
 800f242:	464b      	mov	r3, r9
 800f244:	f7f1 f9d8 	bl	80005f8 <__aeabi_dmul>
 800f248:	a357      	add	r3, pc, #348	; (adr r3, 800f3a8 <__ieee754_log+0x340>)
 800f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24e:	4680      	mov	r8, r0
 800f250:	4689      	mov	r9, r1
 800f252:	4630      	mov	r0, r6
 800f254:	4639      	mov	r1, r7
 800f256:	f7f1 f9cf 	bl	80005f8 <__aeabi_dmul>
 800f25a:	a355      	add	r3, pc, #340	; (adr r3, 800f3b0 <__ieee754_log+0x348>)
 800f25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f260:	f7f1 f814 	bl	800028c <__adddf3>
 800f264:	4632      	mov	r2, r6
 800f266:	463b      	mov	r3, r7
 800f268:	f7f1 f9c6 	bl	80005f8 <__aeabi_dmul>
 800f26c:	a352      	add	r3, pc, #328	; (adr r3, 800f3b8 <__ieee754_log+0x350>)
 800f26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f272:	f7f1 f80b 	bl	800028c <__adddf3>
 800f276:	4632      	mov	r2, r6
 800f278:	463b      	mov	r3, r7
 800f27a:	f7f1 f9bd 	bl	80005f8 <__aeabi_dmul>
 800f27e:	460b      	mov	r3, r1
 800f280:	4602      	mov	r2, r0
 800f282:	4649      	mov	r1, r9
 800f284:	4640      	mov	r0, r8
 800f286:	f7f1 f801 	bl	800028c <__adddf3>
 800f28a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800f28e:	9b01      	ldr	r3, [sp, #4]
 800f290:	3551      	adds	r5, #81	; 0x51
 800f292:	431d      	orrs	r5, r3
 800f294:	2d00      	cmp	r5, #0
 800f296:	4680      	mov	r8, r0
 800f298:	4689      	mov	r9, r1
 800f29a:	dd48      	ble.n	800f32e <__ieee754_log+0x2c6>
 800f29c:	4b4e      	ldr	r3, [pc, #312]	; (800f3d8 <__ieee754_log+0x370>)
 800f29e:	2200      	movs	r2, #0
 800f2a0:	4650      	mov	r0, sl
 800f2a2:	4659      	mov	r1, fp
 800f2a4:	f7f1 f9a8 	bl	80005f8 <__aeabi_dmul>
 800f2a8:	4652      	mov	r2, sl
 800f2aa:	465b      	mov	r3, fp
 800f2ac:	f7f1 f9a4 	bl	80005f8 <__aeabi_dmul>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	4606      	mov	r6, r0
 800f2b6:	460f      	mov	r7, r1
 800f2b8:	4640      	mov	r0, r8
 800f2ba:	4649      	mov	r1, r9
 800f2bc:	f7f0 ffe6 	bl	800028c <__adddf3>
 800f2c0:	ec53 2b18 	vmov	r2, r3, d8
 800f2c4:	f7f1 f998 	bl	80005f8 <__aeabi_dmul>
 800f2c8:	4680      	mov	r8, r0
 800f2ca:	4689      	mov	r9, r1
 800f2cc:	b964      	cbnz	r4, 800f2e8 <__ieee754_log+0x280>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	4639      	mov	r1, r7
 800f2d6:	f7f0 ffd7 	bl	8000288 <__aeabi_dsub>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	460b      	mov	r3, r1
 800f2de:	4650      	mov	r0, sl
 800f2e0:	4659      	mov	r1, fp
 800f2e2:	f7f0 ffd1 	bl	8000288 <__aeabi_dsub>
 800f2e6:	e6d6      	b.n	800f096 <__ieee754_log+0x2e>
 800f2e8:	a321      	add	r3, pc, #132	; (adr r3, 800f370 <__ieee754_log+0x308>)
 800f2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ee:	ec51 0b19 	vmov	r0, r1, d9
 800f2f2:	f7f1 f981 	bl	80005f8 <__aeabi_dmul>
 800f2f6:	a320      	add	r3, pc, #128	; (adr r3, 800f378 <__ieee754_log+0x310>)
 800f2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	460d      	mov	r5, r1
 800f300:	ec51 0b19 	vmov	r0, r1, d9
 800f304:	f7f1 f978 	bl	80005f8 <__aeabi_dmul>
 800f308:	4642      	mov	r2, r8
 800f30a:	464b      	mov	r3, r9
 800f30c:	f7f0 ffbe 	bl	800028c <__adddf3>
 800f310:	4602      	mov	r2, r0
 800f312:	460b      	mov	r3, r1
 800f314:	4630      	mov	r0, r6
 800f316:	4639      	mov	r1, r7
 800f318:	f7f0 ffb6 	bl	8000288 <__aeabi_dsub>
 800f31c:	4652      	mov	r2, sl
 800f31e:	465b      	mov	r3, fp
 800f320:	f7f0 ffb2 	bl	8000288 <__aeabi_dsub>
 800f324:	4602      	mov	r2, r0
 800f326:	460b      	mov	r3, r1
 800f328:	4620      	mov	r0, r4
 800f32a:	4629      	mov	r1, r5
 800f32c:	e7d9      	b.n	800f2e2 <__ieee754_log+0x27a>
 800f32e:	4602      	mov	r2, r0
 800f330:	460b      	mov	r3, r1
 800f332:	4650      	mov	r0, sl
 800f334:	4659      	mov	r1, fp
 800f336:	f7f0 ffa7 	bl	8000288 <__aeabi_dsub>
 800f33a:	ec53 2b18 	vmov	r2, r3, d8
 800f33e:	f7f1 f95b 	bl	80005f8 <__aeabi_dmul>
 800f342:	4606      	mov	r6, r0
 800f344:	460f      	mov	r7, r1
 800f346:	2c00      	cmp	r4, #0
 800f348:	f43f af23 	beq.w	800f192 <__ieee754_log+0x12a>
 800f34c:	a308      	add	r3, pc, #32	; (adr r3, 800f370 <__ieee754_log+0x308>)
 800f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f352:	ec51 0b19 	vmov	r0, r1, d9
 800f356:	f7f1 f94f 	bl	80005f8 <__aeabi_dmul>
 800f35a:	a307      	add	r3, pc, #28	; (adr r3, 800f378 <__ieee754_log+0x310>)
 800f35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f360:	4604      	mov	r4, r0
 800f362:	460d      	mov	r5, r1
 800f364:	ec51 0b19 	vmov	r0, r1, d9
 800f368:	e727      	b.n	800f1ba <__ieee754_log+0x152>
 800f36a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800f3c0 <__ieee754_log+0x358>
 800f36e:	e694      	b.n	800f09a <__ieee754_log+0x32>
 800f370:	fee00000 	.word	0xfee00000
 800f374:	3fe62e42 	.word	0x3fe62e42
 800f378:	35793c76 	.word	0x35793c76
 800f37c:	3dea39ef 	.word	0x3dea39ef
 800f380:	55555555 	.word	0x55555555
 800f384:	3fd55555 	.word	0x3fd55555
 800f388:	df3e5244 	.word	0xdf3e5244
 800f38c:	3fc2f112 	.word	0x3fc2f112
 800f390:	96cb03de 	.word	0x96cb03de
 800f394:	3fc74664 	.word	0x3fc74664
 800f398:	94229359 	.word	0x94229359
 800f39c:	3fd24924 	.word	0x3fd24924
 800f3a0:	55555593 	.word	0x55555593
 800f3a4:	3fe55555 	.word	0x3fe55555
 800f3a8:	d078c69f 	.word	0xd078c69f
 800f3ac:	3fc39a09 	.word	0x3fc39a09
 800f3b0:	1d8e78af 	.word	0x1d8e78af
 800f3b4:	3fcc71c5 	.word	0x3fcc71c5
 800f3b8:	9997fa04 	.word	0x9997fa04
 800f3bc:	3fd99999 	.word	0x3fd99999
	...
 800f3c8:	c3500000 	.word	0xc3500000
 800f3cc:	43500000 	.word	0x43500000
 800f3d0:	7fefffff 	.word	0x7fefffff
 800f3d4:	3ff00000 	.word	0x3ff00000
 800f3d8:	3fe00000 	.word	0x3fe00000
 800f3dc:	00000000 	.word	0x00000000

0800f3e0 <nan>:
 800f3e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3e8 <nan+0x8>
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop
 800f3e8:	00000000 	.word	0x00000000
 800f3ec:	7ff80000 	.word	0x7ff80000

0800f3f0 <_init>:
 800f3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3f2:	bf00      	nop
 800f3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3f6:	bc08      	pop	{r3}
 800f3f8:	469e      	mov	lr, r3
 800f3fa:	4770      	bx	lr

0800f3fc <_fini>:
 800f3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3fe:	bf00      	nop
 800f400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f402:	bc08      	pop	{r3}
 800f404:	469e      	mov	lr, r3
 800f406:	4770      	bx	lr
